=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::AppApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AppApi' do
  before do
    # run before each test
    @instance = SwaggerClient::AppApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AppApi' do
    it 'should create an instance of AppApi' do
      expect(@instance).to be_instance_of(SwaggerClient::AppApi)
    end
  end

  # unit tests for create_app
  # Create a new app
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateApp] :body App data to create
  # @return [App]
  describe 'create_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_app
  # Delete an app
  # 
  # @param app_id App id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_apps
  # Return all active apps available for a particular org
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :q Search query
  # @option opts [String] :type Filter by type (app, bundle)
  # @option opts [String] :from App id to start from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsApp]
  describe 'find_apps test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_global_apps
  # Return all publicly visible global apps
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :tag Tag to filter by
  # @option opts [String] :from App id to start from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsApp]
  describe 'find_global_apps test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_installed_apps
  # Find installed app users
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Filter by type (app, bundle)
  # @option opts [String] :from App id to start from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsUser]
  describe 'find_installed_apps test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_access_token
  # Generate or regenerate a long-lived access token for the app
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id App user id
  # @param [Hash] opts the optional parameters
  # @option opts [ScopeRequest] :body 
  # @return [AccessTokenResponse]
  describe 'generate_access_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_access_token
  # Retrieve the current token for this app
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id App user id
  # @param [Hash] opts the optional parameters
  # @return [AccessTokenResponse]
  describe 'get_access_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_app
  # Return a particular app by id
  # 
  # @param app_id App id
  # @param [Hash] opts the optional parameters
  # @return [App]
  describe 'get_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_app_by_name
  # Return a particular app by name
  # 
  # @param app_name App name
  # @param [Hash] opts the optional parameters
  # @return [App]
  describe 'get_app_by_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_authorization_code
  # Retrieve an Oauth2 authorization code for this app, which can be exchanged for an access token
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id App user id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scope Scopes
  # @return [AccessTokenResponse]
  describe 'get_authorization_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_installed_app
  # Get an installed app
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id App user id
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_installed_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_installed_app_by_name
  # Get an installed app by name
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_name App name
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_installed_app_by_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for install_app
  # Install an app for a particular org
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateUser] :body App user data to create
  # @return [nil]
  describe 'install_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for run_installed_app
  # Run an installed app
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id App user id
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body 
  # @return [Process]
  describe 'run_installed_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_notification
  # Send an email notification to the configured notify users, on behalf of an app
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [NotifyRequest] :body 
  # @return [nil]
  describe 'send_notification test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for uninstall_app
  # Uninstall an app
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id App user id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'uninstall_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_app
  # Update an existing app
  # 
  # @param app_id App id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateApp] :body App data to update
  # @return [nil]
  describe 'update_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_installed_app
  # Update the settings of an installed app
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id App user id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateUser] :body App user data to update
  # @return [nil]
  describe 'update_installed_app test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_bundle
  # Check if a bundle can be installed for an org.
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_id App id
  # @param [Hash] opts the optional parameters
  # @return [Bundle]
  describe 'validate_bundle test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
