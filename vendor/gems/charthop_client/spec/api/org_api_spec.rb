=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::OrgApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'OrgApi' do
  before do
    # run before each test
    @instance = SwaggerClient::OrgApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrgApi' do
    it 'should create an instance of OrgApi' do
      expect(@instance).to be_instance_of(SwaggerClient::OrgApi)
    end
  end

  # unit tests for change_org_head
  # Create a new org head in the history, by creating an empty job placeholder above the current head
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'change_org_head test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for consent_service_agreement
  # Consent on Terms of Service agreement
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [AgreementRequest] :body 
  # @return [nil]
  describe 'consent_service_agreement test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_org
  # Create a new org
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateOrg] :body Org data to create
  # @return [nil]
  describe 'create_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_orgs
  # Return all visible orgs, paginated by name
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from Org id to start from
  # @option opts [String] :q Search query
  # @option opts [Integer] :limit Number of results to return
  # @option opts [String] :customer_id Find orgs belonging to a particular customer id
  # @option opts [BOOLEAN] :real_only Include only orgs where type is REAL?
  # @option opts [Integer] :last_create_at Only include orgs whose last createAt occurred after the date
  # @option opts [Integer] :last_active_at Only include orgs whose last activeAt occurred after the date
  # @return [ResultsOrg]
  describe 'find_orgs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_org
  # Return a particular org by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @return [Org]
  describe 'get_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_org_by_slug
  # Return a particular org by slug
  # 
  # @param slug Org slug
  # @param [Hash] opts the optional parameters
  # @return [Org]
  describe 'get_org_by_slug test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_org_by_slug_no_auth
  # Return validation for a org by slug
  # 
  # @param slug Org slug
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_org_by_slug_no_auth test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_org_data
  # Return all data for a particular org, except for jobs &amp; people (this is used by the web app on initialization)
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @return [OrgData]
  describe 'get_org_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_org_people_and_jobs
  # Return people and job data for a particular org (this is used by the web app on initialization)
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @return [OrgJobsPersonsResponse]
  describe 'get_org_people_and_jobs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_test_email
  # Send a test welcome email to oneself
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [TestEmailRequest] :body 
  # @return [nil]
  describe 'send_test_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_org
  # Update an existing org
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateOrg] :body Org data to update
  # @return [nil]
  describe 'update_org test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
