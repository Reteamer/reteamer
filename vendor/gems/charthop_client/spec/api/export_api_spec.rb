=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ExportApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ExportApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ExportApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExportApi' do
    it 'should create an instance of ExportApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ExportApi)
    end
  end

  # unit tests for export_csv_changes
  # Export a changelog to CSV format
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_csv_changes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_csv_fields
  # Export a CSV of custom fields
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @return [Process]
  describe 'export_csv_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_csv_scenario
  # Export a CSV changelog of a scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_csv_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_csv_snapshot
  # Export a snapshot of a current roster to CSV format
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_csv_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_files
  # Export a zipfile of files downloaded from some field
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :field Field
  # @option opts [Date] :date Date
  # @option opts [String] :scenario_id Scenario id to query
  # @option opts [String] :q Query for jobs or people to match against
  # @option opts [String] :size Size of images to export, if image file (250x250, 50x50, defaults to original)
  # @return [Process]
  describe 'export_files test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_goal_scenario_users
  # Export users within goal scenarios in CSV format
  # 
  # @param org_id Org identifier (either id or slug)
  # @param goal_id goal id
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_goal_scenario_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_org_to_powerpoint
  # Export org chart to Powerpoint
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date date to export the data from
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_org_to_powerpoint test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_pdf_reviews
  # Export reviews in PDF format
  # 
  # @param org_id Org identifier (either id or slug)
  # @param goal_id goal id
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_pdf_reviews test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_report_to_powerpoint
  # Export report to Powerpoint
  # 
  # @param org_id Org identifier (either id or slug)
  # @param report_id report id
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_report_to_powerpoint test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_to_csv_todos
  # Export todos for a review to CSV format
  # 
  # @param org_id Org identifier (either id or slug)
  # @param review_id review id
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_to_csv_todos test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_to_csv_users
  # Export users for a review to CSV format
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_to_csv_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
