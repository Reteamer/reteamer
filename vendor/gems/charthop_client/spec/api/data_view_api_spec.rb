=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DataViewApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DataViewApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DataViewApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DataViewApi' do
    it 'should create an instance of DataViewApi' do
      expect(@instance).to be_instance_of(SwaggerClient::DataViewApi)
    end
  end

  # unit tests for create_data_view
  # Create a data view
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateDataView] :body Data view data to create
  # @return [DataView]
  describe 'create_data_view test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_data_view
  # Delete a data  view
  # 
  # @param org_id Org identifier (either id or slug)
  # @param data_view_id Data view id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_data_view test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_data_views
  # Return all data views in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from Data view id to start paginating from
  # @option opts [String] :type Data view type to filter by
  # @option opts [Integer] :limit Number of results to return
  # @option opts [String] :ids Comma delimited of ids to return
  # @return [ResultsDataView]
  describe 'find_data_views test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_data_view
  # Return a particular data view by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param data_view_id Data view id
  # @param [Hash] opts the optional parameters
  # @return [DataView]
  describe 'get_data_view test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_data_view
  # Update an existing data view
  # 
  # @param org_id Org identifier (either id or slug)
  # @param data_view_id Data view id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateDataView] :body Data view data to update
  # @return [DataView]
  describe 'update_data_view test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
