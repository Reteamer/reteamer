=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ProcessApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ProcessApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ProcessApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProcessApi' do
    it 'should create an instance of ProcessApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ProcessApi)
    end
  end

  # unit tests for complete_with_file_export
  # Upload a file to be attached to a process, and mark the process as complete
  # 
  # @param process_id process id
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file 
  # @return [nil]
  describe 'complete_with_file_export test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create
  # Creates a new process in the pending state
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file 
  # @option opts [String] :org_id Org identifier (either id or slug)
  # @option opts [String] :type Process type
  # @option opts [Integer] :max_rows Max rows allowed in an imported spreadsheet file
  # @option opts [Integer] :min_columns Min columns required in an imported spreadsheet file
  # @option opts [String] :source Import source (e.g. SELF_SERVE)
  # @return [nil]
  describe 'create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_process
  # Creates a new process in the pending state
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateProcess] :body Process data to create
  # @return [Process]
  describe 'create_process test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_processes
  # Retrieve a number of previously run processes
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :org_id Org identifier (either id or slug)
  # @option opts [BOOLEAN] :is_app_process Boolean if an app process
  # @option opts [String] :from from id
  # @option opts [Integer] :limit limit
  # @option opts [String] :parent_process_id Parent process ID to search for children
  # @option opts [String] :type Type to filter by. Accepted values: [&#39;auto&#39;, &#39;manual&#39;]
  # @option opts [Integer] :completed_at_start completed at start
  # @option opts [Integer] :completed_at_end completed at end
  # @option opts [String] :statuses Statuses to filter by, comma-separated. Accepted values: [&#39;DONE&#39;, &#39;ERROR&#39;, &#39;PENDING&#39;, &#39;RUNNING&#39;, &#39;DONE_WITH_ERRORS&#39;]
  # @option opts [BOOLEAN] :is_parent_process Boolean if a parent process
  # @option opts [BOOLEAN] :is_payroll_app_process Boolean if a payroll app process
  # @return [ResultsProcess]
  describe 'find_processes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_app_process_status
  # Get last success sync and last sync for given appUserId
  # 
  # @param org_id Org identifier (either id or slug)
  # @param app_user_id app user id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_app_process_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_process
  # Check the status of a particular process
  # 
  # @param process_id process id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :show_state showState
  # @return [Process]
  describe 'get_process test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_process_file
  # Download the file associated with a particular process
  # 
  # @param process_id process id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_process_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_process_log_file
  # Download the newline-delimited JSON log associated with a particular process
  # 
  # @param process_id process id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_process_log_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_process
  # Update the status of a process, marking its progress or setting status to DONE or ERROR
  # 
  # @param process_id process id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateProcess] :body 
  # @return [nil]
  describe 'update_process test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_stateful_process
  # Update process state
  # 
  # @param process_id process id
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body state
  # @return [nil]
  describe 'update_stateful_process test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
