=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ReportApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ReportApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ReportApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReportApi' do
    it 'should create an instance of ReportApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ReportApi)
    end
  end

  # unit tests for create_report
  # Create a report
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateReport] :body Report data to create
  # @return [Report]
  describe 'create_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_report
  # Delete a report
  # 
  # @param org_id Org identifier (either id or slug)
  # @param report_id Report id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_chart_csv
  # Export a particular chart in a report
  # 
  # @param org_id Org identifier (either id or slug)
  # @param report_id Report id
  # @param chart_id Chart id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :start_date Start date, inclusive
  # @option opts [String] :end_date End date, exclusive
  # @option opts [String] :interval Interval
  # @option opts [String] :scenario_id Scenario id
  # @option opts [BOOLEAN] :project_hires Project future hires
  # @return [Process]
  describe 'export_chart_csv test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_reports
  # Return all reports in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from Report id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsReport]
  describe 'find_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_report_results
  # Query all the charts in a report
  # 
  # @param org_id Org identifier (either id or slug)
  # @param report_id Report id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :start_date Start date, inclusive
  # @option opts [String] :end_date End date, exclusive
  # @option opts [String] :interval Interval
  # @option opts [String] :scenario_id Scenario id
  # @option opts [BOOLEAN] :project_hires Project future hires
  # @option opts [String] :filter Filter to apply to all results
  # @return [ReportResult]
  describe 'get_all_report_results test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report
  # Return a particular report by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param report_id Report id
  # @param [Hash] opts the optional parameters
  # @return [Report]
  describe 'get_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_from_query
  # Return timeseries data from arbitrary queries
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [ReportQuery] :body 
  # @return [ReportResult]
  describe 'get_report_from_query test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_report
  # Update an existing report
  # 
  # @param org_id Org identifier (either id or slug)
  # @param report_id Report id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateReport] :body Report data to update
  # @return [nil]
  describe 'update_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
