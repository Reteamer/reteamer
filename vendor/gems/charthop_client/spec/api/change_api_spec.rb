=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ChangeApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ChangeApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ChangeApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ChangeApi' do
    it 'should create an instance of ChangeApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ChangeApi)
    end
  end

  # unit tests for approve_change
  # Approve or reject a change
  # 
  # @param org_id Org identifier (either id or slug)
  # @param change_id Change id
  # @param [Hash] opts the optional parameters
  # @option opts [ApproveChange] :body Change approval details
  # @return [nil]
  describe 'approve_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_change
  # Perform a series of changes at once
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [BulkChangeRequest] :body Bulk change data
  # @return [Process]
  describe 'bulk_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_update
  # Perform a bulk update on a number of jobs
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [BulkUpdateRequest] :body Bulk update data
  # @return [Process]
  describe 'bulk_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_approver
  # Given a of change id, see if the person can approve/reject
  # 
  # @param org_id Org identifier (either id or slug)
  # @param change_id Change Id
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date to check the approval on
  # @return [BOOLEAN]
  describe 'change_approver test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_change
  # Create a new change
  # 
  # @param org_id Org identifier (either id or slug)
  # @param type Change type
  # @param [Hash] opts the optional parameters
  # @option opts [CreateChange] :body Change data
  # @return [Change]
  describe 'create_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_change
  # Delete a previous change
  # 
  # @param org_id Org identifier (either id or slug)
  # @param change_id Change id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for depart_rehire
  # Create a depart-rehire pair of changes, for filling in historical data
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :start_date Rehire start date
  # @option opts [CreateChange] :body Depart data
  # @return [Change]
  describe 'depart_rehire test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_changes
  # Return recent changes across an org, or for a particular person or job
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_id Scenario id
  # @option opts [Date] :date Date to start from
  # @option opts [String] :type Types of change to filter by
  # @option opts [String] :fields Return changes that modify these fields
  # @option opts [String] :person_id Person id to filter by
  # @option opts [String] :job_id Job id to filter by
  # @option opts [String] :refs References to filter by
  # @option opts [String] :q Query to filter against
  # @option opts [Integer] :from Paginate from
  # @option opts [Integer] :limit Number of results to return
  # @option opts [String] :open Whether the role is open or not
  # @option opts [BOOLEAN] :desc Descending (default false)
  # @option opts [BOOLEAN] :scenario_only Scenario only (exclude primary changes)
  # @option opts [BOOLEAN] :parent_only Parent changes only (exclude child changes)
  # @option opts [BOOLEAN] :include_grant_schedule Whether to include full grant schedule when returning equity updates
  # @option opts [BOOLEAN] :include_struck Deprecated parameter for backwards-compatibility (use statuses) - whether to include STRUCK and PROPOSED changes, or just ACTIVE changes
  # @option opts [String] :status Statuses to filter by
  # @option opts [BOOLEAN] :strip_updates Whether to strip returned update changes of update types that were not explicitly requested
  # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
  # @return [ResultsChange]
  describe 'find_changes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_scenario_changes
  # Return all changes for a particular scenario, with before job
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields to retrieve
  # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
  # @option opts [String] :q Search query
  # @return [ScenarioChangesWithBudgetRollup]
  describe 'find_scenario_changes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_change
  # Return a particular change by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param change_id Change id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
  # @return [Change]
  describe 'get_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sync_change
  # Sync a change (create the change only if it does not already exist)
  # 
  # @param org_id Org identifier (either id or slug)
  # @param type Change type
  # @param [Hash] opts the optional parameters
  # @option opts [CreateChange] :body Change data
  # @return [Change]
  describe 'sync_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_change
  # Make a change to a change
  # 
  # @param org_id Org identifier (either id or slug)
  # @param change_id Change id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateChange] :body Change data
  # @return [nil]
  describe 'update_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_change
  # Validate a change
  # 
  # @param org_id Org identifier (either id or slug)
  # @param type Change type
  # @param [Hash] opts the optional parameters
  # @option opts [CreateChange] :body Change data
  # @return [Change]
  describe 'validate_change test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
