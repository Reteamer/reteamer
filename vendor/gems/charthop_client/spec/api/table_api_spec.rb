=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::TableApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TableApi' do
  before do
    # run before each test
    @instance = SwaggerClient::TableApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TableApi' do
    it 'should create an instance of TableApi' do
      expect(@instance).to be_instance_of(SwaggerClient::TableApi)
    end
  end

  # unit tests for create_table
  # Create a table
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTable] :body Table data to create
  # @return [Table]
  describe 'create_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_table
  # Delete a table
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_csv
  # Export table data to CSV file
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or unique name to update
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body export options
  # @return [Process]
  describe 'export_csv test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_tables
  # Return all tables in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from Table id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsTable]
  describe 'find_tables test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_rows
  # Retrieve all rows from the table
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or unique name to retrieve
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date to search as of
  # @option opts [String] :columns Columns to retrieve, comma-separated (defaults to all columns)
  # @option opts [String] :format Data format to use; default is json, can also use json-extended, json-readable, or csv
  # @return [ResultsData]
  describe 'get_all_rows test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_row
  # Retrieve a particular row
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or unique name to retrieve
  # @param key_column Column name to look up the row by (for example: id)
  # @param key_value Value of the column
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date to search as of
  # @option opts [String] :columns Columns to retrieve, comma-separated (defaults to all columns)
  # @option opts [String] :format Data format to use; default is json, can also use json-extended, json-readable, or csv
  # @return [ResultsData]
  describe 'get_row test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_table
  # Return a particular table by id or name
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or name
  # @param [Hash] opts the optional parameters
  # @return [Table]
  describe 'get_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_csv
  # Import data from CSV file
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or unique name to update
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file 
  # @option opts [Date] :date Date to update as of
  # @return [Process]
  describe 'import_csv test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_row
  # Update an existing row
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or unique name to update
  # @param key_column Column name to look up the row by (for example: id)
  # @param key_value Value of the key column
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date to update as of
  # @option opts [Object] :body 
  # @return [ResultsData]
  describe 'update_row test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_table
  # Update an existing table
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or name
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateTable] :body Table data to update
  # @return [nil]
  describe 'update_table test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_row
  # Upsert row data
  # 
  # @param org_id Org identifier (either id or slug)
  # @param table_id Table id or unique name to update
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date to update as of
  # @option opts [Object] :body 
  # @return [ResultsData]
  describe 'upsert_row test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
