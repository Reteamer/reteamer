=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::FormApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'FormApi' do
  before do
    # run before each test
    @instance = SwaggerClient::FormApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FormApi' do
    it 'should create an instance of FormApi' do
      expect(@instance).to be_instance_of(SwaggerClient::FormApi)
    end
  end

  # unit tests for collect_form_data
  # Collect data for an existing form, sending emails and chat notifications to people being requested
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Form id
  # @param [Hash] opts the optional parameters
  # @option opts [FormCollectRequest] :body Details on the data collection
  # @return [Form]
  describe 'collect_form_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_form
  # Create a form
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateForm] :body Form data to create
  # @return [Form]
  describe 'create_form test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_form
  # Delete a form
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Form id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_form test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_forms
  # Delete forms
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :body Form ids
  # @return [nil]
  describe 'delete_forms test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_forms
  # Return all forms in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Status to filter by
  # @option opts [String] :from Form id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsForm]
  describe 'find_forms test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_forms_for_person
  # Return all active forms applicable to a particular person
  # 
  # @param org_id Org identifier (either id or slug)
  # @param person_id Person id
  # @param [Hash] opts the optional parameters
  # @return [ResultsForm]
  describe 'find_forms_for_person test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_form
  # Return a particular form by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Form id
  # @param [Hash] opts the optional parameters
  # @return [Form]
  describe 'get_form test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_form_draft
  # Get the current state of form draft data
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Form id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :person_id Person id
  # @return [FormDraft]
  describe 'get_form_draft test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remind_form_data
  # Sends reminder for a form with existing todos, sending emails and chat notifications to people being requested
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Form id
  # @param [Hash] opts the optional parameters
  # @option opts [FormCollectRequest] :body Details on the data collection
  # @return [Form]
  describe 'remind_form_data test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit_form
  # Submit data from a form
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Org id
  # @param [Hash] opts the optional parameters
  # @option opts [FormSubmitRequest] :body Form data to submit
  # @return [Form]
  describe 'submit_form test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit_form_draft
  # Submit draft data from a form
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Org id
  # @param [Hash] opts the optional parameters
  # @option opts [FormSubmitRequest] :body Form data to submit
  # @return [FormDraft]
  describe 'submit_form_draft test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_form
  # Update an existing form
  # 
  # @param org_id Org identifier (either id or slug)
  # @param form_id Form id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateForm] :body Form data to update
  # @return [nil]
  describe 'update_form test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_form_status
  # Update status for existing forms
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [FormStatusUpdateRequest] :body Form data to update
  # @return [nil]
  describe 'update_form_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
