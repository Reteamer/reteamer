=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::GoalApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GoalApi' do
  before do
    # run before each test
    @instance = SwaggerClient::GoalApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GoalApi' do
    it 'should create an instance of GoalApi' do
      expect(@instance).to be_instance_of(SwaggerClient::GoalApi)
    end
  end

  # unit tests for complete_goal
  # Complete a goal
  # 
  # @param org_id Org identifier (either id or slug)
  # @param goal_id Goal id
  # @param [Hash] opts the optional parameters
  # @return [Goal]
  describe 'complete_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_goal
  # Create a goal
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :silent Suppress notification emails
  # @option opts [CreateGoal] :body Goal data to create
  # @return [Goal]
  describe 'create_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_goal
  # Delete a goal
  # 
  # @param org_id Org identifier (either id or slug)
  # @param goal_id Goal id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_goals
  # Return all goals in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Type of goal to filter by
  # @option opts [String] :from Goal id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @option opts [String] :ids List of ids to filter by
  # @return [ResultsGoal]
  describe 'find_goals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal
  # Return a particular goal by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param goal_id Goal id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields to retrieve, comma-separated
  # @return [Goal]
  describe 'get_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reactivate_goal
  # Reactivate a goal
  # 
  # @param org_id Org identifier (either id or slug)
  # @param goal_id Goal id
  # @param [Hash] opts the optional parameters
  # @return [Goal]
  describe 'reactivate_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_goal
  # Update an existing goal
  # 
  # @param org_id Org identifier (either id or slug)
  # @param goal_id Goal id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :silent Suppress notification emails
  # @option opts [UpdateGoal] :body Goal data to update
  # @return [nil]
  describe 'update_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
