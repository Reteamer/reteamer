=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::FieldApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'FieldApi' do
  before do
    # run before each test
    @instance = SwaggerClient::FieldApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FieldApi' do
    it 'should create an instance of FieldApi' do
      expect(@instance).to be_instance_of(SwaggerClient::FieldApi)
    end
  end

  # unit tests for create_field
  # Create a field
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateField] :body Field data to create
  # @return [Field]
  describe 'create_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_field
  # Delete a field
  # 
  # @param org_id Org identifier (either id or slug)
  # @param field_id Field id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_fields
  # Delete fields
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :body Field ids
  # @return [nil]
  describe 'delete_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_fields
  # Return all fields in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from Field id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsField]
  describe 'find_fields test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_field
  # Return a particular field by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param field_id Field id
  # @param [Hash] opts the optional parameters
  # @return [Field]
  describe 'get_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_field_category
  # Remove field from all associated categories
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [FieldRemoveCategoryRequest] :body Fields to set as uncategorized
  # @return [nil]
  describe 'remove_field_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_field
  # Update an existing field
  # 
  # @param org_id Org identifier (either id or slug)
  # @param field_id Field id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateField] :body Field data to update
  # @return [nil]
  describe 'update_field test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_field_dry_run
  # Perform a dry-run of an update to an existing field that will require migrations
  # 
  # @param org_id Org identifier (either id or slug)
  # @param field_id Field id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateField] :body Field data to update
  # @return [nil]
  describe 'update_field_dry_run test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_field_status
  # Update status for existing fields
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [FieldStatusUpdateRequest] :body Field data to update
  # @return [nil]
  describe 'update_field_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
