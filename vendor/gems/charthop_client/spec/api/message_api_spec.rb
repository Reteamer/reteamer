=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::MessageApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MessageApi' do
  before do
    # run before each test
    @instance = SwaggerClient::MessageApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MessageApi' do
    it 'should create an instance of MessageApi' do
      expect(@instance).to be_instance_of(SwaggerClient::MessageApi)
    end
  end

  # unit tests for bulk_mark_as_read
  # Sets each of the designated message&#39;s &#x60;readAt&#x60; property
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PartialMessage>] :body Messages to update
  # @return [nil]
  describe 'bulk_mark_as_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_mark_as_seen
  # Marks each message as &#x60;seen&#x60;
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PartialMessage>] :body Messages to update
  # @return [nil]
  describe 'bulk_mark_as_seen test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_message
  # Create a new message
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [PartialMessage] :body Message data to create
  # @return [Message]
  describe 'create_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message
  # Return a particular message by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param message_id Message id
  # @param [Hash] opts the optional parameters
  # @return [Message]
  describe 'get_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_message_by_key
  # Return a particular message by key
  # 
  # @param org_id Org identifier (either id or slug)
  # @param message_key Message key
  # @param [Hash] opts the optional parameters
  # @return [Message]
  describe 'get_message_by_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for mark_as_read
  # Sets the designated message&#39;s &#x60;readAt&#x60; property
  # 
  # @param org_id Org identifier (either id or slug)
  # @param message_id Message id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'mark_as_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for me
  # Return all messages for a particular user
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Message \&quot;type\&quot; (WEB, CHAT, or EMAIL)
  # @option opts [BOOLEAN] :unread_only Message \&quot;status\&quot; (read or unread)
  # @option opts [String] :from MessageId to start paginating from
  # @option opts [Integer] :limit Limit
  # @return [ResultsMessage]
  describe 'me test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
