=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::TemplateApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TemplateApi' do
  before do
    # run before each test
    @instance = SwaggerClient::TemplateApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TemplateApi' do
    it 'should create an instance of TemplateApi' do
      expect(@instance).to be_instance_of(SwaggerClient::TemplateApi)
    end
  end

  # unit tests for create_template
  # Create a template
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateTemplate] :body Template data to create
  # @return [Template]
  describe 'create_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_template
  # Delete a template
  # 
  # @param org_id Org identifier (either id or slug)
  # @param template_id Template id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_templates
  # Return all templates in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type Type of template to filter by
  # @option opts [String] :from Template id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsTemplate]
  describe 'find_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_templates
  # Automatically generate PDFs of the templates, and distribute emails to managers and people to download
  # 
  # @param org_id Org identifier (either id or slug)
  # @param template_id Template id
  # @param [Hash] opts the optional parameters
  # @option opts [GenerateTemplateRequest] :body 
  # @return [Process]
  describe 'generate_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_template
  # Return a particular template by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param template_id Template id
  # @param [Hash] opts the optional parameters
  # @return [Template]
  describe 'get_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for preview_template
  # Preview template content without saving it
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :job_id Job id
  # @option opts [String] :scenario_id Scenario id to query
  # @option opts [Date] :date Date
  # @option opts [String] :format Format
  # @option opts [TemplatePreviewRequest] :body 
  # @return [TemplateRenderResponse]
  describe 'preview_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for render_template
  # Render a template by evaluating it against an existing job
  # 
  # @param org_id Org identifier (either id or slug)
  # @param template_id Template id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :job_id Job id
  # @option opts [String] :scenario_id Scenario id to query
  # @option opts [Date] :date Date
  # @option opts [String] :format Format
  # @return [TemplateRenderResponse]
  describe 'render_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_template
  # Update an existing template
  # 
  # @param org_id Org identifier (either id or slug)
  # @param template_id Template id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateTemplate] :body Template data to update
  # @return [nil]
  describe 'update_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
