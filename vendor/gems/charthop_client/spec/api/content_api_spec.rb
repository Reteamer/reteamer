=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ContentApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ContentApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ContentApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ContentApi' do
    it 'should create an instance of ContentApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ContentApi)
    end
  end

  # unit tests for create_content
  # Create a content
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [CreateContent] :body Content data to create
  # @return [Content]
  describe 'create_content test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_content
  # Delete a content
  # 
  # @param org_id Org identifier (either id or slug)
  # @param content_id Content id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_content test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_content_for_job
  # Return all content applicable to a particular job
  # 
  # @param org_id Org identifier (either id or slug)
  # @param job_id Job id
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date
  # @return [ResultsContent]
  describe 'find_content_for_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_content_for_person
  # Return all content applicable to a particular person
  # 
  # @param org_id Org identifier (either id or slug)
  # @param person_id Person id
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date Date
  # @return [ResultsContent]
  describe 'find_content_for_person test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_contents
  # Return all contents in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :status Status to filter by
  # @option opts [String] :from Content id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsContent]
  describe 'find_contents test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_content
  # Return a particular content by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param content_id Content id
  # @param [Hash] opts the optional parameters
  # @return [Content]
  describe 'get_content test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_content
  # Update an existing content
  # 
  # @param org_id Org identifier (either id or slug)
  # @param content_id Content id
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateContent] :body Content data to update
  # @return [nil]
  describe 'update_content test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
