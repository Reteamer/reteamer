=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::ScenarioApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ScenarioApi' do
  before do
    # run before each test
    @instance = SwaggerClient::ScenarioApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ScenarioApi' do
    it 'should create an instance of ScenarioApi' do
      expect(@instance).to be_instance_of(SwaggerClient::ScenarioApi)
    end
  end

  # unit tests for adjust_dates_scenario
  # Adjust the dates of the changes in a scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @option opts [AdjustScenarioDateRequest] :body 
  # @return [Process]
  describe 'adjust_dates_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_change_approval
  # Bulk update scenario related changes
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @option opts [Array<ApproveChange>] :body List of change approvals to update
  # @return [nil]
  describe 'bulk_change_approval test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_create_scenario
  # Create a scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [BulkCreateScenarioRequest] :body 
  # @return [Process]
  describe 'bulk_create_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for bulk_update_status
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PartialScenario>] :body List of change approvals to update
  # @return [nil]
  describe 'bulk_update_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for combine_scenarios
  # Combine multiple scenarios into another scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id to combine the other scenarios into
  # @param [Hash] opts the optional parameters
  # @option opts [CombineScenarioRequest] :body 
  # @return [Process]
  describe 'combine_scenarios test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_scenario
  # Create a scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :silent Suppress notification emails
  # @option opts [CreateScenario] :body Scenario data to create
  # @option opts [BOOLEAN] :skip_change_creation Skip over change creation for COMP/PROMOTION scenarios
  # @return [Scenario]
  describe 'create_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_todos
  # Request an approval on limited edit scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_role Scenario Role
  # @return [nil]
  describe 'create_todos test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_scenario
  # Delete a scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_scenarios
  # Return all scenarios in the organization paginated
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from Scenario id to start paginating from
  # @option opts [String] :goal_id Goal Id to filter by
  # @option opts [String] :status Scenario status to filter by
  # @option opts [Integer] :limit Number of results to return
  # @return [ResultsScenario]
  describe 'find_scenarios test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_scenario
  # Return a particular scenario by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @return [Scenario]
  describe 'get_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_scenario_goals
  # Return a scenario&#39;s goals, including progress against goals
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @return [ResultsGoal]
  describe 'get_scenario_goals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for merge_scenario
  # Merge a scenario into the primary timeline
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id to merge
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :skip_errors If passed, will skip any changes that fail validation
  # @return [Process]
  describe 'merge_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for preview
  # Build scenarios by target job ids
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [BuildScenariosByJobIdsRequest] :body 
  # @return [Array<CreateScenarioPreview>]
  describe 'preview test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_scenario_change_for_approval
  # Request an approval on limited edit scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :message Message
  # @option opts [Array<String>] :body The list of changes that we want to request approval for
  # @return [nil]
  describe 'request_scenario_change_for_approval test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_scenario
  # Update an existing scenario
  # 
  # @param org_id Org identifier (either id or slug)
  # @param scenario_id Scenario id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :silent Suppress notification emails
  # @option opts [UpdateScenario] :body Scenario data to update
  # @return [nil]
  describe 'update_scenario test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
