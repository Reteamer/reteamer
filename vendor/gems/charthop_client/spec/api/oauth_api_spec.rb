=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::OauthApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'OauthApi' do
  before do
    # run before each test
    @instance = SwaggerClient::OauthApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OauthApi' do
    it 'should create an instance of OauthApi' do
      expect(@instance).to be_instance_of(SwaggerClient::OauthApi)
    end
  end

  # unit tests for delete_token
  # Delete the current Oauth2 bearer token (for signout)
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for handle_redirect
  # Process an Oauth2 redirect request from an access request for an app installation, storing the accessToken and refreshToken as secrets for the app
  # 
  # @param app_name App name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :state State, containing orgId and appUserId
  # @option opts [String] :code Temporary authorization code
  # @return [nil]
  describe 'handle_redirect test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issue_access_token
  # Return an Oauth2 Authorization bearer token, given a username and password
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :grant_type Type of grant; &#39;password&#39;, &#39;refresh_token&#39;, &#39;authorization_code&#39; supported
  # @option opts [String] :username Username to authenticate
  # @option opts [String] :password Password to authenticate
  # @option opts [String] :scope Requested access scope or scopes (space separated)
  # @option opts [String] :code Authorization code
  # @option opts [String] :redirect_uri Redirect URI
  # @option opts [String] :client_id Client id
  # @option opts [String] :refresh_token Refresh token
  # @return [AccessTokenResponse]
  describe 'issue_access_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issue_sso_token
  # Return an Oauth2 Authorization bearer token, given a SSO id token
  # 
  # @param type type of SSO request (google or microsoft)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token token that is used as a basis for reset
  # @option opts [BOOLEAN] :create_org automatically create org if possible to do so
  # @option opts [String] :signup_source sign up source (self-serve, connect, or sequoia)
  # @option opts [GoogleIdTokenRequest] :body id token from google login client side
  # @return [AccessTokenResponse]
  describe 'issue_sso_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for issue_view_token
  # Return a view-as token
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [ViewAsRequest] :body request on whom to view as
  # @return [AccessTokenResponse]
  describe 'issue_view_token test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
