=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::JobApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'JobApi' do
  before do
    # run before each test
    @instance = SwaggerClient::JobApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of JobApi' do
    it 'should create an instance of JobApi' do
      expect(@instance).to be_instance_of(SwaggerClient::JobApi)
    end
  end

  # unit tests for bulk_update1
  # Perform a bulk update on a number of jobs
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [BulkJobUpdateRequest] :body Bulk update data
  # @return [Process]
  describe 'bulk_update1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for count_jobs
  # Count jobs or people in the organization
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_id Scenario id to query
  # @option opts [Date] :date Date to search as of
  # @option opts [String] :q Search query
  # @return [OrgCount]
  describe 'count_jobs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_job
  # Create a job
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_id Scenario id to create the job in
  # @option opts [Date] :date Effective date of job creation
  # @option opts [Object] :body 
  # @return [Object]
  describe 'create_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_job
  # Delete a job
  # 
  # @param org_id Org identifier (either id or slug)
  # @param job_id Job id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_id Scenario id to update the job in
  # @option opts [Date] :date Effective date of job update
  # @return [nil]
  describe 'delete_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_jobs
  # Find jobs in the organization
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_id Scenario id to query
  # @option opts [Date] :date Date to search as of
  # @option opts [String] :q Search query
  # @option opts [String] :from Job id to start paginating from
  # @option opts [Integer] :limit Number of results to return
  # @option opts [String] :fields Fields to retrieve, comma-separated
  # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
  # @return [ResultsData]
  describe 'find_jobs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_jobs_graph
  # Retrieve jobs from a region of the job graph
  # 
  # @param org_id Org identifier (either id or slug)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :start Job id to use as the starting point for the search
  # @option opts [Integer] :depth Number of levels down to search
  # @option opts [Integer] :approx_limit Number of results to return, approximately
  # @option opts [String] :scenario_id Scenario id to query
  # @option opts [String] :q Query string to filter by
  # @option opts [Date] :date Date to search as of
  # @option opts [String] :fields Fields to retrieve, comma-separated
  # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
  # @return [ResultsData]
  describe 'find_jobs_graph test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_job
  # Return a particular job by id
  # 
  # @param org_id Org identifier (either id or slug)
  # @param job_id Job id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_id Scenario id to query
  # @option opts [Date] :date Date
  # @option opts [String] :fields Fields to retrieve, comma-separated
  # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
  # @return [Object]
  describe 'get_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_job
  # Update a job
  # 
  # @param org_id Org identifier (either id or slug)
  # @param job_id Job id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :scenario_id Scenario id to update the job in
  # @option opts [Date] :date Effective date of job update
  # @option opts [Object] :body 
  # @return [nil]
  describe 'update_job test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
