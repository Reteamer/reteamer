=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class JobApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Perform a bulk update on a number of jobs
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkJobUpdateRequest] :body Bulk update data
    # @return [Process]
    def bulk_update1(org_id, opts = {})
      data, _status_code, _headers = bulk_update1_with_http_info(org_id, opts)
      data
    end

    # Perform a bulk update on a number of jobs
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkJobUpdateRequest] :body Bulk update data
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def bulk_update1_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.bulk_update1 ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.bulk_update1"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job/bulkupdate'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#bulk_update1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Count jobs or people in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :q Search query
    # @return [OrgCount]
    def count_jobs(org_id, opts = {})
      data, _status_code, _headers = count_jobs_with_http_info(org_id, opts)
      data
    end

    # Count jobs or people in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :q Search query
    # @return [Array<(OrgCount, Fixnum, Hash)>] OrgCount data, response status code and response headers
    def count_jobs_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.count_jobs ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.count_jobs"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job/count'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrgCount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#count_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to create the job in
    # @option opts [Date] :date Effective date of job creation
    # @option opts [Object] :body 
    # @return [Object]
    def create_job(org_id, opts = {})
      data, _status_code, _headers = create_job_with_http_info(org_id, opts)
      data
    end

    # Create a job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to create the job in
    # @option opts [Date] :date Effective date of job creation
    # @option opts [Object] :body 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_job_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.create_job ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.create_job"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#create_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param job_id Job id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to update the job in
    # @option opts [Date] :date Effective date of job update
    # @return [nil]
    def delete_job(org_id, job_id, opts = {})
      delete_job_with_http_info(org_id, job_id, opts)
      nil
    end

    # Delete a job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param job_id Job id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to update the job in
    # @option opts [Date] :date Effective date of job update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_job_with_http_info(org_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.delete_job ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.delete_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobApi.delete_job"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job/{jobId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#delete_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find jobs in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :q Search query
    # @option opts [String] :from Job id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [ResultsData]
    def find_jobs(org_id, opts = {})
      data, _status_code, _headers = find_jobs_with_http_info(org_id, opts)
      data
    end

    # Find jobs in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :q Search query
    # @option opts [String] :from Job id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def find_jobs_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.find_jobs ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.find_jobs"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#find_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve jobs from a region of the job graph
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Job id to use as the starting point for the search
    # @option opts [Integer] :depth Number of levels down to search
    # @option opts [Integer] :approx_limit Number of results to return, approximately
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [String] :q Query string to filter by
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [ResultsData]
    def find_jobs_graph(org_id, opts = {})
      data, _status_code, _headers = find_jobs_graph_with_http_info(org_id, opts)
      data
    end

    # Retrieve jobs from a region of the job graph
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Job id to use as the starting point for the search
    # @option opts [Integer] :depth Number of levels down to search
    # @option opts [Integer] :approx_limit Number of results to return, approximately
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [String] :q Query string to filter by
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def find_jobs_graph_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.find_jobs_graph ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.find_jobs_graph"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job/graph'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'depth'] = opts[:'depth'] if !opts[:'depth'].nil?
      query_params[:'approxLimit'] = opts[:'approx_limit'] if !opts[:'approx_limit'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#find_jobs_graph\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular job by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param job_id Job id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Object]
    def get_job(org_id, job_id, opts = {})
      data, _status_code, _headers = get_job_with_http_info(org_id, job_id, opts)
      data
    end

    # Return a particular job by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param job_id Job id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_job_with_http_info(org_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.get_job ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.get_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobApi.get_job"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job/{jobId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#get_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param job_id Job id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to update the job in
    # @option opts [Date] :date Effective date of job update
    # @option opts [Object] :body 
    # @return [nil]
    def update_job(org_id, job_id, opts = {})
      update_job_with_http_info(org_id, job_id, opts)
      nil
    end

    # Update a job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param job_id Job id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to update the job in
    # @option opts [Date] :date Effective date of job update
    # @option opts [Object] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_job_with_http_info(org_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobApi.update_job ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling JobApi.update_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling JobApi.update_job"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/job/{jobId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobApi#update_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
