=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class TodoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete todo
    # 
    # @param org_id Org identifier (either id or slug)
    # @param todo_id Todo id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_todo(org_id, todo_id, opts = {})
      delete_todo_with_http_info(org_id, todo_id, opts)
      nil
    end

    # Delete todo
    # 
    # @param org_id Org identifier (either id or slug)
    # @param todo_id Todo id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_todo_with_http_info(org_id, todo_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TodoApi.delete_todo ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TodoApi.delete_todo"
      end
      # verify the required parameter 'todo_id' is set
      if @api_client.config.client_side_validation && todo_id.nil?
        fail ArgumentError, "Missing the required parameter 'todo_id' when calling TodoApi.delete_todo"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/todo/{todoId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'todoId' + '}', todo_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TodoApi#delete_todo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all existing todos
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Todo User id
    # @option opts [String] :goal_id Goal id
    # @option opts [String] :status Todo.Status. (PENDING/DONE)
    # @option opts [String] :type Todo.Type of todo (form)
    # @option opts [String] :entity_id Entity Id
    # @option opts [String] :target_id Target Id
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsTodo]
    def find_todos(org_id, opts = {})
      data, _status_code, _headers = find_todos_with_http_info(org_id, opts)
      data
    end

    # Return all existing todos
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Todo User id
    # @option opts [String] :goal_id Goal id
    # @option opts [String] :status Todo.Status. (PENDING/DONE)
    # @option opts [String] :type Todo.Type of todo (form)
    # @option opts [String] :entity_id Entity Id
    # @option opts [String] :target_id Target Id
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsTodo, Fixnum, Hash)>] ResultsTodo data, response status code and response headers
    def find_todos_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TodoApi.find_todos ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TodoApi.find_todos"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/todo'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'goalId'] = opts[:'goal_id'] if !opts[:'goal_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'targetId'] = opts[:'target_id'] if !opts[:'target_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsTodo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TodoApi#find_todos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the todos for a given goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def find_todos_summary(org_id, goal_id, opts = {})
      find_todos_summary_with_http_info(org_id, goal_id, opts)
      nil
    end

    # Return the todos for a given goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def find_todos_summary_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TodoApi.find_todos_summary ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TodoApi.find_todos_summary"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling TodoApi.find_todos_summary"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/todo/summary/{goalId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TodoApi#find_todos_summary\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the todos for the current user
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :goal_id Goal id
    # @option opts [String] :status Todo.Status. (PENDING/ACTIVE)
    # @option opts [String] :type Todo.Type of todo (form)
    # @option opts [String] :entity_id Entity Id
    # @option opts [String] :target_id Target Id
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsTodo]
    def get_my_todos(org_id, opts = {})
      data, _status_code, _headers = get_my_todos_with_http_info(org_id, opts)
      data
    end

    # Return the todos for the current user
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :goal_id Goal id
    # @option opts [String] :status Todo.Status. (PENDING/ACTIVE)
    # @option opts [String] :type Todo.Type of todo (form)
    # @option opts [String] :entity_id Entity Id
    # @option opts [String] :target_id Target Id
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsTodo, Fixnum, Hash)>] ResultsTodo data, response status code and response headers
    def get_my_todos_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TodoApi.get_my_todos ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TodoApi.get_my_todos"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/todo/me'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'goalId'] = opts[:'goal_id'] if !opts[:'goal_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'targetId'] = opts[:'target_id'] if !opts[:'target_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsTodo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TodoApi#get_my_todos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query todos for goals in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Todo User id
    # @option opts [String] :goal_id Goal id
    # @option opts [String] :status Todo.Status. (PENDING/DONE)
    # @option opts [String] :type Todo.Type. (FORM_SUBMIT/CHANGE_APPROVE)
    # @option opts [String] :entity_id Entity Id
    # @option opts [String] :target_id Target Id
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @option opts [String] :from Job id to start paginating from
    # @return [ResultsData]
    def query_todos(org_id, opts = {})
      data, _status_code, _headers = query_todos_with_http_info(org_id, opts)
      data
    end

    # Query todos for goals in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user_id Todo User id
    # @option opts [String] :goal_id Goal id
    # @option opts [String] :status Todo.Status. (PENDING/DONE)
    # @option opts [String] :type Todo.Type. (FORM_SUBMIT/CHANGE_APPROVE)
    # @option opts [String] :entity_id Entity Id
    # @option opts [String] :target_id Target Id
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @option opts [String] :from Job id to start paginating from
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def query_todos_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TodoApi.query_todos ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TodoApi.query_todos"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/todo/todo'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'goalId'] = opts[:'goal_id'] if !opts[:'goal_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'targetId'] = opts[:'target_id'] if !opts[:'target_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TodoApi#query_todos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send a reminder notification for a particular todo
    # 
    # @param org_id Org identifier (either id or slug)
    # @param todo_id Todo id
    # @param [Hash] opts the optional parameters
    # @option opts [TodoRemindRequest] :body 
    # @return [nil]
    def remind_todo(org_id, todo_id, opts = {})
      remind_todo_with_http_info(org_id, todo_id, opts)
      nil
    end

    # Send a reminder notification for a particular todo
    # 
    # @param org_id Org identifier (either id or slug)
    # @param todo_id Todo id
    # @param [Hash] opts the optional parameters
    # @option opts [TodoRemindRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remind_todo_with_http_info(org_id, todo_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TodoApi.remind_todo ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TodoApi.remind_todo"
      end
      # verify the required parameter 'todo_id' is set
      if @api_client.config.client_side_validation && todo_id.nil?
        fail ArgumentError, "Missing the required parameter 'todo_id' when calling TodoApi.remind_todo"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/todo/{todoId}/remind'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'todoId' + '}', todo_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TodoApi#remind_todo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete todo
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_form_from_goal(org_id, goal_id, form_id, opts = {})
      remove_form_from_goal_with_http_info(org_id, goal_id, form_id, opts)
      nil
    end

    # Delete todo
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_form_from_goal_with_http_info(org_id, goal_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TodoApi.remove_form_from_goal ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TodoApi.remove_form_from_goal"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling TodoApi.remove_form_from_goal"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling TodoApi.remove_form_from_goal"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/todo/{goalId}/{formId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TodoApi#remove_form_from_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
