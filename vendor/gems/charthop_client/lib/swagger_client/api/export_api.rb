=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ExportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Export a changelog to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_csv_changes(org_id, opts = {})
      data, _status_code, _headers = export_csv_changes_with_http_info(org_id, opts)
      data
    end

    # Export a changelog to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_csv_changes_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_csv_changes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_csv_changes"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/csv/change'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_csv_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export a CSV of custom fields
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [Process]
    def export_csv_fields(org_id, opts = {})
      data, _status_code, _headers = export_csv_fields_with_http_info(org_id, opts)
      data
    end

    # Export a CSV of custom fields
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_csv_fields_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_csv_fields ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_csv_fields"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/csv/fields'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_csv_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export a CSV changelog of a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_csv_scenario(org_id, scenario_id, opts = {})
      data, _status_code, _headers = export_csv_scenario_with_http_info(org_id, scenario_id, opts)
      data
    end

    # Export a CSV changelog of a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_csv_scenario_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_csv_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_csv_scenario"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ExportApi.export_csv_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/csv/scenario/{scenarioId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_csv_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export a snapshot of a current roster to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_csv_snapshot(org_id, opts = {})
      data, _status_code, _headers = export_csv_snapshot_with_http_info(org_id, opts)
      data
    end

    # Export a snapshot of a current roster to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_csv_snapshot_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_csv_snapshot ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_csv_snapshot"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/csv/snapshot'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_csv_snapshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export a zipfile of files downloaded from some field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field Field
    # @option opts [Date] :date Date
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [String] :q Query for jobs or people to match against
    # @option opts [String] :size Size of images to export, if image file (250x250, 50x50, defaults to original)
    # @return [Process]
    def export_files(org_id, opts = {})
      data, _status_code, _headers = export_files_with_http_info(org_id, opts)
      data
    end

    # Export a zipfile of files downloaded from some field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field Field
    # @option opts [Date] :date Date
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [String] :q Query for jobs or people to match against
    # @option opts [String] :size Size of images to export, if image file (250x250, 50x50, defaults to original)
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_files_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_files ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_files"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/zip/file'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'field'] = opts[:'field'] if !opts[:'field'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export users within goal scenarios in CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id goal id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_goal_scenario_users(org_id, goal_id, opts = {})
      data, _status_code, _headers = export_goal_scenario_users_with_http_info(org_id, goal_id, opts)
      data
    end

    # Export users within goal scenarios in CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id goal id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_goal_scenario_users_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_goal_scenario_users ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_goal_scenario_users"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling ExportApi.export_goal_scenario_users"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/csv/goal/{goalId}/scenarios/users'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_goal_scenario_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export org chart to Powerpoint
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date date to export the data from
    # @option opts [Object] :body export options
    # @return [Process]
    def export_org_to_powerpoint(org_id, opts = {})
      data, _status_code, _headers = export_org_to_powerpoint_with_http_info(org_id, opts)
      data
    end

    # Export org chart to Powerpoint
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date date to export the data from
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_org_to_powerpoint_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_org_to_powerpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_org_to_powerpoint"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/powerpoint/org'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_org_to_powerpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export reviews in PDF format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id goal id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_pdf_reviews(org_id, goal_id, opts = {})
      data, _status_code, _headers = export_pdf_reviews_with_http_info(org_id, goal_id, opts)
      data
    end

    # Export reviews in PDF format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id goal id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_pdf_reviews_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_pdf_reviews ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_pdf_reviews"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling ExportApi.export_pdf_reviews"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/pdf/review/{goalId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_pdf_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export report to Powerpoint
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id report id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_report_to_powerpoint(org_id, report_id, opts = {})
      data, _status_code, _headers = export_report_to_powerpoint_with_http_info(org_id, report_id, opts)
      data
    end

    # Export report to Powerpoint
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id report id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_report_to_powerpoint_with_http_info(org_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_report_to_powerpoint ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_report_to_powerpoint"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ExportApi.export_report_to_powerpoint"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/powerpoint/report/{reportId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_report_to_powerpoint\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export todos for a review to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param review_id review id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_to_csv_todos(org_id, review_id, opts = {})
      data, _status_code, _headers = export_to_csv_todos_with_http_info(org_id, review_id, opts)
      data
    end

    # Export todos for a review to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param review_id review id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_to_csv_todos_with_http_info(org_id, review_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_to_csv_todos ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_to_csv_todos"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling ExportApi.export_to_csv_todos"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/csv/todo/{reviewId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reviewId' + '}', review_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_to_csv_todos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export users for a review to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_to_csv_users(org_id, opts = {})
      data, _status_code, _headers = export_to_csv_users_with_http_info(org_id, opts)
      data
    end

    # Export users for a review to CSV format
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_to_csv_users_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExportApi.export_to_csv_users ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ExportApi.export_to_csv_users"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/export/csv/users'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportApi#export_to_csv_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
