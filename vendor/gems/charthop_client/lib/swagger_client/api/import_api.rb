=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ImportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Import data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [String] :scenario_id scenario id to import into
    # @option opts [BOOLEAN] :skip_errors whether to skip erroneous rows, or reject the entire upload if any are invalid (default)
    # @option opts [BOOLEAN] :upsert whether to create persons/jobs that are not matched
    # @option opts [BOOLEAN] :create_groups whether to create groups that are not matched
    # @option opts [BOOLEAN] :disable_sync_hire_date whether to disable adjusting dates of hires in cases where the start dates differ
    # @option opts [String] :update_types types of updates to apply (default all: title,comp,group,relationship,data,other)
    # @option opts [String] :notify_user_ids comma-separated list of user ids who should be notified when the import is complete
    # @option opts [String] :notify_app_name name of the app that should be listed in the notify
    # @option opts [BOOLEAN] :delta_upload run a delta sync?
    # @option opts [BOOLEAN] :validate_delta_upload run a delta sync in validation mode?
    # @option opts [Date] :default_change_date date of the changes - if not presented on the csv file
    # @option opts [BOOLEAN] :disable_overwrite_person disable overwriting changes to persons&#39; data -- only update data if the person field is null
    # @option opts [BOOLEAN] :import_dry_run import dry run
    # @option opts [BOOLEAN] :import_after_dry_run whether to automatically import if dry run succeeds
    # @option opts [String] :parent_process_id process id of parent process
    # @option opts [String] :import_source self identified source caller into this method
    # @return [Process]
    def import_data_csv(org_id, opts = {})
      data, _status_code, _headers = import_data_csv_with_http_info(org_id, opts)
      data
    end

    # Import data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [String] :scenario_id scenario id to import into
    # @option opts [BOOLEAN] :skip_errors whether to skip erroneous rows, or reject the entire upload if any are invalid (default)
    # @option opts [BOOLEAN] :upsert whether to create persons/jobs that are not matched
    # @option opts [BOOLEAN] :create_groups whether to create groups that are not matched
    # @option opts [BOOLEAN] :disable_sync_hire_date whether to disable adjusting dates of hires in cases where the start dates differ
    # @option opts [String] :update_types types of updates to apply (default all: title,comp,group,relationship,data,other)
    # @option opts [String] :notify_user_ids comma-separated list of user ids who should be notified when the import is complete
    # @option opts [String] :notify_app_name name of the app that should be listed in the notify
    # @option opts [BOOLEAN] :delta_upload run a delta sync?
    # @option opts [BOOLEAN] :validate_delta_upload run a delta sync in validation mode?
    # @option opts [Date] :default_change_date date of the changes - if not presented on the csv file
    # @option opts [BOOLEAN] :disable_overwrite_person disable overwriting changes to persons&#39; data -- only update data if the person field is null
    # @option opts [BOOLEAN] :import_dry_run import dry run
    # @option opts [BOOLEAN] :import_after_dry_run whether to automatically import if dry run succeeds
    # @option opts [String] :parent_process_id process id of parent process
    # @option opts [String] :import_source self identified source caller into this method
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def import_data_csv_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.import_data_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ImportApi.import_data_csv"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/import/csv/data'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'skipErrors'] = opts[:'skip_errors'] if !opts[:'skip_errors'].nil?
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?
      query_params[:'createGroups'] = opts[:'create_groups'] if !opts[:'create_groups'].nil?
      query_params[:'disableSyncHireDate'] = opts[:'disable_sync_hire_date'] if !opts[:'disable_sync_hire_date'].nil?
      query_params[:'updateTypes'] = opts[:'update_types'] if !opts[:'update_types'].nil?
      query_params[:'notifyUserIds'] = opts[:'notify_user_ids'] if !opts[:'notify_user_ids'].nil?
      query_params[:'notifyAppName'] = opts[:'notify_app_name'] if !opts[:'notify_app_name'].nil?
      query_params[:'deltaUpload'] = opts[:'delta_upload'] if !opts[:'delta_upload'].nil?
      query_params[:'validateDeltaUpload'] = opts[:'validate_delta_upload'] if !opts[:'validate_delta_upload'].nil?
      query_params[:'defaultChangeDate'] = opts[:'default_change_date'] if !opts[:'default_change_date'].nil?
      query_params[:'disableOverwritePerson'] = opts[:'disable_overwrite_person'] if !opts[:'disable_overwrite_person'].nil?
      query_params[:'importDryRun'] = opts[:'import_dry_run'] if !opts[:'import_dry_run'].nil?
      query_params[:'importAfterDryRun'] = opts[:'import_after_dry_run'] if !opts[:'import_after_dry_run'].nil?
      query_params[:'parentProcessId'] = opts[:'parent_process_id'] if !opts[:'parent_process_id'].nil?
      query_params[:'importSource'] = opts[:'import_source'] if !opts[:'import_source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#import_data_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_path filePath
    # @option opts [String] :scenario_id scenario id to import into
    # @option opts [BOOLEAN] :skip_errors whether to skip erroneous rows, or reject the entire upload if any are invalid (default)
    # @option opts [BOOLEAN] :upsert whether to create persons/jobs that are not matched
    # @option opts [BOOLEAN] :create_groups whether to create groups that are not matched
    # @option opts [BOOLEAN] :disable_sync_hire_date whether to disable adjusting dates of hires in cases where the start dates differ
    # @option opts [String] :update_types types of updates to apply (default all: title,comp,group,relationship,data,other)
    # @option opts [String] :notify_user_ids comma-separated list of user ids who should be notified when the import is complete
    # @option opts [String] :notify_app_name name of the app that should be listed in the notify
    # @option opts [BOOLEAN] :delta_upload run a delta sync?
    # @option opts [BOOLEAN] :validate_delta_upload run a delta sync in validation mode?
    # @option opts [Date] :default_change_date date of the changes - if not presented on the csv file
    # @option opts [BOOLEAN] :disable_overwrite_person disable overwriting changes to persons&#39; data -- only update data if the person field is null
    # @option opts [BOOLEAN] :import_dry_run import dry run
    # @option opts [BOOLEAN] :import_after_dry_run whether to automatically import if dry run succeeds
    # @option opts [String] :parent_process_id process id of parent process
    # @option opts [String] :import_source self identified source caller into this method
    # @return [Process]
    def import_data_csv_with_file_path(org_id, opts = {})
      data, _status_code, _headers = import_data_csv_with_file_path_with_http_info(org_id, opts)
      data
    end

    # Import data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_path filePath
    # @option opts [String] :scenario_id scenario id to import into
    # @option opts [BOOLEAN] :skip_errors whether to skip erroneous rows, or reject the entire upload if any are invalid (default)
    # @option opts [BOOLEAN] :upsert whether to create persons/jobs that are not matched
    # @option opts [BOOLEAN] :create_groups whether to create groups that are not matched
    # @option opts [BOOLEAN] :disable_sync_hire_date whether to disable adjusting dates of hires in cases where the start dates differ
    # @option opts [String] :update_types types of updates to apply (default all: title,comp,group,relationship,data,other)
    # @option opts [String] :notify_user_ids comma-separated list of user ids who should be notified when the import is complete
    # @option opts [String] :notify_app_name name of the app that should be listed in the notify
    # @option opts [BOOLEAN] :delta_upload run a delta sync?
    # @option opts [BOOLEAN] :validate_delta_upload run a delta sync in validation mode?
    # @option opts [Date] :default_change_date date of the changes - if not presented on the csv file
    # @option opts [BOOLEAN] :disable_overwrite_person disable overwriting changes to persons&#39; data -- only update data if the person field is null
    # @option opts [BOOLEAN] :import_dry_run import dry run
    # @option opts [BOOLEAN] :import_after_dry_run whether to automatically import if dry run succeeds
    # @option opts [String] :parent_process_id process id of parent process
    # @option opts [String] :import_source self identified source caller into this method
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def import_data_csv_with_file_path_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.import_data_csv_with_file_path ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ImportApi.import_data_csv_with_file_path"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/import/csv/filepath'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filePath'] = opts[:'file_path'] if !opts[:'file_path'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'skipErrors'] = opts[:'skip_errors'] if !opts[:'skip_errors'].nil?
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?
      query_params[:'createGroups'] = opts[:'create_groups'] if !opts[:'create_groups'].nil?
      query_params[:'disableSyncHireDate'] = opts[:'disable_sync_hire_date'] if !opts[:'disable_sync_hire_date'].nil?
      query_params[:'updateTypes'] = opts[:'update_types'] if !opts[:'update_types'].nil?
      query_params[:'notifyUserIds'] = opts[:'notify_user_ids'] if !opts[:'notify_user_ids'].nil?
      query_params[:'notifyAppName'] = opts[:'notify_app_name'] if !opts[:'notify_app_name'].nil?
      query_params[:'deltaUpload'] = opts[:'delta_upload'] if !opts[:'delta_upload'].nil?
      query_params[:'validateDeltaUpload'] = opts[:'validate_delta_upload'] if !opts[:'validate_delta_upload'].nil?
      query_params[:'defaultChangeDate'] = opts[:'default_change_date'] if !opts[:'default_change_date'].nil?
      query_params[:'disableOverwritePerson'] = opts[:'disable_overwrite_person'] if !opts[:'disable_overwrite_person'].nil?
      query_params[:'importDryRun'] = opts[:'import_dry_run'] if !opts[:'import_dry_run'].nil?
      query_params[:'importAfterDryRun'] = opts[:'import_after_dry_run'] if !opts[:'import_after_dry_run'].nil?
      query_params[:'parentProcessId'] = opts[:'parent_process_id'] if !opts[:'parent_process_id'].nil?
      query_params[:'importSource'] = opts[:'import_source'] if !opts[:'import_source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#import_data_csv_with_file_path\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import history data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [String] :scenario_id scenario id to import into
    # @option opts [BOOLEAN] :skip_errors whether to skip erroneous rows, or reject the entire upload if any are invalid (default)
    # @option opts [BOOLEAN] :create_groups whether to create groups that are not matched
    # @option opts [String] :notify_user_ids comma-separated list of user ids who should be notified when the import is complete
    # @option opts [String] :notify_app_name name of the app that should be listed in the notify
    # @return [Process]
    def import_history_csv(org_id, opts = {})
      data, _status_code, _headers = import_history_csv_with_http_info(org_id, opts)
      data
    end

    # Import history data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [String] :scenario_id scenario id to import into
    # @option opts [BOOLEAN] :skip_errors whether to skip erroneous rows, or reject the entire upload if any are invalid (default)
    # @option opts [BOOLEAN] :create_groups whether to create groups that are not matched
    # @option opts [String] :notify_user_ids comma-separated list of user ids who should be notified when the import is complete
    # @option opts [String] :notify_app_name name of the app that should be listed in the notify
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def import_history_csv_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImportApi.import_history_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ImportApi.import_history_csv"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/import/csv/history'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'skipErrors'] = opts[:'skip_errors'] if !opts[:'skip_errors'].nil?
      query_params[:'createGroups'] = opts[:'create_groups'] if !opts[:'create_groups'].nil?
      query_params[:'notifyUserIds'] = opts[:'notify_user_ids'] if !opts[:'notify_user_ids'].nil?
      query_params[:'notifyAppName'] = opts[:'notify_app_name'] if !opts[:'notify_app_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImportApi#import_history_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
