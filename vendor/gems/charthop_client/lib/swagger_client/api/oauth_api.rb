=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class OauthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the current Oauth2 bearer token (for signout)
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_token(opts = {})
      delete_token_with_http_info(opts)
      nil
    end

    # Delete the current Oauth2 bearer token (for signout)
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.delete_token ...'
      end
      # resource path
      local_var_path = '/oauth/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#delete_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Process an Oauth2 redirect request from an access request for an app installation, storing the accessToken and refreshToken as secrets for the app
    # 
    # @param app_name App name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state State, containing orgId and appUserId
    # @option opts [String] :code Temporary authorization code
    # @return [nil]
    def handle_redirect(app_name, opts = {})
      handle_redirect_with_http_info(app_name, opts)
      nil
    end

    # Process an Oauth2 redirect request from an access request for an app installation, storing the accessToken and refreshToken as secrets for the app
    # 
    # @param app_name App name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state State, containing orgId and appUserId
    # @option opts [String] :code Temporary authorization code
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def handle_redirect_with_http_info(app_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.handle_redirect ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling OauthApi.handle_redirect"
      end
      # resource path
      local_var_path = '/oauth/app/{appName}'.sub('{' + 'appName' + '}', app_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#handle_redirect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return an Oauth2 Authorization bearer token, given a username and password
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type Type of grant; &#39;password&#39;, &#39;refresh_token&#39;, &#39;authorization_code&#39; supported
    # @option opts [String] :username Username to authenticate
    # @option opts [String] :password Password to authenticate
    # @option opts [String] :scope Requested access scope or scopes (space separated)
    # @option opts [String] :code Authorization code
    # @option opts [String] :redirect_uri Redirect URI
    # @option opts [String] :client_id Client id
    # @option opts [String] :refresh_token Refresh token
    # @return [AccessTokenResponse]
    def issue_access_token(opts = {})
      data, _status_code, _headers = issue_access_token_with_http_info(opts)
      data
    end

    # Return an Oauth2 Authorization bearer token, given a username and password
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :grant_type Type of grant; &#39;password&#39;, &#39;refresh_token&#39;, &#39;authorization_code&#39; supported
    # @option opts [String] :username Username to authenticate
    # @option opts [String] :password Password to authenticate
    # @option opts [String] :scope Requested access scope or scopes (space separated)
    # @option opts [String] :code Authorization code
    # @option opts [String] :redirect_uri Redirect URI
    # @option opts [String] :client_id Client id
    # @option opts [String] :refresh_token Refresh token
    # @return [Array<(AccessTokenResponse, Fixnum, Hash)>] AccessTokenResponse data, response status code and response headers
    def issue_access_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.issue_access_token ...'
      end
      # resource path
      local_var_path = '/oauth/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params['grant_type'] = opts[:'grant_type'] if !opts[:'grant_type'].nil?
      form_params['username'] = opts[:'username'] if !opts[:'username'].nil?
      form_params['password'] = opts[:'password'] if !opts[:'password'].nil?
      form_params['scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      form_params['code'] = opts[:'code'] if !opts[:'code'].nil?
      form_params['redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?
      form_params['client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      form_params['refresh_token'] = opts[:'refresh_token'] if !opts[:'refresh_token'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#issue_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return an Oauth2 Authorization bearer token, given a SSO id token
    # 
    # @param type type of SSO request (google or microsoft)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token token that is used as a basis for reset
    # @option opts [BOOLEAN] :create_org automatically create org if possible to do so
    # @option opts [String] :signup_source sign up source (self-serve, connect, or sequoia)
    # @option opts [GoogleIdTokenRequest] :body id token from google login client side
    # @return [AccessTokenResponse]
    def issue_sso_token(type, opts = {})
      data, _status_code, _headers = issue_sso_token_with_http_info(type, opts)
      data
    end

    # Return an Oauth2 Authorization bearer token, given a SSO id token
    # 
    # @param type type of SSO request (google or microsoft)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token token that is used as a basis for reset
    # @option opts [BOOLEAN] :create_org automatically create org if possible to do so
    # @option opts [String] :signup_source sign up source (self-serve, connect, or sequoia)
    # @option opts [GoogleIdTokenRequest] :body id token from google login client side
    # @return [Array<(AccessTokenResponse, Fixnum, Hash)>] AccessTokenResponse data, response status code and response headers
    def issue_sso_token_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.issue_sso_token ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling OauthApi.issue_sso_token"
      end
      if @api_client.config.client_side_validation && opts[:'signup_source'] && !['CONNECT', 'SEQUOIAONE', 'SELFSERVE'].include?(opts[:'signup_source'])
        fail ArgumentError, 'invalid value for "signup_source", must be one of CONNECT, SEQUOIAONE, SELFSERVE'
      end
      # resource path
      local_var_path = '/oauth/token/sso/{type}'.sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'createOrg'] = opts[:'create_org'] if !opts[:'create_org'].nil?
      query_params[:'signupSource'] = opts[:'signup_source'] if !opts[:'signup_source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#issue_sso_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a view-as token
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [ViewAsRequest] :body request on whom to view as
    # @return [AccessTokenResponse]
    def issue_view_token(opts = {})
      data, _status_code, _headers = issue_view_token_with_http_info(opts)
      data
    end

    # Return a view-as token
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [ViewAsRequest] :body request on whom to view as
    # @return [Array<(AccessTokenResponse, Fixnum, Hash)>] AccessTokenResponse data, response status code and response headers
    def issue_view_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.issue_view_token ...'
      end
      # resource path
      local_var_path = '/oauth/token/view'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#issue_view_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
