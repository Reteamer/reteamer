=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ActionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an action
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAction] :body Action data to create
    # @return [Action]
    def create_action(org_id, opts = {})
      data, _status_code, _headers = create_action_with_http_info(org_id, opts)
      data
    end

    # Create an action
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateAction] :body Action data to create
    # @return [Array<(Action, Fixnum, Hash)>] Action data, response status code and response headers
    def create_action_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionApi.create_action ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ActionApi.create_action"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/action'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Action')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionApi#create_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an action
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_action(org_id, action_id, opts = {})
      delete_action_with_http_info(org_id, action_id, opts)
      nil
    end

    # Delete an action
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_action_with_http_info(org_id, action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionApi.delete_action ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ActionApi.delete_action"
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling ActionApi.delete_action"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/action/{actionId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'actionId' + '}', action_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionApi#delete_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all actions in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Action id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsAction]
    def find_actions(org_id, opts = {})
      data, _status_code, _headers = find_actions_with_http_info(org_id, opts)
      data
    end

    # Return all actions in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Action id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsAction, Fixnum, Hash)>] ResultsAction data, response status code and response headers
    def find_actions_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionApi.find_actions ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ActionApi.find_actions"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/action'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsAction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionApi#find_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular action by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @return [Action]
    def get_action(org_id, action_id, opts = {})
      data, _status_code, _headers = get_action_with_http_info(org_id, action_id, opts)
      data
    end

    # Return a particular action by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Action, Fixnum, Hash)>] Action data, response status code and response headers
    def get_action_with_http_info(org_id, action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionApi.get_action ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ActionApi.get_action"
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling ActionApi.get_action"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/action/{actionId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'actionId' + '}', action_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Action')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionApi#get_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run an action - for testing
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @option opts [ActionRunRequest] :body 
    # @return [nil]
    def run_action(org_id, action_id, opts = {})
      run_action_with_http_info(org_id, action_id, opts)
      nil
    end

    # Run an action - for testing
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @option opts [ActionRunRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_action_with_http_info(org_id, action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionApi.run_action ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ActionApi.run_action"
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling ActionApi.run_action"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/action/{actionId}/run'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'actionId' + '}', action_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionApi#run_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing action
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAction] :body Action data to update
    # @return [nil]
    def update_action(org_id, action_id, opts = {})
      update_action_with_http_info(org_id, action_id, opts)
      nil
    end

    # Update an existing action
    # 
    # @param org_id Org identifier (either id or slug)
    # @param action_id Action id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAction] :body Action data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_action_with_http_info(org_id, action_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ActionApi.update_action ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ActionApi.update_action"
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling ActionApi.update_action"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/action/{actionId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'actionId' + '}', action_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ActionApi#update_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
