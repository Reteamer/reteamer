=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ChangeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Approve or reject a change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @option opts [ApproveChange] :body Change approval details
    # @return [nil]
    def approve_change(org_id, change_id, opts = {})
      approve_change_with_http_info(org_id, change_id, opts)
      nil
    end

    # Approve or reject a change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @option opts [ApproveChange] :body Change approval details
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def approve_change_with_http_info(org_id, change_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.approve_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.approve_change"
      end
      # verify the required parameter 'change_id' is set
      if @api_client.config.client_side_validation && change_id.nil?
        fail ArgumentError, "Missing the required parameter 'change_id' when calling ChangeApi.approve_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/{changeId}/approve'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'changeId' + '}', change_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#approve_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform a series of changes at once
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkChangeRequest] :body Bulk change data
    # @return [Process]
    def bulk_change(org_id, opts = {})
      data, _status_code, _headers = bulk_change_with_http_info(org_id, opts)
      data
    end

    # Perform a series of changes at once
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkChangeRequest] :body Bulk change data
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def bulk_change_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.bulk_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.bulk_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/bulkchange'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#bulk_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform a bulk update on a number of jobs
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkUpdateRequest] :body Bulk update data
    # @return [Process]
    def bulk_update(org_id, opts = {})
      data, _status_code, _headers = bulk_update_with_http_info(org_id, opts)
      data
    end

    # Perform a bulk update on a number of jobs
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkUpdateRequest] :body Bulk update data
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def bulk_update_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.bulk_update ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.bulk_update"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/bulkupdate'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#bulk_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Given a of change id, see if the person can approve/reject
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change Id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to check the approval on
    # @return [BOOLEAN]
    def change_approver(org_id, change_id, opts = {})
      data, _status_code, _headers = change_approver_with_http_info(org_id, change_id, opts)
      data
    end

    # Given a of change id, see if the person can approve/reject
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change Id
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to check the approval on
    # @return [Array<(BOOLEAN, Fixnum, Hash)>] BOOLEAN data, response status code and response headers
    def change_approver_with_http_info(org_id, change_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.change_approver ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.change_approver"
      end
      # verify the required parameter 'change_id' is set
      if @api_client.config.client_side_validation && change_id.nil?
        fail ArgumentError, "Missing the required parameter 'change_id' when calling ChangeApi.change_approver"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/{changeId}/approver'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'changeId' + '}', change_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BOOLEAN')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#change_approver\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param type Change type
    # @param [Hash] opts the optional parameters
    # @option opts [CreateChange] :body Change data
    # @return [Change]
    def create_change(org_id, type, opts = {})
      data, _status_code, _headers = create_change_with_http_info(org_id, type, opts)
      data
    end

    # Create a new change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param type Change type
    # @param [Hash] opts the optional parameters
    # @option opts [CreateChange] :body Change data
    # @return [Array<(Change, Fixnum, Hash)>] Change data, response status code and response headers
    def create_change_with_http_info(org_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.create_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.create_change"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ChangeApi.create_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/{type}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Change')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#create_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a previous change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_change(org_id, change_id, opts = {})
      delete_change_with_http_info(org_id, change_id, opts)
      nil
    end

    # Delete a previous change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_change_with_http_info(org_id, change_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.delete_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.delete_change"
      end
      # verify the required parameter 'change_id' is set
      if @api_client.config.client_side_validation && change_id.nil?
        fail ArgumentError, "Missing the required parameter 'change_id' when calling ChangeApi.delete_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/{changeId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'changeId' + '}', change_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#delete_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a depart-rehire pair of changes, for filling in historical data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Rehire start date
    # @option opts [CreateChange] :body Depart data
    # @return [Change]
    def depart_rehire(org_id, opts = {})
      data, _status_code, _headers = depart_rehire_with_http_info(org_id, opts)
      data
    end

    # Create a depart-rehire pair of changes, for filling in historical data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Rehire start date
    # @option opts [CreateChange] :body Depart data
    # @return [Array<(Change, Fixnum, Hash)>] Change data, response status code and response headers
    def depart_rehire_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.depart_rehire ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.depart_rehire"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/depart-rehire'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Change')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#depart_rehire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return recent changes across an org, or for a particular person or job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id
    # @option opts [Date] :date Date to start from
    # @option opts [String] :type Types of change to filter by
    # @option opts [String] :fields Return changes that modify these fields
    # @option opts [String] :person_id Person id to filter by
    # @option opts [String] :job_id Job id to filter by
    # @option opts [String] :refs References to filter by
    # @option opts [String] :q Query to filter against
    # @option opts [Integer] :from Paginate from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :open Whether the role is open or not
    # @option opts [BOOLEAN] :desc Descending (default false)
    # @option opts [BOOLEAN] :scenario_only Scenario only (exclude primary changes)
    # @option opts [BOOLEAN] :parent_only Parent changes only (exclude child changes)
    # @option opts [BOOLEAN] :include_grant_schedule Whether to include full grant schedule when returning equity updates
    # @option opts [BOOLEAN] :include_struck Deprecated parameter for backwards-compatibility (use statuses) - whether to include STRUCK and PROPOSED changes, or just ACTIVE changes
    # @option opts [String] :status Statuses to filter by
    # @option opts [BOOLEAN] :strip_updates Whether to strip returned update changes of update types that were not explicitly requested
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [ResultsChange]
    def find_changes(org_id, opts = {})
      data, _status_code, _headers = find_changes_with_http_info(org_id, opts)
      data
    end

    # Return recent changes across an org, or for a particular person or job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id
    # @option opts [Date] :date Date to start from
    # @option opts [String] :type Types of change to filter by
    # @option opts [String] :fields Return changes that modify these fields
    # @option opts [String] :person_id Person id to filter by
    # @option opts [String] :job_id Job id to filter by
    # @option opts [String] :refs References to filter by
    # @option opts [String] :q Query to filter against
    # @option opts [Integer] :from Paginate from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :open Whether the role is open or not
    # @option opts [BOOLEAN] :desc Descending (default false)
    # @option opts [BOOLEAN] :scenario_only Scenario only (exclude primary changes)
    # @option opts [BOOLEAN] :parent_only Parent changes only (exclude child changes)
    # @option opts [BOOLEAN] :include_grant_schedule Whether to include full grant schedule when returning equity updates
    # @option opts [BOOLEAN] :include_struck Deprecated parameter for backwards-compatibility (use statuses) - whether to include STRUCK and PROPOSED changes, or just ACTIVE changes
    # @option opts [String] :status Statuses to filter by
    # @option opts [BOOLEAN] :strip_updates Whether to strip returned update changes of update types that were not explicitly requested
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Array<(ResultsChange, Fixnum, Hash)>] ResultsChange data, response status code and response headers
    def find_changes_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.find_changes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.find_changes"
      end
      if @api_client.config.client_side_validation && opts[:'open'] && !['FILLED', 'OPEN'].include?(opts[:'open'])
        fail ArgumentError, 'invalid value for "open", must be one of FILLED, OPEN'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'personId'] = opts[:'person_id'] if !opts[:'person_id'].nil?
      query_params[:'jobId'] = opts[:'job_id'] if !opts[:'job_id'].nil?
      query_params[:'refs'] = opts[:'refs'] if !opts[:'refs'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'open'] = opts[:'open'] if !opts[:'open'].nil?
      query_params[:'desc'] = opts[:'desc'] if !opts[:'desc'].nil?
      query_params[:'scenarioOnly'] = opts[:'scenario_only'] if !opts[:'scenario_only'].nil?
      query_params[:'parentOnly'] = opts[:'parent_only'] if !opts[:'parent_only'].nil?
      query_params[:'includeGrantSchedule'] = opts[:'include_grant_schedule'] if !opts[:'include_grant_schedule'].nil?
      query_params[:'includeStruck'] = opts[:'include_struck'] if !opts[:'include_struck'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'stripUpdates'] = opts[:'strip_updates'] if !opts[:'strip_updates'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsChange')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#find_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all changes for a particular scenario, with before job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields to retrieve
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @option opts [String] :q Search query
    # @return [ScenarioChangesWithBudgetRollup]
    def find_scenario_changes(org_id, scenario_id, opts = {})
      data, _status_code, _headers = find_scenario_changes_with_http_info(org_id, scenario_id, opts)
      data
    end

    # Return all changes for a particular scenario, with before job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields to retrieve
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @option opts [String] :q Search query
    # @return [Array<(ScenarioChangesWithBudgetRollup, Fixnum, Hash)>] ScenarioChangesWithBudgetRollup data, response status code and response headers
    def find_scenario_changes_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.find_scenario_changes ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.find_scenario_changes"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ChangeApi.find_scenario_changes"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/scenario/{scenarioId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScenarioChangesWithBudgetRollup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#find_scenario_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular change by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Change]
    def get_change(org_id, change_id, opts = {})
      data, _status_code, _headers = get_change_with_http_info(org_id, change_id, opts)
      data
    end

    # Return a particular change by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Array<(Change, Fixnum, Hash)>] Change data, response status code and response headers
    def get_change_with_http_info(org_id, change_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.get_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.get_change"
      end
      # verify the required parameter 'change_id' is set
      if @api_client.config.client_side_validation && change_id.nil?
        fail ArgumentError, "Missing the required parameter 'change_id' when calling ChangeApi.get_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/{changeId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'changeId' + '}', change_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Change')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#get_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sync a change (create the change only if it does not already exist)
    # 
    # @param org_id Org identifier (either id or slug)
    # @param type Change type
    # @param [Hash] opts the optional parameters
    # @option opts [CreateChange] :body Change data
    # @return [Change]
    def sync_change(org_id, type, opts = {})
      data, _status_code, _headers = sync_change_with_http_info(org_id, type, opts)
      data
    end

    # Sync a change (create the change only if it does not already exist)
    # 
    # @param org_id Org identifier (either id or slug)
    # @param type Change type
    # @param [Hash] opts the optional parameters
    # @option opts [CreateChange] :body Change data
    # @return [Array<(Change, Fixnum, Hash)>] Change data, response status code and response headers
    def sync_change_with_http_info(org_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.sync_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.sync_change"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ChangeApi.sync_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/sync/{type}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Change')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#sync_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Make a change to a change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateChange] :body Change data
    # @return [nil]
    def update_change(org_id, change_id, opts = {})
      update_change_with_http_info(org_id, change_id, opts)
      nil
    end

    # Make a change to a change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param change_id Change id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateChange] :body Change data
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_change_with_http_info(org_id, change_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.update_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.update_change"
      end
      # verify the required parameter 'change_id' is set
      if @api_client.config.client_side_validation && change_id.nil?
        fail ArgumentError, "Missing the required parameter 'change_id' when calling ChangeApi.update_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/{changeId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'changeId' + '}', change_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#update_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate a change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param type Change type
    # @param [Hash] opts the optional parameters
    # @option opts [CreateChange] :body Change data
    # @return [Change]
    def validate_change(org_id, type, opts = {})
      data, _status_code, _headers = validate_change_with_http_info(org_id, type, opts)
      data
    end

    # Validate a change
    # 
    # @param org_id Org identifier (either id or slug)
    # @param type Change type
    # @param [Hash] opts the optional parameters
    # @option opts [CreateChange] :body Change data
    # @return [Array<(Change, Fixnum, Hash)>] Change data, response status code and response headers
    def validate_change_with_http_info(org_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChangeApi.validate_change ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ChangeApi.validate_change"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ChangeApi.validate_change"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change/{type}/validate'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Change')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChangeApi#validate_change\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
