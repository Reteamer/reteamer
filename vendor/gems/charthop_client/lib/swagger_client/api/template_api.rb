=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class TemplateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a template
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTemplate] :body Template data to create
    # @return [Template]
    def create_template(org_id, opts = {})
      data, _status_code, _headers = create_template_with_http_info(org_id, opts)
      data
    end

    # Create a template
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTemplate] :body Template data to create
    # @return [Array<(Template, Fixnum, Hash)>] Template data, response status code and response headers
    def create_template_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.create_template ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.create_template"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Template')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#create_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a template
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_template(org_id, template_id, opts = {})
      delete_template_with_http_info(org_id, template_id, opts)
      nil
    end

    # Delete a template
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_template_with_http_info(org_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.delete_template ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.delete_template"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplateApi.delete_template"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template/{templateId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#delete_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all templates in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of template to filter by
    # @option opts [String] :from Template id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsTemplate]
    def find_templates(org_id, opts = {})
      data, _status_code, _headers = find_templates_with_http_info(org_id, opts)
      data
    end

    # Return all templates in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of template to filter by
    # @option opts [String] :from Template id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsTemplate, Fixnum, Hash)>] ResultsTemplate data, response status code and response headers
    def find_templates_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.find_templates ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.find_templates"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['DOCUMENT'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of DOCUMENT'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsTemplate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#find_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Automatically generate PDFs of the templates, and distribute emails to managers and people to download
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [GenerateTemplateRequest] :body 
    # @return [Process]
    def generate_templates(org_id, template_id, opts = {})
      data, _status_code, _headers = generate_templates_with_http_info(org_id, template_id, opts)
      data
    end

    # Automatically generate PDFs of the templates, and distribute emails to managers and people to download
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [GenerateTemplateRequest] :body 
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def generate_templates_with_http_info(org_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.generate_templates ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.generate_templates"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplateApi.generate_templates"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template/{templateId}/generate'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#generate_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular template by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def get_template(org_id, template_id, opts = {})
      data, _status_code, _headers = get_template_with_http_info(org_id, template_id, opts)
      data
    end

    # Return a particular template by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Fixnum, Hash)>] Template data, response status code and response headers
    def get_template_with_http_info(org_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.get_template ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.get_template"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplateApi.get_template"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template/{templateId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Template')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#get_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Preview template content without saving it
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id Job id
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :format Format (default to TEXT)
    # @option opts [TemplatePreviewRequest] :body 
    # @return [TemplateRenderResponse]
    def preview_template(org_id, opts = {})
      data, _status_code, _headers = preview_template_with_http_info(org_id, opts)
      data
    end

    # Preview template content without saving it
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id Job id
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :format Format
    # @option opts [TemplatePreviewRequest] :body 
    # @return [Array<(TemplateRenderResponse, Fixnum, Hash)>] TemplateRenderResponse data, response status code and response headers
    def preview_template_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.preview_template ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.preview_template"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['TEXT', 'PDF'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of TEXT, PDF'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template/{templateId}/preview'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'jobId'] = opts[:'job_id'] if !opts[:'job_id'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateRenderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#preview_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Render a template by evaluating it against an existing job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id Job id
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :format Format (default to TEXT)
    # @return [TemplateRenderResponse]
    def render_template(org_id, template_id, opts = {})
      data, _status_code, _headers = render_template_with_http_info(org_id, template_id, opts)
      data
    end

    # Render a template by evaluating it against an existing job
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id Job id
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :format Format
    # @return [Array<(TemplateRenderResponse, Fixnum, Hash)>] TemplateRenderResponse data, response status code and response headers
    def render_template_with_http_info(org_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.render_template ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.render_template"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplateApi.render_template"
      end
      if @api_client.config.client_side_validation && opts[:'format'] && !['TEXT', 'PDF'].include?(opts[:'format'])
        fail ArgumentError, 'invalid value for "format", must be one of TEXT, PDF'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template/{templateId}/render'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'jobId'] = opts[:'job_id'] if !opts[:'job_id'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateRenderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#render_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing template
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTemplate] :body Template data to update
    # @return [nil]
    def update_template(org_id, template_id, opts = {})
      update_template_with_http_info(org_id, template_id, opts)
      nil
    end

    # Update an existing template
    # 
    # @param org_id Org identifier (either id or slug)
    # @param template_id Template id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTemplate] :body Template data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_template_with_http_info(org_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplateApi.update_template ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TemplateApi.update_template"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplateApi.update_template"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/template/{templateId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplateApi#update_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
