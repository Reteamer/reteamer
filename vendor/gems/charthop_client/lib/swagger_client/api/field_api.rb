=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class FieldApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateField] :body Field data to create
    # @return [Field]
    def create_field(org_id, opts = {})
      data, _status_code, _headers = create_field_with_http_info(org_id, opts)
      data
    end

    # Create a field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateField] :body Field data to create
    # @return [Array<(Field, Fixnum, Hash)>] Field data, response status code and response headers
    def create_field_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.create_field ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.create_field"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Field')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#create_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_field(org_id, field_id, opts = {})
      delete_field_with_http_info(org_id, field_id, opts)
      nil
    end

    # Delete a field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_field_with_http_info(org_id, field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.delete_field ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.delete_field"
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling FieldApi.delete_field"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field/{fieldId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'fieldId' + '}', field_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#delete_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete fields
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body Field ids
    # @return [nil]
    def delete_fields(org_id, opts = {})
      delete_fields_with_http_info(org_id, opts)
      nil
    end

    # Delete fields
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body Field ids
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_fields_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.delete_fields ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.delete_fields"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field/delete'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#delete_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all fields in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Field id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsField]
    def find_fields(org_id, opts = {})
      data, _status_code, _headers = find_fields_with_http_info(org_id, opts)
      data
    end

    # Return all fields in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Field id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsField, Fixnum, Hash)>] ResultsField data, response status code and response headers
    def find_fields_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.find_fields ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.find_fields"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsField')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#find_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular field by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @return [Field]
    def get_field(org_id, field_id, opts = {})
      data, _status_code, _headers = get_field_with_http_info(org_id, field_id, opts)
      data
    end

    # Return a particular field by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Field, Fixnum, Hash)>] Field data, response status code and response headers
    def get_field_with_http_info(org_id, field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.get_field ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.get_field"
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling FieldApi.get_field"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field/{fieldId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'fieldId' + '}', field_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Field')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#get_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove field from all associated categories
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [FieldRemoveCategoryRequest] :body Fields to set as uncategorized
    # @return [nil]
    def remove_field_category(org_id, opts = {})
      remove_field_category_with_http_info(org_id, opts)
      nil
    end

    # Remove field from all associated categories
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [FieldRemoveCategoryRequest] :body Fields to set as uncategorized
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_field_category_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.remove_field_category ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.remove_field_category"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field/remove-category'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#remove_field_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateField] :body Field data to update
    # @return [nil]
    def update_field(org_id, field_id, opts = {})
      update_field_with_http_info(org_id, field_id, opts)
      nil
    end

    # Update an existing field
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateField] :body Field data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_field_with_http_info(org_id, field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.update_field ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.update_field"
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling FieldApi.update_field"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field/{fieldId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'fieldId' + '}', field_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#update_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Perform a dry-run of an update to an existing field that will require migrations
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateField] :body Field data to update
    # @return [nil]
    def update_field_dry_run(org_id, field_id, opts = {})
      update_field_dry_run_with_http_info(org_id, field_id, opts)
      nil
    end

    # Perform a dry-run of an update to an existing field that will require migrations
    # 
    # @param org_id Org identifier (either id or slug)
    # @param field_id Field id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateField] :body Field data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_field_dry_run_with_http_info(org_id, field_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.update_field_dry_run ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.update_field_dry_run"
      end
      # verify the required parameter 'field_id' is set
      if @api_client.config.client_side_validation && field_id.nil?
        fail ArgumentError, "Missing the required parameter 'field_id' when calling FieldApi.update_field_dry_run"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field/{fieldId}/dryrun'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'fieldId' + '}', field_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#update_field_dry_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update status for existing fields
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [FieldStatusUpdateRequest] :body Field data to update
    # @return [nil]
    def update_field_status(org_id, opts = {})
      update_field_status_with_http_info(org_id, opts)
      nil
    end

    # Update status for existing fields
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [FieldStatusUpdateRequest] :body Field data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_field_status_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FieldApi.update_field_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FieldApi.update_field_status"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/field/status'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FieldApi#update_field_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
