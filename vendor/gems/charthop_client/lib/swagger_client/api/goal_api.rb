=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class GoalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Complete a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [Goal]
    def complete_goal(org_id, goal_id, opts = {})
      data, _status_code, _headers = complete_goal_with_http_info(org_id, goal_id, opts)
      data
    end

    # Complete a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Goal, Fixnum, Hash)>] Goal data, response status code and response headers
    def complete_goal_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.complete_goal ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GoalApi.complete_goal"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.complete_goal"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/goal/{goalId}/complete'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Goal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#complete_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [CreateGoal] :body Goal data to create
    # @return [Goal]
    def create_goal(org_id, opts = {})
      data, _status_code, _headers = create_goal_with_http_info(org_id, opts)
      data
    end

    # Create a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [CreateGoal] :body Goal data to create
    # @return [Array<(Goal, Fixnum, Hash)>] Goal data, response status code and response headers
    def create_goal_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.create_goal ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GoalApi.create_goal"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/goal'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'silent'] = opts[:'silent'] if !opts[:'silent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Goal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#create_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_goal(org_id, goal_id, opts = {})
      delete_goal_with_http_info(org_id, goal_id, opts)
      nil
    end

    # Delete a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_goal_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.delete_goal ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GoalApi.delete_goal"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.delete_goal"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/goal/{goalId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#delete_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all goals in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of goal to filter by
    # @option opts [String] :from Goal id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :ids List of ids to filter by
    # @return [ResultsGoal]
    def find_goals(org_id, opts = {})
      data, _status_code, _headers = find_goals_with_http_info(org_id, opts)
      data
    end

    # Return all goals in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of goal to filter by
    # @option opts [String] :from Goal id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :ids List of ids to filter by
    # @return [Array<(ResultsGoal, Fixnum, Hash)>] ResultsGoal data, response status code and response headers
    def find_goals_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.find_goals ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GoalApi.find_goals"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['BUDGET', 'REVIEW', 'COMP_REVIEW'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of BUDGET, REVIEW, COMP_REVIEW'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/goal'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsGoal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#find_goals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular goal by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @return [Goal]
    def get_goal(org_id, goal_id, opts = {})
      data, _status_code, _headers = get_goal_with_http_info(org_id, goal_id, opts)
      data
    end

    # Return a particular goal by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @return [Array<(Goal, Fixnum, Hash)>] Goal data, response status code and response headers
    def get_goal_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GoalApi.get_goal"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.get_goal"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/goal/{goalId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Goal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reactivate a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [Goal]
    def reactivate_goal(org_id, goal_id, opts = {})
      data, _status_code, _headers = reactivate_goal_with_http_info(org_id, goal_id, opts)
      data
    end

    # Reactivate a goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Goal, Fixnum, Hash)>] Goal data, response status code and response headers
    def reactivate_goal_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.reactivate_goal ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GoalApi.reactivate_goal"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.reactivate_goal"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/goal/{goalId}/reactivate'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Goal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#reactivate_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [UpdateGoal] :body Goal data to update
    # @return [nil]
    def update_goal(org_id, goal_id, opts = {})
      update_goal_with_http_info(org_id, goal_id, opts)
      nil
    end

    # Update an existing goal
    # 
    # @param org_id Org identifier (either id or slug)
    # @param goal_id Goal id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [UpdateGoal] :body Goal data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_goal_with_http_info(org_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.update_goal ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling GoalApi.update_goal"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.update_goal"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/goal/{goalId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'goalId' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'silent'] = opts[:'silent'] if !opts[:'silent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#update_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
