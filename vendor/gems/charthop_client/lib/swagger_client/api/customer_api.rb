=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new customer
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomer] :body Customer data to create
    # @return [Customer]
    def create_customer(opts = {})
      data, _status_code, _headers = create_customer_with_http_info(opts)
      data
    end

    # Create a new customer
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomer] :body Customer data to create
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def create_customer_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.create_customer ...'
      end
      # resource path
      local_var_path = '/v1/customer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#create_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all visible customers, paginated by name
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Customer id to start from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :status Customer.Status. (ACTIVE/INACTIVE/TRAIL)
    # @return [ResultsCustomer]
    def find_customers(opts = {})
      data, _status_code, _headers = find_customers_with_http_info(opts)
      data
    end

    # Return all visible customers, paginated by name
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Customer id to start from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :status Customer.Status. (ACTIVE/INACTIVE/TRAIL)
    # @return [Array<(ResultsCustomer, Fixnum, Hash)>] ResultsCustomer data, response status code and response headers
    def find_customers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.find_customers ...'
      end
      # resource path
      local_var_path = '/v1/customer'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsCustomer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#find_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns information about the Charthop subscription for the given customer
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @return [Subscription]
    def get_charthop_subscription(customer_id, opts = {})
      data, _status_code, _headers = get_charthop_subscription_with_http_info(customer_id, opts)
      data
    end

    # Returns information about the Charthop subscription for the given customer
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Subscription, Fixnum, Hash)>] Subscription data, response status code and response headers
    def get_charthop_subscription_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get_charthop_subscription ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.get_charthop_subscription"
      end
      # resource path
      local_var_path = '/v1/customer/{customerId}/subscription'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Subscription')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_charthop_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular customer by id
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @return [Customer]
    def get_customer(customer_id, opts = {})
      data, _status_code, _headers = get_customer_with_http_info(customer_id, opts)
      data
    end

    # Return a particular customer by id
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Customer, Fixnum, Hash)>] Customer data, response status code and response headers
    def get_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.get_customer"
      end
      # resource path
      local_var_path = '/v1/customer/{customerId}'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Customer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of all the invoices for the given customer
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @return [InvoiceResponse]
    def get_customer_invoices(customer_id, opts = {})
      data, _status_code, _headers = get_customer_invoices_with_http_info(customer_id, opts)
      data
    end

    # Returns a list of all the invoices for the given customer
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoiceResponse, Fixnum, Hash)>] InvoiceResponse data, response status code and response headers
    def get_customer_invoices_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.get_customer_invoices ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.get_customer_invoices"
      end
      # resource path
      local_var_path = '/v1/customer/{customerId}/invoices'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#get_customer_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing customer
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomer] :body Customer data to update
    # @return [nil]
    def update_customer(customer_id, opts = {})
      update_customer_with_http_info(customer_id, opts)
      nil
    end

    # Update an existing customer
    # 
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomer] :body Customer data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_customer_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.update_customer ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.update_customer"
      end
      # resource path
      local_var_path = '/v1/customer/{customerId}'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#update_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSubscription] :body Subscription data to update
    # @return [nil]
    def update_subscription(customer_id, opts = {})
      update_subscription_with_http_info(customer_id, opts)
      nil
    end

    # @param customer_id Customer id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateSubscription] :body Subscription data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_subscription_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.update_subscription ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.update_subscription"
      end
      # resource path
      local_var_path = '/v1/customer/{customerId}/subscription'.sub('{' + 'customerId' + '}', customer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#update_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
