=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class QueryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a live query token
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateQueryToken] :body 
    # @return [QueryToken]
    def create_query(org_id, opts = {})
      data, _status_code, _headers = create_query_with_http_info(org_id, opts)
      data
    end

    # Create a live query token
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateQueryToken] :body 
    # @return [Array<(QueryToken, Fixnum, Hash)>] QueryToken data, response status code and response headers
    def create_query_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueryApi.create_query ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling QueryApi.create_query"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/query'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueryToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueryApi#create_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the results of a previously created live query
    # 
    # @param org_id Org identifier (either id or slug)
    # @param query_token Query token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @option opts [String] :mapper Deprecated parameter for backwards-compatibility
    # @return [nil]
    def query(org_id, query_token, opts = {})
      query_with_http_info(org_id, query_token, opts)
      nil
    end

    # Return the results of a previously created live query
    # 
    # @param org_id Org identifier (either id or slug)
    # @param query_token Query token
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @option opts [String] :mapper Deprecated parameter for backwards-compatibility
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def query_with_http_info(org_id, query_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueryApi.query ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling QueryApi.query"
      end
      # verify the required parameter 'query_token' is set
      if @api_client.config.client_side_validation && query_token.nil?
        fail ArgumentError, "Missing the required parameter 'query_token' when calling QueryApi.query"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/query/{queryToken}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'queryToken' + '}', query_token.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'mapper'] = opts[:'mapper'] if !opts[:'mapper'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueryApi#query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
