=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ReportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReport] :body Report data to create
    # @return [Report]
    def create_report(org_id, opts = {})
      data, _status_code, _headers = create_report_with_http_info(org_id, opts)
      data
    end

    # Create a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReport] :body Report data to create
    # @return [Array<(Report, Fixnum, Hash)>] Report data, response status code and response headers
    def create_report_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.create_report ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.create_report"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Report')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#create_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_report(org_id, report_id, opts = {})
      delete_report_with_http_info(org_id, report_id, opts)
      nil
    end

    # Delete a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_report_with_http_info(org_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.delete_report ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.delete_report"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportApi.delete_report"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#delete_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export a particular chart in a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date, inclusive
    # @option opts [String] :end_date End date, exclusive
    # @option opts [String] :interval Interval
    # @option opts [String] :scenario_id Scenario id
    # @option opts [BOOLEAN] :project_hires Project future hires
    # @return [Process]
    def export_chart_csv(org_id, report_id, chart_id, opts = {})
      data, _status_code, _headers = export_chart_csv_with_http_info(org_id, report_id, chart_id, opts)
      data
    end

    # Export a particular chart in a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date, inclusive
    # @option opts [String] :end_date End date, exclusive
    # @option opts [String] :interval Interval
    # @option opts [String] :scenario_id Scenario id
    # @option opts [BOOLEAN] :project_hires Project future hires
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_chart_csv_with_http_info(org_id, report_id, chart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.export_chart_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.export_chart_csv"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportApi.export_chart_csv"
      end
      # verify the required parameter 'chart_id' is set
      if @api_client.config.client_side_validation && chart_id.nil?
        fail ArgumentError, "Missing the required parameter 'chart_id' when calling ReportApi.export_chart_csv"
      end
      if @api_client.config.client_side_validation && opts[:'interval'] && !['DAY', 'WEEK', 'MONTH', 'QUARTER', 'FISCAL_QUARTER', 'YEAR', 'FISCAL_YEAR'].include?(opts[:'interval'])
        fail ArgumentError, 'invalid value for "interval", must be one of DAY, WEEK, MONTH, QUARTER, FISCAL_QUARTER, YEAR, FISCAL_YEAR'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}/chart/{chartId}/export/csv'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s).sub('{' + 'chartId' + '}', chart_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'projectHires'] = opts[:'project_hires'] if !opts[:'project_hires'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#export_chart_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all reports in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Report id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsReport]
    def find_reports(org_id, opts = {})
      data, _status_code, _headers = find_reports_with_http_info(org_id, opts)
      data
    end

    # Return all reports in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Report id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsReport, Fixnum, Hash)>] ResultsReport data, response status code and response headers
    def find_reports_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.find_reports ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.find_reports"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsReport')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#find_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Query all the charts in a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date, inclusive
    # @option opts [String] :end_date End date, exclusive
    # @option opts [String] :interval Interval
    # @option opts [String] :scenario_id Scenario id
    # @option opts [BOOLEAN] :project_hires Project future hires
    # @option opts [String] :filter Filter to apply to all results
    # @return [ReportResult]
    def get_all_report_results(org_id, report_id, opts = {})
      data, _status_code, _headers = get_all_report_results_with_http_info(org_id, report_id, opts)
      data
    end

    # Query all the charts in a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date, inclusive
    # @option opts [String] :end_date End date, exclusive
    # @option opts [String] :interval Interval
    # @option opts [String] :scenario_id Scenario id
    # @option opts [BOOLEAN] :project_hires Project future hires
    # @option opts [String] :filter Filter to apply to all results
    # @return [Array<(ReportResult, Fixnum, Hash)>] ReportResult data, response status code and response headers
    def get_all_report_results_with_http_info(org_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_all_report_results ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.get_all_report_results"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportApi.get_all_report_results"
      end
      if @api_client.config.client_side_validation && opts[:'interval'] && !['DAY', 'WEEK', 'MONTH', 'QUARTER', 'FISCAL_QUARTER', 'YEAR', 'FISCAL_YEAR'].include?(opts[:'interval'])
        fail ArgumentError, 'invalid value for "interval", must be one of DAY, WEEK, MONTH, QUARTER, FISCAL_QUARTER, YEAR, FISCAL_YEAR'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}/query'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'projectHires'] = opts[:'project_hires'] if !opts[:'project_hires'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_all_report_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular report by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @return [Report]
    def get_report(org_id, report_id, opts = {})
      data, _status_code, _headers = get_report_with_http_info(org_id, report_id, opts)
      data
    end

    # Return a particular report by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Report, Fixnum, Hash)>] Report data, response status code and response headers
    def get_report_with_http_info(org_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.get_report"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportApi.get_report"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Report')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return timeseries data from arbitrary queries
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [ReportQuery] :body 
    # @return [ReportResult]
    def get_report_from_query(org_id, opts = {})
      data, _status_code, _headers = get_report_from_query_with_http_info(org_id, opts)
      data
    end

    # Return timeseries data from arbitrary queries
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [ReportQuery] :body 
    # @return [Array<(ReportResult, Fixnum, Hash)>] ReportResult data, response status code and response headers
    def get_report_from_query_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.get_report_from_query ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.get_report_from_query"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/query'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#get_report_from_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateReport] :body Report data to update
    # @return [nil]
    def update_report(org_id, report_id, opts = {})
      update_report_with_http_info(org_id, report_id, opts)
      nil
    end

    # Update an existing report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateReport] :body Report data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_report_with_http_info(org_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportApi.update_report ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportApi.update_report"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportApi.update_report"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportApi#update_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
