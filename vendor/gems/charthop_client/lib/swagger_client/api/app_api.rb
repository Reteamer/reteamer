=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class AppApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new app
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApp] :body App data to create
    # @return [App]
    def create_app(opts = {})
      data, _status_code, _headers = create_app_with_http_info(opts)
      data
    end

    # Create a new app
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApp] :body App data to create
    # @return [Array<(App, Fixnum, Hash)>] App data, response status code and response headers
    def create_app_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.create_app ...'
      end
      # resource path
      local_var_path = '/v1/app'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'App')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#create_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an app
    # 
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_app(app_id, opts = {})
      delete_app_with_http_info(app_id, opts)
      nil
    end

    # Delete an app
    # 
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_app_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.delete_app ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling AppApi.delete_app"
      end
      # resource path
      local_var_path = '/v1/app/{appId}'.sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#delete_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all active apps available for a particular org
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search query
    # @option opts [String] :type Filter by type (app, bundle)
    # @option opts [String] :from App id to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsApp]
    def find_apps(org_id, opts = {})
      data, _status_code, _headers = find_apps_with_http_info(org_id, opts)
      data
    end

    # Return all active apps available for a particular org
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :q Search query
    # @option opts [String] :type Filter by type (app, bundle)
    # @option opts [String] :from App id to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsApp, Fixnum, Hash)>] ResultsApp data, response status code and response headers
    def find_apps_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.find_apps ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.find_apps"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsApp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#find_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all publicly visible global apps
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag Tag to filter by
    # @option opts [String] :from App id to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsApp]
    def find_global_apps(opts = {})
      data, _status_code, _headers = find_global_apps_with_http_info(opts)
      data
    end

    # Return all publicly visible global apps
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag Tag to filter by
    # @option opts [String] :from App id to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsApp, Fixnum, Hash)>] ResultsApp data, response status code and response headers
    def find_global_apps_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.find_global_apps ...'
      end
      # resource path
      local_var_path = '/v1/app'

      # query parameters
      query_params = {}
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsApp')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#find_global_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find installed app users
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type (app, bundle)
    # @option opts [String] :from App id to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsUser]
    def find_installed_apps(org_id, opts = {})
      data, _status_code, _headers = find_installed_apps_with_http_info(org_id, opts)
      data
    end

    # Find installed app users
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type (app, bundle)
    # @option opts [String] :from App id to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsUser, Fixnum, Hash)>] ResultsUser data, response status code and response headers
    def find_installed_apps_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.find_installed_apps ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.find_installed_apps"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsUser')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#find_installed_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate or regenerate a long-lived access token for the app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [ScopeRequest] :body 
    # @return [AccessTokenResponse]
    def generate_access_token(org_id, app_user_id, opts = {})
      data, _status_code, _headers = generate_access_token_with_http_info(org_id, app_user_id, opts)
      data
    end

    # Generate or regenerate a long-lived access token for the app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [ScopeRequest] :body 
    # @return [Array<(AccessTokenResponse, Fixnum, Hash)>] AccessTokenResponse data, response status code and response headers
    def generate_access_token_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.generate_access_token ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.generate_access_token"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling AppApi.generate_access_token"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/{appUserId}/token'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#generate_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve the current token for this app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @return [AccessTokenResponse]
    def get_access_token(org_id, app_user_id, opts = {})
      data, _status_code, _headers = get_access_token_with_http_info(org_id, app_user_id, opts)
      data
    end

    # Retrieve the current token for this app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccessTokenResponse, Fixnum, Hash)>] AccessTokenResponse data, response status code and response headers
    def get_access_token_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.get_access_token ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.get_access_token"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling AppApi.get_access_token"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/{appUserId}/token'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#get_access_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular app by id
    # 
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @return [App]
    def get_app(app_id, opts = {})
      data, _status_code, _headers = get_app_with_http_info(app_id, opts)
      data
    end

    # Return a particular app by id
    # 
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @return [Array<(App, Fixnum, Hash)>] App data, response status code and response headers
    def get_app_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.get_app ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling AppApi.get_app"
      end
      # resource path
      local_var_path = '/v1/app/{appId}'.sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'App')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#get_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular app by name
    # 
    # @param app_name App name
    # @param [Hash] opts the optional parameters
    # @return [App]
    def get_app_by_name(app_name, opts = {})
      data, _status_code, _headers = get_app_by_name_with_http_info(app_name, opts)
      data
    end

    # Return a particular app by name
    # 
    # @param app_name App name
    # @param [Hash] opts the optional parameters
    # @return [Array<(App, Fixnum, Hash)>] App data, response status code and response headers
    def get_app_by_name_with_http_info(app_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.get_app_by_name ...'
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling AppApi.get_app_by_name"
      end
      # resource path
      local_var_path = '/v1/app/name/{appName}'.sub('{' + 'appName' + '}', app_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'App')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#get_app_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an Oauth2 authorization code for this app, which can be exchanged for an access token
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scopes
    # @return [AccessTokenResponse]
    def get_authorization_code(org_id, app_user_id, opts = {})
      data, _status_code, _headers = get_authorization_code_with_http_info(org_id, app_user_id, opts)
      data
    end

    # Retrieve an Oauth2 authorization code for this app, which can be exchanged for an access token
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scope Scopes
    # @return [Array<(AccessTokenResponse, Fixnum, Hash)>] AccessTokenResponse data, response status code and response headers
    def get_authorization_code_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.get_authorization_code ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.get_authorization_code"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling AppApi.get_authorization_code"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/{appUserId}/code'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#get_authorization_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an installed app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_installed_app(org_id, app_user_id, opts = {})
      data, _status_code, _headers = get_installed_app_with_http_info(org_id, app_user_id, opts)
      data
    end

    # Get an installed app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_installed_app_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.get_installed_app ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.get_installed_app"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling AppApi.get_installed_app"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/{appUserId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#get_installed_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an installed app by name
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_name App name
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_installed_app_by_name(org_id, app_name, opts = {})
      data, _status_code, _headers = get_installed_app_by_name_with_http_info(org_id, app_name, opts)
      data
    end

    # Get an installed app by name
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_name App name
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Fixnum, Hash)>] User data, response status code and response headers
    def get_installed_app_by_name_with_http_info(org_id, app_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.get_installed_app_by_name ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.get_installed_app_by_name"
      end
      # verify the required parameter 'app_name' is set
      if @api_client.config.client_side_validation && app_name.nil?
        fail ArgumentError, "Missing the required parameter 'app_name' when calling AppApi.get_installed_app_by_name"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/name/{appName}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appName' + '}', app_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'User')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#get_installed_app_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Install an app for a particular org
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUser] :body App user data to create
    # @return [nil]
    def install_app(org_id, opts = {})
      install_app_with_http_info(org_id, opts)
      nil
    end

    # Install an app for a particular org
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUser] :body App user data to create
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def install_app_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.install_app ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.install_app"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#install_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Run an installed app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Process]
    def run_installed_app(org_id, app_user_id, opts = {})
      data, _status_code, _headers = run_installed_app_with_http_info(org_id, app_user_id, opts)
      data
    end

    # Run an installed app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def run_installed_app_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.run_installed_app ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.run_installed_app"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling AppApi.run_installed_app"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/{appUserId}/run'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#run_installed_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send an email notification to the configured notify users, on behalf of an app
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [NotifyRequest] :body 
    # @return [nil]
    def send_notification(opts = {})
      send_notification_with_http_info(opts)
      nil
    end

    # Send an email notification to the configured notify users, on behalf of an app
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [NotifyRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def send_notification_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.send_notification ...'
      end
      # resource path
      local_var_path = '/v1/app/notify'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#send_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Uninstall an app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def uninstall_app(org_id, app_user_id, opts = {})
      uninstall_app_with_http_info(org_id, app_user_id, opts)
      nil
    end

    # Uninstall an app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def uninstall_app_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.uninstall_app ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.uninstall_app"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling AppApi.uninstall_app"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/{appUserId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#uninstall_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing app
    # 
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateApp] :body App data to update
    # @return [nil]
    def update_app(app_id, opts = {})
      update_app_with_http_info(app_id, opts)
      nil
    end

    # Update an existing app
    # 
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateApp] :body App data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_app_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.update_app ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling AppApi.update_app"
      end
      # resource path
      local_var_path = '/v1/app/{appId}'.sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#update_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the settings of an installed app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUser] :body App user data to update
    # @return [nil]
    def update_installed_app(org_id, app_user_id, opts = {})
      update_installed_app_with_http_info(org_id, app_user_id, opts)
      nil
    end

    # Update the settings of an installed app
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id App user id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUser] :body App user data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_installed_app_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.update_installed_app ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.update_installed_app"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling AppApi.update_installed_app"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/install/{appUserId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#update_installed_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check if a bundle can be installed for an org.
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @return [Bundle]
    def validate_bundle(org_id, app_id, opts = {})
      data, _status_code, _headers = validate_bundle_with_http_info(org_id, app_id, opts)
      data
    end

    # Check if a bundle can be installed for an org.
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_id App id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Bundle, Fixnum, Hash)>] Bundle data, response status code and response headers
    def validate_bundle_with_http_info(org_id, app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppApi.validate_bundle ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling AppApi.validate_bundle"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling AppApi.validate_bundle"
      end
      # resource path
      local_var_path = '/v1/app/org/{orgId}/validate/{appId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appId' + '}', app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Bundle')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppApi#validate_bundle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
