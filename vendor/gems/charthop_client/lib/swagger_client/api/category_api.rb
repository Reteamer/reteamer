=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class CategoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a category
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCategory] :body Category data to create
    # @return [Category]
    def create_category(org_id, opts = {})
      data, _status_code, _headers = create_category_with_http_info(org_id, opts)
      data
    end

    # Create a category
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCategory] :body Category data to create
    # @return [Array<(Category, Fixnum, Hash)>] Category data, response status code and response headers
    def create_category_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.create_category ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CategoryApi.create_category"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/category'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Category')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#create_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a category
    # 
    # @param org_id Org identifier (either id or slug)
    # @param category_id Category id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_category(org_id, category_id, opts = {})
      delete_category_with_http_info(org_id, category_id, opts)
      nil
    end

    # Delete a category
    # 
    # @param org_id Org identifier (either id or slug)
    # @param category_id Category id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_category_with_http_info(org_id, category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.delete_category ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CategoryApi.delete_category"
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.delete_category"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/category/{categoryId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'categoryId' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#delete_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return categories that are available to the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type (Optional) Return only built-in or custom categories
    # @option opts [BOOLEAN] :unsorted (Optional) Return categories array unsorted
    # @return [ResultsCategory]
    def get_categories(org_id, opts = {})
      data, _status_code, _headers = get_categories_with_http_info(org_id, opts)
      data
    end

    # Return categories that are available to the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type (Optional) Return only built-in or custom categories
    # @option opts [BOOLEAN] :unsorted (Optional) Return categories array unsorted
    # @return [Array<(ResultsCategory, Fixnum, Hash)>] ResultsCategory data, response status code and response headers
    def get_categories_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.get_categories ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CategoryApi.get_categories"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/category'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'unsorted'] = opts[:'unsorted'] if !opts[:'unsorted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsCategory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular category by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param category_id Category id
    # @param [Hash] opts the optional parameters
    # @return [Category]
    def get_category(org_id, category_id, opts = {})
      data, _status_code, _headers = get_category_with_http_info(org_id, category_id, opts)
      data
    end

    # Return a particular category by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param category_id Category id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Category, Fixnum, Hash)>] Category data, response status code and response headers
    def get_category_with_http_info(org_id, category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.get_category ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CategoryApi.get_category"
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.get_category"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/category/{categoryId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'categoryId' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Category')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#get_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing category
    # 
    # @param org_id Org identifier (either id or slug)
    # @param category_id Category id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCategory] :body Category data to update
    # @return [nil]
    def update_category(org_id, category_id, opts = {})
      update_category_with_http_info(org_id, category_id, opts)
      nil
    end

    # Update an existing category
    # 
    # @param org_id Org identifier (either id or slug)
    # @param category_id Category id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCategory] :body Category data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_category_with_http_info(org_id, category_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.update_category ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CategoryApi.update_category"
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.update_category"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/category/{categoryId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'categoryId' + '}', category_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#update_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
