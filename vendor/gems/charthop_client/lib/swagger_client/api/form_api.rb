=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class FormApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Collect data for an existing form, sending emails and chat notifications to people being requested
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [FormCollectRequest] :body Details on the data collection
    # @return [Form]
    def collect_form_data(org_id, form_id, opts = {})
      data, _status_code, _headers = collect_form_data_with_http_info(org_id, form_id, opts)
      data
    end

    # Collect data for an existing form, sending emails and chat notifications to people being requested
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [FormCollectRequest] :body Details on the data collection
    # @return [Array<(Form, Fixnum, Hash)>] Form data, response status code and response headers
    def collect_form_data_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.collect_form_data ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.collect_form_data"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.collect_form_data"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}/collect'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Form')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#collect_form_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateForm] :body Form data to create
    # @return [Form]
    def create_form(org_id, opts = {})
      data, _status_code, _headers = create_form_with_http_info(org_id, opts)
      data
    end

    # Create a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateForm] :body Form data to create
    # @return [Array<(Form, Fixnum, Hash)>] Form data, response status code and response headers
    def create_form_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.create_form ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.create_form"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Form')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#create_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_form(org_id, form_id, opts = {})
      delete_form_with_http_info(org_id, form_id, opts)
      nil
    end

    # Delete a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_form_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.delete_form ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.delete_form"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.delete_form"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#delete_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete forms
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body Form ids
    # @return [nil]
    def delete_forms(org_id, opts = {})
      delete_forms_with_http_info(org_id, opts)
      nil
    end

    # Delete forms
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body Form ids
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_forms_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.delete_forms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.delete_forms"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/delete'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#delete_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all forms in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Status to filter by
    # @option opts [String] :from Form id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsForm]
    def find_forms(org_id, opts = {})
      data, _status_code, _headers = find_forms_with_http_info(org_id, opts)
      data
    end

    # Return all forms in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Status to filter by
    # @option opts [String] :from Form id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsForm, Fixnum, Hash)>] ResultsForm data, response status code and response headers
    def find_forms_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.find_forms ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.find_forms"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['ACTIVE', 'INACTIVE', 'TODO', 'ARCHIVED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of ACTIVE, INACTIVE, TODO, ARCHIVED'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#find_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all active forms applicable to a particular person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @return [ResultsForm]
    def find_forms_for_person(org_id, person_id, opts = {})
      data, _status_code, _headers = find_forms_for_person_with_http_info(org_id, person_id, opts)
      data
    end

    # Return all active forms applicable to a particular person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResultsForm, Fixnum, Hash)>] ResultsForm data, response status code and response headers
    def find_forms_for_person_with_http_info(org_id, person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.find_forms_for_person ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.find_forms_for_person"
      end
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        fail ArgumentError, "Missing the required parameter 'person_id' when calling FormApi.find_forms_for_person"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/person/{personId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'personId' + '}', person_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#find_forms_for_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular form by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @return [Form]
    def get_form(org_id, form_id, opts = {})
      data, _status_code, _headers = get_form_with_http_info(org_id, form_id, opts)
      data
    end

    # Return a particular form by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Form, Fixnum, Hash)>] Form data, response status code and response headers
    def get_form_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.get_form ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.get_form"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.get_form"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Form')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#get_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the current state of form draft data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :person_id Person id
    # @return [FormDraft]
    def get_form_draft(org_id, form_id, opts = {})
      data, _status_code, _headers = get_form_draft_with_http_info(org_id, form_id, opts)
      data
    end

    # Get the current state of form draft data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :person_id Person id
    # @return [Array<(FormDraft, Fixnum, Hash)>] FormDraft data, response status code and response headers
    def get_form_draft_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.get_form_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.get_form_draft"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.get_form_draft"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}/draft'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'personId'] = opts[:'person_id'] if !opts[:'person_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FormDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#get_form_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sends reminder for a form with existing todos, sending emails and chat notifications to people being requested
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [FormCollectRequest] :body Details on the data collection
    # @return [Form]
    def remind_form_data(org_id, form_id, opts = {})
      data, _status_code, _headers = remind_form_data_with_http_info(org_id, form_id, opts)
      data
    end

    # Sends reminder for a form with existing todos, sending emails and chat notifications to people being requested
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [FormCollectRequest] :body Details on the data collection
    # @return [Array<(Form, Fixnum, Hash)>] Form data, response status code and response headers
    def remind_form_data_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.remind_form_data ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.remind_form_data"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.remind_form_data"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}/remind'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Form')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#remind_form_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit data from a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Org id
    # @param [Hash] opts the optional parameters
    # @option opts [FormSubmitRequest] :body Form data to submit
    # @return [Form]
    def submit_form(org_id, form_id, opts = {})
      data, _status_code, _headers = submit_form_with_http_info(org_id, form_id, opts)
      data
    end

    # Submit data from a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Org id
    # @param [Hash] opts the optional parameters
    # @option opts [FormSubmitRequest] :body Form data to submit
    # @return [Array<(Form, Fixnum, Hash)>] Form data, response status code and response headers
    def submit_form_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.submit_form ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.submit_form"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.submit_form"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Form')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#submit_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit draft data from a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Org id
    # @param [Hash] opts the optional parameters
    # @option opts [FormSubmitRequest] :body Form data to submit
    # @return [FormDraft]
    def submit_form_draft(org_id, form_id, opts = {})
      data, _status_code, _headers = submit_form_draft_with_http_info(org_id, form_id, opts)
      data
    end

    # Submit draft data from a form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Org id
    # @param [Hash] opts the optional parameters
    # @option opts [FormSubmitRequest] :body Form data to submit
    # @return [Array<(FormDraft, Fixnum, Hash)>] FormDraft data, response status code and response headers
    def submit_form_draft_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.submit_form_draft ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.submit_form_draft"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.submit_form_draft"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}/draft'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FormDraft')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#submit_form_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateForm] :body Form data to update
    # @return [nil]
    def update_form(org_id, form_id, opts = {})
      update_form_with_http_info(org_id, form_id, opts)
      nil
    end

    # Update an existing form
    # 
    # @param org_id Org identifier (either id or slug)
    # @param form_id Form id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateForm] :body Form data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_form_with_http_info(org_id, form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.update_form ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.update_form"
      end
      # verify the required parameter 'form_id' is set
      if @api_client.config.client_side_validation && form_id.nil?
        fail ArgumentError, "Missing the required parameter 'form_id' when calling FormApi.update_form"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/{formId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#update_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update status for existing forms
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [FormStatusUpdateRequest] :body Form data to update
    # @return [nil]
    def update_form_status(org_id, opts = {})
      update_form_status_with_http_info(org_id, opts)
      nil
    end

    # Update status for existing forms
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [FormStatusUpdateRequest] :body Form data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_form_status_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FormApi.update_form_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FormApi.update_form_status"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/form/status'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FormApi#update_form_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
