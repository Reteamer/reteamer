=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ProcessApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Upload a file to be attached to a process, and mark the process as complete
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @return [nil]
    def complete_with_file_export(process_id, opts = {})
      complete_with_file_export_with_http_info(process_id, opts)
      nil
    end

    # Upload a file to be attached to a process, and mark the process as complete
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def complete_with_file_export_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.complete_with_file_export ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling ProcessApi.complete_with_file_export"
      end
      # resource path
      local_var_path = '/v1/process/{processId}/file'.sub('{' + 'processId' + '}', process_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#complete_with_file_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new process in the pending state
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [String] :org_id Org identifier (either id or slug)
    # @option opts [String] :type Process type
    # @option opts [Integer] :max_rows Max rows allowed in an imported spreadsheet file
    # @option opts [Integer] :min_columns Min columns required in an imported spreadsheet file
    # @option opts [String] :source Import source (e.g. SELF_SERVE)
    # @return [nil]
    def create(opts = {})
      create_with_http_info(opts)
      nil
    end

    # Creates a new process in the pending state
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [String] :org_id Org identifier (either id or slug)
    # @option opts [String] :type Process type
    # @option opts [Integer] :max_rows Max rows allowed in an imported spreadsheet file
    # @option opts [Integer] :min_columns Min columns required in an imported spreadsheet file
    # @option opts [String] :source Import source (e.g. SELF_SERVE)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.create ...'
      end
      # resource path
      local_var_path = '/v1/process/self-serve'

      # query parameters
      query_params = {}
      query_params[:'orgId'] = opts[:'org_id'] if !opts[:'org_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'maxRows'] = opts[:'max_rows'] if !opts[:'max_rows'].nil?
      query_params[:'minColumns'] = opts[:'min_columns'] if !opts[:'min_columns'].nil?
      query_params[:'source'] = opts[:'source'] if !opts[:'source'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new process in the pending state
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProcess] :body Process data to create
    # @return [Process]
    def create_process(opts = {})
      data, _status_code, _headers = create_process_with_http_info(opts)
      data
    end

    # Creates a new process in the pending state
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateProcess] :body Process data to create
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def create_process_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.create_process ...'
      end
      # resource path
      local_var_path = '/v1/process'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#create_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a number of previously run processes
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :org_id Org identifier (either id or slug)
    # @option opts [BOOLEAN] :is_app_process Boolean if an app process
    # @option opts [String] :from from id
    # @option opts [Integer] :limit limit
    # @option opts [String] :parent_process_id Parent process ID to search for children
    # @option opts [String] :type Type to filter by. Accepted values: [&#39;auto&#39;, &#39;manual&#39;]
    # @option opts [Integer] :completed_at_start completed at start
    # @option opts [Integer] :completed_at_end completed at end
    # @option opts [String] :statuses Statuses to filter by, comma-separated. Accepted values: [&#39;DONE&#39;, &#39;ERROR&#39;, &#39;PENDING&#39;, &#39;RUNNING&#39;, &#39;DONE_WITH_ERRORS&#39;]
    # @option opts [BOOLEAN] :is_parent_process Boolean if a parent process
    # @option opts [BOOLEAN] :is_payroll_app_process Boolean if a payroll app process
    # @return [ResultsProcess]
    def find_processes(opts = {})
      data, _status_code, _headers = find_processes_with_http_info(opts)
      data
    end

    # Retrieve a number of previously run processes
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :org_id Org identifier (either id or slug)
    # @option opts [BOOLEAN] :is_app_process Boolean if an app process
    # @option opts [String] :from from id
    # @option opts [Integer] :limit limit
    # @option opts [String] :parent_process_id Parent process ID to search for children
    # @option opts [String] :type Type to filter by. Accepted values: [&#39;auto&#39;, &#39;manual&#39;]
    # @option opts [Integer] :completed_at_start completed at start
    # @option opts [Integer] :completed_at_end completed at end
    # @option opts [String] :statuses Statuses to filter by, comma-separated. Accepted values: [&#39;DONE&#39;, &#39;ERROR&#39;, &#39;PENDING&#39;, &#39;RUNNING&#39;, &#39;DONE_WITH_ERRORS&#39;]
    # @option opts [BOOLEAN] :is_parent_process Boolean if a parent process
    # @option opts [BOOLEAN] :is_payroll_app_process Boolean if a payroll app process
    # @return [Array<(ResultsProcess, Fixnum, Hash)>] ResultsProcess data, response status code and response headers
    def find_processes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.find_processes ...'
      end
      # resource path
      local_var_path = '/v1/process'

      # query parameters
      query_params = {}
      query_params[:'orgId'] = opts[:'org_id'] if !opts[:'org_id'].nil?
      query_params[:'isAppProcess'] = opts[:'is_app_process'] if !opts[:'is_app_process'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'parentProcessId'] = opts[:'parent_process_id'] if !opts[:'parent_process_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'completedAtStart'] = opts[:'completed_at_start'] if !opts[:'completed_at_start'].nil?
      query_params[:'completedAtEnd'] = opts[:'completed_at_end'] if !opts[:'completed_at_end'].nil?
      query_params[:'statuses'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'isParentProcess'] = opts[:'is_parent_process'] if !opts[:'is_parent_process'].nil?
      query_params[:'isPayrollAppProcess'] = opts[:'is_payroll_app_process'] if !opts[:'is_payroll_app_process'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsProcess')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#find_processes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get last success sync and last sync for given appUserId
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id app user id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_app_process_status(org_id, app_user_id, opts = {})
      get_app_process_status_with_http_info(org_id, app_user_id, opts)
      nil
    end

    # Get last success sync and last sync for given appUserId
    # 
    # @param org_id Org identifier (either id or slug)
    # @param app_user_id app user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_app_process_status_with_http_info(org_id, app_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.get_app_process_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ProcessApi.get_app_process_status"
      end
      # verify the required parameter 'app_user_id' is set
      if @api_client.config.client_side_validation && app_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_user_id' when calling ProcessApi.get_app_process_status"
      end
      # resource path
      local_var_path = '/v1/process/{orgId}/{appUserId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'appUserId' + '}', app_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#get_app_process_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Check the status of a particular process
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :show_state showState
    # @return [Process]
    def get_process(process_id, opts = {})
      data, _status_code, _headers = get_process_with_http_info(process_id, opts)
      data
    end

    # Check the status of a particular process
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :show_state showState
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def get_process_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.get_process ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling ProcessApi.get_process"
      end
      # resource path
      local_var_path = '/v1/process/{processId}'.sub('{' + 'processId' + '}', process_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'showState'] = opts[:'show_state'] if !opts[:'show_state'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#get_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the file associated with a particular process
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_process_file(process_id, opts = {})
      get_process_file_with_http_info(process_id, opts)
      nil
    end

    # Download the file associated with a particular process
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_process_file_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.get_process_file ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling ProcessApi.get_process_file"
      end
      # resource path
      local_var_path = '/v1/process/{processId}/file'.sub('{' + 'processId' + '}', process_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#get_process_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download the newline-delimited JSON log associated with a particular process
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_process_log_file(process_id, opts = {})
      get_process_log_file_with_http_info(process_id, opts)
      nil
    end

    # Download the newline-delimited JSON log associated with a particular process
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_process_log_file_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.get_process_log_file ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling ProcessApi.get_process_log_file"
      end
      # resource path
      local_var_path = '/v1/process/{processId}/log'.sub('{' + 'processId' + '}', process_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#get_process_log_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update the status of a process, marking its progress or setting status to DONE or ERROR
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProcess] :body 
    # @return [nil]
    def update_process(process_id, opts = {})
      update_process_with_http_info(process_id, opts)
      nil
    end

    # Update the status of a process, marking its progress or setting status to DONE or ERROR
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProcess] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_process_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.update_process ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling ProcessApi.update_process"
      end
      # resource path
      local_var_path = '/v1/process/{processId}'.sub('{' + 'processId' + '}', process_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#update_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update process state
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body state
    # @return [nil]
    def update_stateful_process(process_id, opts = {})
      update_stateful_process_with_http_info(process_id, opts)
      nil
    end

    # Update process state
    # 
    # @param process_id process id
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body state
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_stateful_process_with_http_info(process_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProcessApi.update_stateful_process ...'
      end
      # verify the required parameter 'process_id' is set
      if @api_client.config.client_side_validation && process_id.nil?
        fail ArgumentError, "Missing the required parameter 'process_id' when calling ProcessApi.update_stateful_process"
      end
      # resource path
      local_var_path = '/v1/process/{processId}/state'.sub('{' + 'processId' + '}', process_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProcessApi#update_stateful_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
