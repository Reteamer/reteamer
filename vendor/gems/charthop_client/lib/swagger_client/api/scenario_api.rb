=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ScenarioApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adjust the dates of the changes in a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [AdjustScenarioDateRequest] :body 
    # @return [Process]
    def adjust_dates_scenario(org_id, scenario_id, opts = {})
      data, _status_code, _headers = adjust_dates_scenario_with_http_info(org_id, scenario_id, opts)
      data
    end

    # Adjust the dates of the changes in a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [AdjustScenarioDateRequest] :body 
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def adjust_dates_scenario_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.adjust_dates_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.adjust_dates_scenario"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.adjust_dates_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}/dates'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#adjust_dates_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk update scenario related changes
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ApproveChange>] :body List of change approvals to update
    # @return [nil]
    def bulk_change_approval(org_id, scenario_id, opts = {})
      bulk_change_approval_with_http_info(org_id, scenario_id, opts)
      nil
    end

    # Bulk update scenario related changes
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ApproveChange>] :body List of change approvals to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def bulk_change_approval_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.bulk_change_approval ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.bulk_change_approval"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.bulk_change_approval"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}/changes/bulkapproval'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#bulk_change_approval\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkCreateScenarioRequest] :body 
    # @return [Process]
    def bulk_create_scenario(org_id, opts = {})
      data, _status_code, _headers = bulk_create_scenario_with_http_info(org_id, opts)
      data
    end

    # Create a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BulkCreateScenarioRequest] :body 
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def bulk_create_scenario_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.bulk_create_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.bulk_create_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/bulk/goal/{goalId}'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#bulk_create_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PartialScenario>] :body List of change approvals to update
    # @return [nil]
    def bulk_update_status(org_id, opts = {})
      bulk_update_status_with_http_info(org_id, opts)
      nil
    end

    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PartialScenario>] :body List of change approvals to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def bulk_update_status_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.bulk_update_status ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.bulk_update_status"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/bulk/status'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#bulk_update_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Combine multiple scenarios into another scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id to combine the other scenarios into
    # @param [Hash] opts the optional parameters
    # @option opts [CombineScenarioRequest] :body 
    # @return [Process]
    def combine_scenarios(org_id, scenario_id, opts = {})
      data, _status_code, _headers = combine_scenarios_with_http_info(org_id, scenario_id, opts)
      data
    end

    # Combine multiple scenarios into another scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id to combine the other scenarios into
    # @param [Hash] opts the optional parameters
    # @option opts [CombineScenarioRequest] :body 
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def combine_scenarios_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.combine_scenarios ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.combine_scenarios"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.combine_scenarios"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}/combine'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#combine_scenarios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [CreateScenario] :body Scenario data to create
    # @option opts [BOOLEAN] :skip_change_creation Skip over change creation for COMP/PROMOTION scenarios
    # @return [Scenario]
    def create_scenario(org_id, opts = {})
      data, _status_code, _headers = create_scenario_with_http_info(org_id, opts)
      data
    end

    # Create a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [CreateScenario] :body Scenario data to create
    # @option opts [BOOLEAN] :skip_change_creation Skip over change creation for COMP/PROMOTION scenarios
    # @return [Array<(Scenario, Fixnum, Hash)>] Scenario data, response status code and response headers
    def create_scenario_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.create_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.create_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'silent'] = opts[:'silent'] if !opts[:'silent'].nil?
      query_params[:'skipChangeCreation'] = opts[:'skip_change_creation'] if !opts[:'skip_change_creation'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Scenario')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#create_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request an approval on limited edit scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_role Scenario Role
    # @return [nil]
    def create_todos(org_id, scenario_id, opts = {})
      create_todos_with_http_info(org_id, scenario_id, opts)
      nil
    end

    # Request an approval on limited edit scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_role Scenario Role
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_todos_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.create_todos ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.create_todos"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.create_todos"
      end
      if @api_client.config.client_side_validation && opts[:'scenario_role'] && !['APPROVER', 'REVIEWER', 'REVIEWEE'].include?(opts[:'scenario_role'])
        fail ArgumentError, 'invalid value for "scenario_role", must be one of APPROVER, REVIEWER, REVIEWEE'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}/todos'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioRole'] = opts[:'scenario_role'] if !opts[:'scenario_role'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#create_todos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_scenario(org_id, scenario_id, opts = {})
      delete_scenario_with_http_info(org_id, scenario_id, opts)
      nil
    end

    # Delete a scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_scenario_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.delete_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.delete_scenario"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.delete_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#delete_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all scenarios in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Scenario id to start paginating from
    # @option opts [String] :goal_id Goal Id to filter by
    # @option opts [String] :status Scenario status to filter by
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsScenario]
    def find_scenarios(org_id, opts = {})
      data, _status_code, _headers = find_scenarios_with_http_info(org_id, opts)
      data
    end

    # Return all scenarios in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Scenario id to start paginating from
    # @option opts [String] :goal_id Goal Id to filter by
    # @option opts [String] :status Scenario status to filter by
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsScenario, Fixnum, Hash)>] ResultsScenario data, response status code and response headers
    def find_scenarios_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.find_scenarios ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.find_scenarios"
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['ACTIVE', 'INACTIVE', 'MERGED', 'DRAFT', 'ARCHIVED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of ACTIVE, INACTIVE, MERGED, DRAFT, ARCHIVED'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'goalId'] = opts[:'goal_id'] if !opts[:'goal_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsScenario')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#find_scenarios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular scenario by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @return [Scenario]
    def get_scenario(org_id, scenario_id, opts = {})
      data, _status_code, _headers = get_scenario_with_http_info(org_id, scenario_id, opts)
      data
    end

    # Return a particular scenario by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Scenario, Fixnum, Hash)>] Scenario data, response status code and response headers
    def get_scenario_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.get_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.get_scenario"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.get_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Scenario')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#get_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a scenario's goals, including progress against goals
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @return [ResultsGoal]
    def get_scenario_goals(org_id, scenario_id, opts = {})
      data, _status_code, _headers = get_scenario_goals_with_http_info(org_id, scenario_id, opts)
      data
    end

    # Return a scenario&#39;s goals, including progress against goals
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResultsGoal, Fixnum, Hash)>] ResultsGoal data, response status code and response headers
    def get_scenario_goals_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.get_scenario_goals ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.get_scenario_goals"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.get_scenario_goals"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}/goal'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsGoal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#get_scenario_goals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Merge a scenario into the primary timeline
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id to merge
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_errors If passed, will skip any changes that fail validation
    # @return [Process]
    def merge_scenario(org_id, scenario_id, opts = {})
      data, _status_code, _headers = merge_scenario_with_http_info(org_id, scenario_id, opts)
      data
    end

    # Merge a scenario into the primary timeline
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id to merge
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_errors If passed, will skip any changes that fail validation
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def merge_scenario_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.merge_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.merge_scenario"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.merge_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}/merge'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'skipErrors'] = opts[:'skip_errors'] if !opts[:'skip_errors'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#merge_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Build scenarios by target job ids
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BuildScenariosByJobIdsRequest] :body 
    # @return [Array<CreateScenarioPreview>]
    def preview(org_id, opts = {})
      data, _status_code, _headers = preview_with_http_info(org_id, opts)
      data
    end

    # Build scenarios by target job ids
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [BuildScenariosByJobIdsRequest] :body 
    # @return [Array<(Array<CreateScenarioPreview>, Fixnum, Hash)>] Array<CreateScenarioPreview> data, response status code and response headers
    def preview_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.preview ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.preview"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/preview'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<CreateScenarioPreview>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Request an approval on limited edit scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Message
    # @option opts [Array<String>] :body The list of changes that we want to request approval for
    # @return [nil]
    def request_scenario_change_for_approval(org_id, scenario_id, opts = {})
      request_scenario_change_for_approval_with_http_info(org_id, scenario_id, opts)
      nil
    end

    # Request an approval on limited edit scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :message Message
    # @option opts [Array<String>] :body The list of changes that we want to request approval for
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def request_scenario_change_for_approval_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.request_scenario_change_for_approval ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.request_scenario_change_for_approval"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.request_scenario_change_for_approval"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}/changes/approval'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'message'] = opts[:'message'] if !opts[:'message'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#request_scenario_change_for_approval\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [UpdateScenario] :body Scenario data to update
    # @return [nil]
    def update_scenario(org_id, scenario_id, opts = {})
      update_scenario_with_http_info(org_id, scenario_id, opts)
      nil
    end

    # Update an existing scenario
    # 
    # @param org_id Org identifier (either id or slug)
    # @param scenario_id Scenario id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :silent Suppress notification emails
    # @option opts [UpdateScenario] :body Scenario data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_scenario_with_http_info(org_id, scenario_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ScenarioApi.update_scenario ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ScenarioApi.update_scenario"
      end
      # verify the required parameter 'scenario_id' is set
      if @api_client.config.client_side_validation && scenario_id.nil?
        fail ArgumentError, "Missing the required parameter 'scenario_id' when calling ScenarioApi.update_scenario"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/scenario/{scenarioId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'scenarioId' + '}', scenario_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'silent'] = opts[:'silent'] if !opts[:'silent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ScenarioApi#update_scenario\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
