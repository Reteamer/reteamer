=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class OrgApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new org head in the history, by creating an empty job placeholder above the current head
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def change_org_head(org_id, opts = {})
      change_org_head_with_http_info(org_id, opts)
      nil
    end

    # Create a new org head in the history, by creating an empty job placeholder above the current head
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_org_head_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.change_org_head ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrgApi.change_org_head"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/change-head'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#change_org_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Consent on Terms of Service agreement
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [AgreementRequest] :body 
    # @return [nil]
    def consent_service_agreement(org_id, opts = {})
      consent_service_agreement_with_http_info(org_id, opts)
      nil
    end

    # Consent on Terms of Service agreement
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [AgreementRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def consent_service_agreement_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.consent_service_agreement ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrgApi.consent_service_agreement"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/agreement'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#consent_service_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new org
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrg] :body Org data to create
    # @return [nil]
    def create_org(opts = {})
      create_org_with_http_info(opts)
      nil
    end

    # Create a new org
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrg] :body Org data to create
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_org_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.create_org ...'
      end
      # resource path
      local_var_path = '/v1/org'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#create_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all visible orgs, paginated by name
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Org id to start from
    # @option opts [String] :q Search query
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :customer_id Find orgs belonging to a particular customer id
    # @option opts [BOOLEAN] :real_only Include only orgs where type is REAL?
    # @option opts [Integer] :last_create_at Only include orgs whose last createAt occurred after the date
    # @option opts [Integer] :last_active_at Only include orgs whose last activeAt occurred after the date
    # @return [ResultsOrg]
    def find_orgs(opts = {})
      data, _status_code, _headers = find_orgs_with_http_info(opts)
      data
    end

    # Return all visible orgs, paginated by name
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Org id to start from
    # @option opts [String] :q Search query
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :customer_id Find orgs belonging to a particular customer id
    # @option opts [BOOLEAN] :real_only Include only orgs where type is REAL?
    # @option opts [Integer] :last_create_at Only include orgs whose last createAt occurred after the date
    # @option opts [Integer] :last_active_at Only include orgs whose last activeAt occurred after the date
    # @return [Array<(ResultsOrg, Fixnum, Hash)>] ResultsOrg data, response status code and response headers
    def find_orgs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.find_orgs ...'
      end
      # resource path
      local_var_path = '/v1/org'

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'customerId'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'realOnly'] = opts[:'real_only'] if !opts[:'real_only'].nil?
      query_params[:'lastCreateAt'] = opts[:'last_create_at'] if !opts[:'last_create_at'].nil?
      query_params[:'lastActiveAt'] = opts[:'last_active_at'] if !opts[:'last_active_at'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsOrg')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#find_orgs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular org by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [Org]
    def get_org(org_id, opts = {})
      data, _status_code, _headers = get_org_with_http_info(org_id, opts)
      data
    end

    # Return a particular org by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Org, Fixnum, Hash)>] Org data, response status code and response headers
    def get_org_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.get_org ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrgApi.get_org"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Org')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#get_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular org by slug
    # 
    # @param slug Org slug
    # @param [Hash] opts the optional parameters
    # @return [Org]
    def get_org_by_slug(slug, opts = {})
      data, _status_code, _headers = get_org_by_slug_with_http_info(slug, opts)
      data
    end

    # Return a particular org by slug
    # 
    # @param slug Org slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Org, Fixnum, Hash)>] Org data, response status code and response headers
    def get_org_by_slug_with_http_info(slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.get_org_by_slug ...'
      end
      # verify the required parameter 'slug' is set
      if @api_client.config.client_side_validation && slug.nil?
        fail ArgumentError, "Missing the required parameter 'slug' when calling OrgApi.get_org_by_slug"
      end
      # resource path
      local_var_path = '/v1/org/slug/{slug}'.sub('{' + 'slug' + '}', slug.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Org')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#get_org_by_slug\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return validation for a org by slug
    # 
    # @param slug Org slug
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_org_by_slug_no_auth(slug, opts = {})
      get_org_by_slug_no_auth_with_http_info(slug, opts)
      nil
    end

    # Return validation for a org by slug
    # 
    # @param slug Org slug
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_org_by_slug_no_auth_with_http_info(slug, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.get_org_by_slug_no_auth ...'
      end
      # verify the required parameter 'slug' is set
      if @api_client.config.client_side_validation && slug.nil?
        fail ArgumentError, "Missing the required parameter 'slug' when calling OrgApi.get_org_by_slug_no_auth"
      end
      # resource path
      local_var_path = '/org/{slug}'.sub('{' + 'slug' + '}', slug.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#get_org_by_slug_no_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all data for a particular org, except for jobs & people (this is used by the web app on initialization)
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [OrgData]
    def get_org_data(org_id, opts = {})
      data, _status_code, _headers = get_org_data_with_http_info(org_id, opts)
      data
    end

    # Return all data for a particular org, except for jobs &amp; people (this is used by the web app on initialization)
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgData, Fixnum, Hash)>] OrgData data, response status code and response headers
    def get_org_data_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.get_org_data ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrgApi.get_org_data"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/data'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrgData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#get_org_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return people and job data for a particular org (this is used by the web app on initialization)
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [OrgJobsPersonsResponse]
    def get_org_people_and_jobs(org_id, opts = {})
      data, _status_code, _headers = get_org_people_and_jobs_with_http_info(org_id, opts)
      data
    end

    # Return people and job data for a particular org (this is used by the web app on initialization)
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrgJobsPersonsResponse, Fixnum, Hash)>] OrgJobsPersonsResponse data, response status code and response headers
    def get_org_people_and_jobs_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.get_org_people_and_jobs ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrgApi.get_org_people_and_jobs"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/data-jobs-persons'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrgJobsPersonsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#get_org_people_and_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Send a test welcome email to oneself
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [TestEmailRequest] :body 
    # @return [nil]
    def send_test_email(org_id, opts = {})
      send_test_email_with_http_info(org_id, opts)
      nil
    end

    # Send a test welcome email to oneself
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [TestEmailRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def send_test_email_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.send_test_email ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrgApi.send_test_email"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/test-email'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#send_test_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing org
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrg] :body Org data to update
    # @return [nil]
    def update_org(org_id, opts = {})
      update_org_with_http_info(org_id, opts)
      nil
    end

    # Update an existing org
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrg] :body Org data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_org_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrgApi.update_org ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling OrgApi.update_org"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrgApi#update_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
