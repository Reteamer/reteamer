=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class MessageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Sets each of the designated message's `readAt` property
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PartialMessage>] :body Messages to update
    # @return [nil]
    def bulk_mark_as_read(org_id, opts = {})
      bulk_mark_as_read_with_http_info(org_id, opts)
      nil
    end

    # Sets each of the designated message&#39;s &#x60;readAt&#x60; property
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PartialMessage>] :body Messages to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def bulk_mark_as_read_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageApi.bulk_mark_as_read ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MessageApi.bulk_mark_as_read"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/message/bulk/read'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageApi#bulk_mark_as_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Marks each message as `seen`
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PartialMessage>] :body Messages to update
    # @return [nil]
    def bulk_mark_as_seen(org_id, opts = {})
      bulk_mark_as_seen_with_http_info(org_id, opts)
      nil
    end

    # Marks each message as &#x60;seen&#x60;
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PartialMessage>] :body Messages to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def bulk_mark_as_seen_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageApi.bulk_mark_as_seen ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MessageApi.bulk_mark_as_seen"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/message/bulk/seen'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageApi#bulk_mark_as_seen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new message
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [PartialMessage] :body Message data to create
    # @return [Message]
    def create_message(org_id, opts = {})
      data, _status_code, _headers = create_message_with_http_info(org_id, opts)
      data
    end

    # Create a new message
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [PartialMessage] :body Message data to create
    # @return [Array<(Message, Fixnum, Hash)>] Message data, response status code and response headers
    def create_message_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageApi.create_message ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MessageApi.create_message"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/message'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Message')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageApi#create_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular message by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param message_id Message id
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def get_message(org_id, message_id, opts = {})
      data, _status_code, _headers = get_message_with_http_info(org_id, message_id, opts)
      data
    end

    # Return a particular message by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param message_id Message id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Fixnum, Hash)>] Message data, response status code and response headers
    def get_message_with_http_info(org_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageApi.get_message ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MessageApi.get_message"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessageApi.get_message"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/message/{messageId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'messageId' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Message')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageApi#get_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular message by key
    # 
    # @param org_id Org identifier (either id or slug)
    # @param message_key Message key
    # @param [Hash] opts the optional parameters
    # @return [Message]
    def get_message_by_key(org_id, message_key, opts = {})
      data, _status_code, _headers = get_message_by_key_with_http_info(org_id, message_key, opts)
      data
    end

    # Return a particular message by key
    # 
    # @param org_id Org identifier (either id or slug)
    # @param message_key Message key
    # @param [Hash] opts the optional parameters
    # @return [Array<(Message, Fixnum, Hash)>] Message data, response status code and response headers
    def get_message_by_key_with_http_info(org_id, message_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageApi.get_message_by_key ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MessageApi.get_message_by_key"
      end
      # verify the required parameter 'message_key' is set
      if @api_client.config.client_side_validation && message_key.nil?
        fail ArgumentError, "Missing the required parameter 'message_key' when calling MessageApi.get_message_by_key"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/message/me/{messageKey}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'messageKey' + '}', message_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Message')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageApi#get_message_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets the designated message's `readAt` property
    # 
    # @param org_id Org identifier (either id or slug)
    # @param message_id Message id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def mark_as_read(org_id, message_id, opts = {})
      mark_as_read_with_http_info(org_id, message_id, opts)
      nil
    end

    # Sets the designated message&#39;s &#x60;readAt&#x60; property
    # 
    # @param org_id Org identifier (either id or slug)
    # @param message_id Message id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def mark_as_read_with_http_info(org_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageApi.mark_as_read ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MessageApi.mark_as_read"
      end
      # verify the required parameter 'message_id' is set
      if @api_client.config.client_side_validation && message_id.nil?
        fail ArgumentError, "Missing the required parameter 'message_id' when calling MessageApi.mark_as_read"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/message/{messageId}/read'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'messageId' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageApi#mark_as_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all messages for a particular user
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Message \&quot;type\&quot; (WEB, CHAT, or EMAIL)
    # @option opts [BOOLEAN] :unread_only Message \&quot;status\&quot; (read or unread)
    # @option opts [String] :from MessageId to start paginating from
    # @option opts [Integer] :limit Limit
    # @return [ResultsMessage]
    def me(org_id, opts = {})
      data, _status_code, _headers = me_with_http_info(org_id, opts)
      data
    end

    # Return all messages for a particular user
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Message \&quot;type\&quot; (WEB, CHAT, or EMAIL)
    # @option opts [BOOLEAN] :unread_only Message \&quot;status\&quot; (read or unread)
    # @option opts [String] :from MessageId to start paginating from
    # @option opts [Integer] :limit Limit
    # @return [Array<(ResultsMessage, Fixnum, Hash)>] ResultsMessage data, response status code and response headers
    def me_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MessageApi.me ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling MessageApi.me"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/message/me'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'unreadOnly'] = opts[:'unread_only'] if !opts[:'unread_only'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessageApi#me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
