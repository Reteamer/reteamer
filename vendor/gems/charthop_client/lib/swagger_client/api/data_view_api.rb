=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class DataViewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a data view
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDataView] :body Data view data to create
    # @return [DataView]
    def create_data_view(org_id, opts = {})
      data, _status_code, _headers = create_data_view_with_http_info(org_id, opts)
      data
    end

    # Create a data view
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDataView] :body Data view data to create
    # @return [Array<(DataView, Fixnum, Hash)>] DataView data, response status code and response headers
    def create_data_view_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataViewApi.create_data_view ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DataViewApi.create_data_view"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/data-view'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataView')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataViewApi#create_data_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a data  view
    # 
    # @param org_id Org identifier (either id or slug)
    # @param data_view_id Data view id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_data_view(org_id, data_view_id, opts = {})
      delete_data_view_with_http_info(org_id, data_view_id, opts)
      nil
    end

    # Delete a data  view
    # 
    # @param org_id Org identifier (either id or slug)
    # @param data_view_id Data view id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_data_view_with_http_info(org_id, data_view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataViewApi.delete_data_view ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DataViewApi.delete_data_view"
      end
      # verify the required parameter 'data_view_id' is set
      if @api_client.config.client_side_validation && data_view_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_view_id' when calling DataViewApi.delete_data_view"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/data-view/{dataViewId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'dataViewId' + '}', data_view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataViewApi#delete_data_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all data views in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Data view id to start paginating from
    # @option opts [String] :type Data view type to filter by
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :ids Comma delimited of ids to return
    # @return [ResultsDataView]
    def find_data_views(org_id, opts = {})
      data, _status_code, _headers = find_data_views_with_http_info(org_id, opts)
      data
    end

    # Return all data views in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Data view id to start paginating from
    # @option opts [String] :type Data view type to filter by
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :ids Comma delimited of ids to return
    # @return [Array<(ResultsDataView, Fixnum, Hash)>] ResultsDataView data, response status code and response headers
    def find_data_views_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataViewApi.find_data_views ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DataViewApi.find_data_views"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['ANY', 'DATA_SHEET', 'ORG_CHART', 'MAP'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of ANY, DATA_SHEET, ORG_CHART, MAP'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/data-view'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsDataView')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataViewApi#find_data_views\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular data view by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param data_view_id Data view id
    # @param [Hash] opts the optional parameters
    # @return [DataView]
    def get_data_view(org_id, data_view_id, opts = {})
      data, _status_code, _headers = get_data_view_with_http_info(org_id, data_view_id, opts)
      data
    end

    # Return a particular data view by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param data_view_id Data view id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataView, Fixnum, Hash)>] DataView data, response status code and response headers
    def get_data_view_with_http_info(org_id, data_view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataViewApi.get_data_view ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DataViewApi.get_data_view"
      end
      # verify the required parameter 'data_view_id' is set
      if @api_client.config.client_side_validation && data_view_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_view_id' when calling DataViewApi.get_data_view"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/data-view/{dataViewId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'dataViewId' + '}', data_view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataView')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataViewApi#get_data_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing data view
    # 
    # @param org_id Org identifier (either id or slug)
    # @param data_view_id Data view id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDataView] :body Data view data to update
    # @return [DataView]
    def update_data_view(org_id, data_view_id, opts = {})
      data, _status_code, _headers = update_data_view_with_http_info(org_id, data_view_id, opts)
      data
    end

    # Update an existing data view
    # 
    # @param org_id Org identifier (either id or slug)
    # @param data_view_id Data view id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateDataView] :body Data view data to update
    # @return [Array<(DataView, Fixnum, Hash)>] DataView data, response status code and response headers
    def update_data_view_with_http_info(org_id, data_view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataViewApi.update_data_view ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling DataViewApi.update_data_view"
      end
      # verify the required parameter 'data_view_id' is set
      if @api_client.config.client_side_validation && data_view_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_view_id' when calling DataViewApi.update_data_view"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/data-view/{dataViewId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'dataViewId' + '}', data_view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataView')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataViewApi#update_data_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
