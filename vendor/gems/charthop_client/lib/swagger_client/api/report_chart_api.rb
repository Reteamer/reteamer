=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class ReportChartApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new chart in a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReportChart] :body Report chart data to create
    # @return [ReportChart]
    def create_chart(org_id, report_id, opts = {})
      data, _status_code, _headers = create_chart_with_http_info(org_id, report_id, opts)
      data
    end

    # Create a new chart in a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateReportChart] :body Report chart data to create
    # @return [Array<(ReportChart, Fixnum, Hash)>] ReportChart data, response status code and response headers
    def create_chart_with_http_info(org_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportChartApi.create_chart ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportChartApi.create_chart"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportChartApi.create_chart"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}/chart'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportChart')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportChartApi#create_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a chart from a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_chart(org_id, chart_id, opts = {})
      delete_chart_with_http_info(org_id, chart_id, opts)
      nil
    end

    # Delete a chart from a report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_chart_with_http_info(org_id, chart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportChartApi.delete_chart ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportChartApi.delete_chart"
      end
      # verify the required parameter 'chart_id' is set
      if @api_client.config.client_side_validation && chart_id.nil?
        fail ArgumentError, "Missing the required parameter 'chart_id' when calling ReportChartApi.delete_chart"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/chart/{chartId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'chartId' + '}', chart_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportChartApi#delete_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export a particular chart's data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date, inclusive
    # @option opts [String] :end_date End date, exclusive
    # @option opts [String] :interval Interval
    # @option opts [String] :scenario_id Scenario id
    # @option opts [BOOLEAN] :project_hires Project future hires
    # @option opts [String] :format Data format to use; default is json, can also use html
    # @return [nil]
    def export_chart_data(org_id, report_id, chart_id, opts = {})
      export_chart_data_with_http_info(org_id, report_id, chart_id, opts)
      nil
    end

    # Export a particular chart&#39;s data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_date Start date, inclusive
    # @option opts [String] :end_date End date, exclusive
    # @option opts [String] :interval Interval
    # @option opts [String] :scenario_id Scenario id
    # @option opts [BOOLEAN] :project_hires Project future hires
    # @option opts [String] :format Data format to use; default is json, can also use html
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_chart_data_with_http_info(org_id, report_id, chart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportChartApi.export_chart_data ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportChartApi.export_chart_data"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportChartApi.export_chart_data"
      end
      # verify the required parameter 'chart_id' is set
      if @api_client.config.client_side_validation && chart_id.nil?
        fail ArgumentError, "Missing the required parameter 'chart_id' when calling ReportChartApi.export_chart_data"
      end
      if @api_client.config.client_side_validation && opts[:'interval'] && !['DAY', 'WEEK', 'MONTH', 'QUARTER', 'FISCAL_QUARTER', 'YEAR', 'FISCAL_YEAR'].include?(opts[:'interval'])
        fail ArgumentError, 'invalid value for "interval", must be one of DAY, WEEK, MONTH, QUARTER, FISCAL_QUARTER, YEAR, FISCAL_YEAR'
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}/chart/{chartId}/data'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s).sub('{' + 'chartId' + '}', chart_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'projectHires'] = opts[:'project_hires'] if !opts[:'project_hires'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportChartApi#export_chart_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all of the charts for a particular report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @return [ResultsReportChart]
    def find_charts(org_id, report_id, opts = {})
      data, _status_code, _headers = find_charts_with_http_info(org_id, report_id, opts)
      data
    end

    # Return all of the charts for a particular report
    # 
    # @param org_id Org identifier (either id or slug)
    # @param report_id Report id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResultsReportChart, Fixnum, Hash)>] ResultsReportChart data, response status code and response headers
    def find_charts_with_http_info(org_id, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportChartApi.find_charts ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportChartApi.find_charts"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling ReportChartApi.find_charts"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/{reportId}/chart'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'reportId' + '}', report_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsReportChart')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportChartApi#find_charts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular report chart by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @return [ReportChart]
    def get_chart(org_id, chart_id, opts = {})
      data, _status_code, _headers = get_chart_with_http_info(org_id, chart_id, opts)
      data
    end

    # Return a particular report chart by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportChart, Fixnum, Hash)>] ReportChart data, response status code and response headers
    def get_chart_with_http_info(org_id, chart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportChartApi.get_chart ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportChartApi.get_chart"
      end
      # verify the required parameter 'chart_id' is set
      if @api_client.config.client_side_validation && chart_id.nil?
        fail ArgumentError, "Missing the required parameter 'chart_id' when calling ReportChartApi.get_chart"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/chart/{chartId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'chartId' + '}', chart_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportChart')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportChartApi#get_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing report chart
    # 
    # @param org_id Org identifier (either id or slug)
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateReportChart] :body Chart data to update
    # @return [nil]
    def update_chart(org_id, chart_id, opts = {})
      update_chart_with_http_info(org_id, chart_id, opts)
      nil
    end

    # Update an existing report chart
    # 
    # @param org_id Org identifier (either id or slug)
    # @param chart_id Chart id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateReportChart] :body Chart data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_chart_with_http_info(org_id, chart_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportChartApi.update_chart ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling ReportChartApi.update_chart"
      end
      # verify the required parameter 'chart_id' is set
      if @api_client.config.client_side_validation && chart_id.nil?
        fail ArgumentError, "Missing the required parameter 'chart_id' when calling ReportChartApi.update_chart"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/report/chart/{chartId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'chartId' + '}', chart_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportChartApi#update_chart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
