=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class FileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param file_id File id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_file(org_id, file_id, opts = {})
      delete_file_with_http_info(org_id, file_id, opts)
      nil
    end

    # Delete a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param file_id File id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_file_with_http_info(org_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.delete_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FileApi.delete_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FileApi.delete_file"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/file/{fileId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param file_id File id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def download_file(org_id, file_id, opts = {})
      download_file_with_http_info(org_id, file_id, opts)
      nil
    end

    # Download a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param file_id File id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def download_file_with_http_info(org_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.download_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FileApi.download_file"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FileApi.download_file"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/file/{fileId}/download'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#download_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns metadata about a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_id Entity id
    # @option opts [String] :entity_type Entity type
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :from From result id
    # @return [ResultsFileEntity]
    def find_files(org_id, opts = {})
      data, _status_code, _headers = find_files_with_http_info(org_id, opts)
      data
    end

    # Returns metadata about a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_id Entity id
    # @option opts [String] :entity_type Entity type
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :from From result id
    # @return [Array<(ResultsFileEntity, Fixnum, Hash)>] ResultsFileEntity data, response status code and response headers
    def find_files_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.find_files ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FileApi.find_files"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/file'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'entityType'] = opts[:'entity_type'] if !opts[:'entity_type'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsFileEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#find_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns metadata about a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param file_id File id
    # @param [Hash] opts the optional parameters
    # @return [FileEntity]
    def get_file_metadata(org_id, file_id, opts = {})
      data, _status_code, _headers = get_file_metadata_with_http_info(org_id, file_id, opts)
      data
    end

    # Returns metadata about a file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param file_id File id
    # @param [Hash] opts the optional parameters
    # @return [Array<(FileEntity, Fixnum, Hash)>] FileEntity data, response status code and response headers
    def get_file_metadata_with_http_info(org_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.get_file_metadata ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FileApi.get_file_metadata"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FileApi.get_file_metadata"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/file/{fileId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'fileId' + '}', file_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#get_file_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload a new file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_id entity id (if not passed, defaults to user id)
    # @option opts [String] :entity_type entity type (if not passed, defaults to user)
    # @option opts [String] :field field name - can leave blank for a general upload
    # @option opts [String] :sensitive file sensitivity level - defaults to PERSONAL
    # @option opts [File] :file 
    # @return [FileEntity]
    def upload_file(org_id, opts = {})
      data, _status_code, _headers = upload_file_with_http_info(org_id, opts)
      data
    end

    # Upload a new file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_id entity id (if not passed, defaults to user id)
    # @option opts [String] :entity_type entity type (if not passed, defaults to user)
    # @option opts [String] :field field name - can leave blank for a general upload
    # @option opts [String] :sensitive file sensitivity level - defaults to PERSONAL
    # @option opts [File] :file 
    # @return [Array<(FileEntity, Fixnum, Hash)>] FileEntity data, response status code and response headers
    def upload_file_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.upload_file ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling FileApi.upload_file"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/file'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'entityId'] = opts[:'entity_id'] if !opts[:'entity_id'].nil?
      query_params[:'entityType'] = opts[:'entity_type'] if !opts[:'entity_type'].nil?
      query_params[:'field'] = opts[:'field'] if !opts[:'field'].nil?
      query_params[:'sensitive'] = opts[:'sensitive'] if !opts[:'sensitive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#upload_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
