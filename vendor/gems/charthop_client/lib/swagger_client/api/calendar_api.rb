=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class CalendarApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return calendar entries in a given time period
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Start date
    # @option opts [String] :_end End date
    # @option opts [String] :type Type of calendar entries to retrieve (timeoff, anniversary, birthday)
    # @option opts [String] :q Query filter to filter for part of the organization
    # @option opts [String] :format Format to return data in
    # @return [nil]
    def find_calendar_entries(org_id, opts = {})
      find_calendar_entries_with_http_info(org_id, opts)
      nil
    end

    # Return calendar entries in a given time period
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Start date
    # @option opts [String] :_end End date
    # @option opts [String] :type Type of calendar entries to retrieve (timeoff, anniversary, birthday)
    # @option opts [String] :q Query filter to filter for part of the organization
    # @option opts [String] :format Format to return data in
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def find_calendar_entries_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CalendarApi.find_calendar_entries ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling CalendarApi.find_calendar_entries"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/calendar'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CalendarApi#find_calendar_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
