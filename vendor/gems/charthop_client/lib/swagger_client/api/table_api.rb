=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class TableApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTable] :body Table data to create
    # @return [Table]
    def create_table(org_id, opts = {})
      data, _status_code, _headers = create_table_with_http_info(org_id, opts)
      data
    end

    # Create a table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [CreateTable] :body Table data to create
    # @return [Array<(Table, Fixnum, Hash)>] Table data, response status code and response headers
    def create_table_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.create_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.create_table"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Table')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#create_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_table(org_id, table_id, opts = {})
      delete_table_with_http_info(org_id, table_id, opts)
      nil
    end

    # Delete a table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_table_with_http_info(org_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.delete_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.delete_table"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.delete_table"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#delete_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Export table data to CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Process]
    def export_csv(org_id, table_id, opts = {})
      data, _status_code, _headers = export_csv_with_http_info(org_id, table_id, opts)
      data
    end

    # Export table data to CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body export options
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def export_csv_with_http_info(org_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.export_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.export_csv"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.export_csv"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}/export'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#export_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return all tables in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Table id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsTable]
    def find_tables(org_id, opts = {})
      data, _status_code, _headers = find_tables_with_http_info(org_id, opts)
      data
    end

    # Return all tables in the organization paginated
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :from Table id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsTable, Fixnum, Hash)>] ResultsTable data, response status code and response headers
    def find_tables_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.find_tables ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.find_tables"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsTable')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#find_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve all rows from the table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :columns Columns to retrieve, comma-separated (defaults to all columns)
    # @option opts [String] :format Data format to use; default is json, can also use json-extended, json-readable, or csv
    # @return [ResultsData]
    def get_all_rows(org_id, table_id, opts = {})
      data, _status_code, _headers = get_all_rows_with_http_info(org_id, table_id, opts)
      data
    end

    # Retrieve all rows from the table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to retrieve
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :columns Columns to retrieve, comma-separated (defaults to all columns)
    # @option opts [String] :format Data format to use; default is json, can also use json-extended, json-readable, or csv
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def get_all_rows_with_http_info(org_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.get_all_rows ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.get_all_rows"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.get_all_rows"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}/data'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'columns'] = opts[:'columns'] if !opts[:'columns'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#get_all_rows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a particular row
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to retrieve
    # @param key_column Column name to look up the row by (for example: id)
    # @param key_value Value of the column
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :columns Columns to retrieve, comma-separated (defaults to all columns)
    # @option opts [String] :format Data format to use; default is json, can also use json-extended, json-readable, or csv
    # @return [ResultsData]
    def get_row(org_id, table_id, key_column, key_value, opts = {})
      data, _status_code, _headers = get_row_with_http_info(org_id, table_id, key_column, key_value, opts)
      data
    end

    # Retrieve a particular row
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to retrieve
    # @param key_column Column name to look up the row by (for example: id)
    # @param key_value Value of the column
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :columns Columns to retrieve, comma-separated (defaults to all columns)
    # @option opts [String] :format Data format to use; default is json, can also use json-extended, json-readable, or csv
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def get_row_with_http_info(org_id, table_id, key_column, key_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.get_row ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.get_row"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.get_row"
      end
      # verify the required parameter 'key_column' is set
      if @api_client.config.client_side_validation && key_column.nil?
        fail ArgumentError, "Missing the required parameter 'key_column' when calling TableApi.get_row"
      end
      # verify the required parameter 'key_value' is set
      if @api_client.config.client_side_validation && key_value.nil?
        fail ArgumentError, "Missing the required parameter 'key_value' when calling TableApi.get_row"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'keyColumn' + '}', key_column.to_s).sub('{' + 'keyValue' + '}', key_value.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'columns'] = opts[:'columns'] if !opts[:'columns'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#get_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular table by id or name
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or name
    # @param [Hash] opts the optional parameters
    # @return [Table]
    def get_table(org_id, table_id, opts = {})
      data, _status_code, _headers = get_table_with_http_info(org_id, table_id, opts)
      data
    end

    # Return a particular table by id or name
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Table, Fixnum, Hash)>] Table data, response status code and response headers
    def get_table_with_http_info(org_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.get_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.get_table"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.get_table"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Table')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#get_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [Date] :date Date to update as of
    # @return [Process]
    def import_csv(org_id, table_id, opts = {})
      data, _status_code, _headers = import_csv_with_http_info(org_id, table_id, opts)
      data
    end

    # Import data from CSV file
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file 
    # @option opts [Date] :date Date to update as of
    # @return [Array<(Process, Fixnum, Hash)>] Process data, response status code and response headers
    def import_csv_with_http_info(org_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.import_csv ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.import_csv"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.import_csv"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}/import'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Process')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#import_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing row
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param key_column Column name to look up the row by (for example: id)
    # @param key_value Value of the key column
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to update as of
    # @option opts [Object] :body 
    # @return [ResultsData]
    def update_row(org_id, table_id, key_column, key_value, opts = {})
      data, _status_code, _headers = update_row_with_http_info(org_id, table_id, key_column, key_value, opts)
      data
    end

    # Update an existing row
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param key_column Column name to look up the row by (for example: id)
    # @param key_value Value of the key column
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to update as of
    # @option opts [Object] :body 
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def update_row_with_http_info(org_id, table_id, key_column, key_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.update_row ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.update_row"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.update_row"
      end
      # verify the required parameter 'key_column' is set
      if @api_client.config.client_side_validation && key_column.nil?
        fail ArgumentError, "Missing the required parameter 'key_column' when calling TableApi.update_row"
      end
      # verify the required parameter 'key_value' is set
      if @api_client.config.client_side_validation && key_value.nil?
        fail ArgumentError, "Missing the required parameter 'key_value' when calling TableApi.update_row"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s).sub('{' + 'keyColumn' + '}', key_column.to_s).sub('{' + 'keyValue' + '}', key_value.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#update_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an existing table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or name
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTable] :body Table data to update
    # @return [nil]
    def update_table(org_id, table_id, opts = {})
      update_table_with_http_info(org_id, table_id, opts)
      nil
    end

    # Update an existing table
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or name
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTable] :body Table data to update
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_table_with_http_info(org_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.update_table ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.update_table"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.update_table"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#update_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upsert row data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to update as of
    # @option opts [Object] :body 
    # @return [ResultsData]
    def upsert_row(org_id, table_id, opts = {})
      data, _status_code, _headers = upsert_row_with_http_info(org_id, table_id, opts)
      data
    end

    # Upsert row data
    # 
    # @param org_id Org identifier (either id or slug)
    # @param table_id Table id or unique name to update
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :date Date to update as of
    # @option opts [Object] :body 
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def upsert_row_with_http_info(org_id, table_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TableApi.upsert_row ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling TableApi.upsert_row"
      end
      # verify the required parameter 'table_id' is set
      if @api_client.config.client_side_validation && table_id.nil?
        fail ArgumentError, "Missing the required parameter 'table_id' when calling TableApi.upsert_row"
      end
      # resource path
      local_var_path = '/v1/org/{orgId}/table/{tableId}/data'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'tableId' + '}', table_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TableApi#upsert_row\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
