=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class PersonApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to create the person in
    # @option opts [Date] :date Effective date of person creation
    # @option opts [Object] :body 
    # @return [Object]
    def create_person(org_id, opts = {})
      data, _status_code, _headers = create_person_with_http_info(org_id, opts)
      data
    end

    # Create a person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to create the person in
    # @option opts [Date] :date Effective date of person creation
    # @option opts [Object] :body 
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def create_person_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonApi.create_person ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PersonApi.create_person"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/person'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonApi#create_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_person(org_id, person_id, opts = {})
      delete_person_with_http_info(org_id, person_id, opts)
      nil
    end

    # Delete a person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_person_with_http_info(org_id, person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonApi.delete_person ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PersonApi.delete_person"
      end
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        fail ArgumentError, "Missing the required parameter 'person_id' when calling PersonApi.delete_person"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/person/{personId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'personId' + '}', person_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonApi#delete_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find persons in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :q Search query
    # @option opts [String] :from Person id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [BOOLEAN] :include_all Include all persons in the system, including ex-employees or persons who were never in jobs
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [ResultsData]
    def find_persons(org_id, opts = {})
      data, _status_code, _headers = find_persons_with_http_info(org_id, opts)
      data
    end

    # Find persons in the organization
    # 
    # @param org_id Org identifier (either id or slug)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date to search as of
    # @option opts [String] :q Search query
    # @option opts [String] :from Person id to start paginating from
    # @option opts [Integer] :limit Number of results to return
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [BOOLEAN] :include_all Include all persons in the system, including ex-employees or persons who were never in jobs
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Array<(ResultsData, Fixnum, Hash)>] ResultsData data, response status code and response headers
    def find_persons_with_http_info(org_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonApi.find_persons ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PersonApi.find_persons"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/person'.sub('{' + 'orgId' + '}', org_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'includeAll'] = opts[:'include_all'] if !opts[:'include_all'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonApi#find_persons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return a particular person by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Object]
    def get_person(org_id, person_id, opts = {})
      data, _status_code, _headers = get_person_with_http_info(org_id, person_id, opts)
      data
    end

    # Return a particular person by id
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to query
    # @option opts [Date] :date Date
    # @option opts [String] :fields Fields to retrieve, comma-separated
    # @option opts [String] :format Data format to use; default is json, can also use json-extended or json-readable
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_person_with_http_info(org_id, person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonApi.get_person ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PersonApi.get_person"
      end
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        fail ArgumentError, "Missing the required parameter 'person_id' when calling PersonApi.get_person"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/person/{personId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'personId' + '}', person_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonApi#get_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to update the person in
    # @option opts [Date] :date Effective date of person update
    # @option opts [Object] :body 
    # @return [nil]
    def update_person(org_id, person_id, opts = {})
      update_person_with_http_info(org_id, person_id, opts)
      nil
    end

    # Update a person
    # 
    # @param org_id Org identifier (either id or slug)
    # @param person_id Person id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scenario_id Scenario id to update the person in
    # @option opts [Date] :date Effective date of person update
    # @option opts [Object] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_person_with_http_info(org_id, person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PersonApi.update_person ...'
      end
      # verify the required parameter 'org_id' is set
      if @api_client.config.client_side_validation && org_id.nil?
        fail ArgumentError, "Missing the required parameter 'org_id' when calling PersonApi.update_person"
      end
      # verify the required parameter 'person_id' is set
      if @api_client.config.client_side_validation && person_id.nil?
        fail ArgumentError, "Missing the required parameter 'person_id' when calling PersonApi.update_person"
      end
      # resource path
      local_var_path = '/v2/org/{orgId}/person/{personId}'.sub('{' + 'orgId' + '}', org_id.to_s).sub('{' + 'personId' + '}', person_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'scenarioId'] = opts[:'scenario_id'] if !opts[:'scenario_id'].nil?
      query_params[:'date'] = opts[:'date'] if !opts[:'date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PersonApi#update_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
