=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'uri'

module SwaggerClient
  class StockApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a stock price
    # 
    # @param id Stock entry id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_stock_price(id, opts = {})
      delete_stock_price_with_http_info(id, opts)
      nil
    end

    # Delete a stock price
    # 
    # @param id Stock entry id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_stock_price_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StockApi.delete_stock_price ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StockApi.delete_stock_price"
      end
      # resource path
      local_var_path = '/v1/stock/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockApi#delete_stock_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Return the history of stock prices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol to query
    # @option opts [String] :type Types of valuations to retrieve
    # @option opts [Date] :from Date to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [ResultsStockPrice]
    def find_stock_prices(opts = {})
      data, _status_code, _headers = find_stock_prices_with_http_info(opts)
      data
    end

    # Return the history of stock prices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :symbol Symbol to query
    # @option opts [String] :type Types of valuations to retrieve
    # @option opts [Date] :from Date to start from
    # @option opts [Integer] :limit Number of results to return
    # @return [Array<(ResultsStockPrice, Fixnum, Hash)>] ResultsStockPrice data, response status code and response headers
    def find_stock_prices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StockApi.find_stock_prices ...'
      end
      # resource path
      local_var_path = '/v1/stock'

      # query parameters
      query_params = {}
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultsStockPrice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockApi#find_stock_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a stock price as of a particular date
    # 
    # @param symbol Stock symbol
    # @param date Date to update information for
    # @param type Type of stock price to retrieve (for example &#39;public&#39;)
    # @param [Hash] opts the optional parameters
    # @return [StockPrice]
    def get_stock_price(symbol, date, type, opts = {})
      data, _status_code, _headers = get_stock_price_with_http_info(symbol, date, type, opts)
      data
    end

    # Get a stock price as of a particular date
    # 
    # @param symbol Stock symbol
    # @param date Date to update information for
    # @param type Type of stock price to retrieve (for example &#39;public&#39;)
    # @param [Hash] opts the optional parameters
    # @return [Array<(StockPrice, Fixnum, Hash)>] StockPrice data, response status code and response headers
    def get_stock_price_with_http_info(symbol, date, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StockApi.get_stock_price ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling StockApi.get_stock_price"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling StockApi.get_stock_price"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling StockApi.get_stock_price"
      end
      # resource path
      local_var_path = '/v1/stock/{symbol}/{date}/{type}'.sub('{' + 'symbol' + '}', symbol.to_s).sub('{' + 'date' + '}', date.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StockPrice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockApi#get_stock_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upsert a stock price
    # 
    # @param symbol Stock symbol
    # @param date Date to update information for
    # @param type Type of stock price to upsert
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStockPrice] :body Stock price data to create
    # @return [StockPrice]
    def upsert_stock(symbol, date, type, opts = {})
      data, _status_code, _headers = upsert_stock_with_http_info(symbol, date, type, opts)
      data
    end

    # Upsert a stock price
    # 
    # @param symbol Stock symbol
    # @param date Date to update information for
    # @param type Type of stock price to upsert
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStockPrice] :body Stock price data to create
    # @return [Array<(StockPrice, Fixnum, Hash)>] StockPrice data, response status code and response headers
    def upsert_stock_with_http_info(symbol, date, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StockApi.upsert_stock ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling StockApi.upsert_stock"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling StockApi.upsert_stock"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling StockApi.upsert_stock"
      end
      # resource path
      local_var_path = '/v1/stock/{symbol}/{date}/{type}'.sub('{' + 'symbol' + '}', symbol.to_s).sub('{' + 'date' + '}', date.to_s).sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StockPrice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockApi#upsert_stock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
