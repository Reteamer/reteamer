=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class FileEntity
    # globally unique id of file
    attr_accessor :id

    # parent org id
    attr_accessor :org_id

    # entity id that the file is attached to
    attr_accessor :entity_id

    # entity type (should only be PERSON or USER)
    attr_accessor :entity_type

    # field name that the file uses, if the file is tied to a field
    attr_accessor :field

    # level of sensitivity of the file, if the file is not tied to a field
    attr_accessor :sensitive

    # customer facing filename of file
    attr_accessor :filename

    # original filename of file
    attr_accessor :original_filename

    # mime type of file
    attr_accessor :type

    # extension of file
    attr_accessor :ext

    # size of file in bytes
    attr_accessor :bytes

    # created by user id
    attr_accessor :create_id

    # created timestamp
    attr_accessor :create_at

    # deleted by user id
    attr_accessor :delete_id

    # deleted timestamp
    attr_accessor :delete_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'org_id' => :'orgId',
        :'entity_id' => :'entityId',
        :'entity_type' => :'entityType',
        :'field' => :'field',
        :'sensitive' => :'sensitive',
        :'filename' => :'filename',
        :'original_filename' => :'originalFilename',
        :'type' => :'type',
        :'ext' => :'ext',
        :'bytes' => :'bytes',
        :'create_id' => :'createId',
        :'create_at' => :'createAt',
        :'delete_id' => :'deleteId',
        :'delete_at' => :'deleteAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'org_id' => :'String',
        :'entity_id' => :'String',
        :'entity_type' => :'String',
        :'field' => :'String',
        :'sensitive' => :'String',
        :'filename' => :'String',
        :'original_filename' => :'String',
        :'type' => :'String',
        :'ext' => :'String',
        :'bytes' => :'Integer',
        :'create_id' => :'String',
        :'create_at' => :'String',
        :'delete_id' => :'String',
        :'delete_at' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'orgId')
        self.org_id = attributes[:'orgId']
      end

      if attributes.has_key?(:'entityId')
        self.entity_id = attributes[:'entityId']
      end

      if attributes.has_key?(:'entityType')
        self.entity_type = attributes[:'entityType']
      end

      if attributes.has_key?(:'field')
        self.field = attributes[:'field']
      end

      if attributes.has_key?(:'sensitive')
        self.sensitive = attributes[:'sensitive']
      end

      if attributes.has_key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.has_key?(:'originalFilename')
        self.original_filename = attributes[:'originalFilename']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'ext')
        self.ext = attributes[:'ext']
      end

      if attributes.has_key?(:'bytes')
        self.bytes = attributes[:'bytes']
      end

      if attributes.has_key?(:'createId')
        self.create_id = attributes[:'createId']
      end

      if attributes.has_key?(:'createAt')
        self.create_at = attributes[:'createAt']
      end

      if attributes.has_key?(:'deleteId')
        self.delete_id = attributes[:'deleteId']
      end

      if attributes.has_key?(:'deleteAt')
        self.delete_at = attributes[:'deleteAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @filename.nil?
        invalid_properties.push('invalid value for "filename", filename cannot be nil.')
      end

      if @original_filename.nil?
        invalid_properties.push('invalid value for "original_filename", original_filename cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @ext.nil?
        invalid_properties.push('invalid value for "ext", ext cannot be nil.')
      end

      if @bytes.nil?
        invalid_properties.push('invalid value for "bytes", bytes cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      entity_type_validator = EnumAttributeValidator.new('String', ['ORG', 'USER', 'CHANGE', 'PERSON', 'CUSTOMER', 'GROUP', 'GOAL', 'APP', 'SCENARIO', 'PROCESS', 'COMMENT', 'CONTENT', 'MEDIA', 'FILE', 'FIELD', 'FORM', 'FORM_DRAFT', 'TEMPLATE', 'TODO', 'JOB', 'REPORT', 'REPORT_CHART', 'STOCK_PRICE', 'QUERY_TOKEN', 'TOKEN', 'DATA_VIEW', 'ACTION', 'AGREEMENT', 'PRODUCT', 'APP_CONFIG', 'CATEGORY', 'CATEGORY_SORT', 'ORG_CONFIG', 'MESSAGE', 'TABLE', 'TABLE_ROW'])
      return false unless entity_type_validator.valid?(@entity_type)
      sensitive_validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      return false unless sensitive_validator.valid?(@sensitive)
      return false if @filename.nil?
      return false if @original_filename.nil?
      return false if @type.nil?
      return false if @ext.nil?
      return false if @bytes.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity_type Object to be assigned
    def entity_type=(entity_type)
      validator = EnumAttributeValidator.new('String', ['ORG', 'USER', 'CHANGE', 'PERSON', 'CUSTOMER', 'GROUP', 'GOAL', 'APP', 'SCENARIO', 'PROCESS', 'COMMENT', 'CONTENT', 'MEDIA', 'FILE', 'FIELD', 'FORM', 'FORM_DRAFT', 'TEMPLATE', 'TODO', 'JOB', 'REPORT', 'REPORT_CHART', 'STOCK_PRICE', 'QUERY_TOKEN', 'TOKEN', 'DATA_VIEW', 'ACTION', 'AGREEMENT', 'PRODUCT', 'APP_CONFIG', 'CATEGORY', 'CATEGORY_SORT', 'ORG_CONFIG', 'MESSAGE', 'TABLE', 'TABLE_ROW'])
      unless validator.valid?(entity_type)
        fail ArgumentError, 'invalid value for "entity_type", must be one of #{validator.allowable_values}.'
      end
      @entity_type = entity_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sensitive Object to be assigned
    def sensitive=(sensitive)
      validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      unless validator.valid?(sensitive)
        fail ArgumentError, 'invalid value for "sensitive", must be one of #{validator.allowable_values}.'
      end
      @sensitive = sensitive
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          org_id == o.org_id &&
          entity_id == o.entity_id &&
          entity_type == o.entity_type &&
          field == o.field &&
          sensitive == o.sensitive &&
          filename == o.filename &&
          original_filename == o.original_filename &&
          type == o.type &&
          ext == o.ext &&
          bytes == o.bytes &&
          create_id == o.create_id &&
          create_at == o.create_at &&
          delete_id == o.delete_id &&
          delete_at == o.delete_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, org_id, entity_id, entity_type, field, sensitive, filename, original_filename, type, ext, bytes, create_id, create_at, delete_id, delete_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
