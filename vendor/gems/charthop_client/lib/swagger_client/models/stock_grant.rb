=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class StockGrant
    # unique identifier of grant
    attr_accessor :id

    # ticker symbol of this stock
    attr_accessor :stock

    # date of grant
    attr_accessor :date

    # vesting start date of grant
    attr_accessor :vest_date

    # expiration date of grant
    attr_accessor :expire_date

    # number of shares granted
    attr_accessor :shares

    # per share strike price
    attr_accessor :price

    # type of grant
    attr_accessor :type

    # vesting schedule
    attr_accessor :vest

    # original per share value of stock (grant price at time of issue)
    attr_accessor :original_price

    # current per share value of stock
    attr_accessor :current_price

    # current number of shares vested
    attr_accessor :vested_shares

    # number of shares vested one year from today
    attr_accessor :vested_shares_next_year

    # number of shares vested, by future date
    attr_accessor :vested_shares_by_date

    # vesting end date
    attr_accessor :vest_end_date

    # cancellation date
    attr_accessor :cancel_date

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'stock' => :'stock',
        :'date' => :'date',
        :'vest_date' => :'vestDate',
        :'expire_date' => :'expireDate',
        :'shares' => :'shares',
        :'price' => :'price',
        :'type' => :'type',
        :'vest' => :'vest',
        :'original_price' => :'originalPrice',
        :'current_price' => :'currentPrice',
        :'vested_shares' => :'vestedShares',
        :'vested_shares_next_year' => :'vestedSharesNextYear',
        :'vested_shares_by_date' => :'vestedSharesByDate',
        :'vest_end_date' => :'vestEndDate',
        :'cancel_date' => :'cancelDate'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'stock' => :'String',
        :'date' => :'Date',
        :'vest_date' => :'Date',
        :'expire_date' => :'Date',
        :'shares' => :'Float',
        :'price' => :'Float',
        :'type' => :'String',
        :'vest' => :'String',
        :'original_price' => :'Float',
        :'current_price' => :'Float',
        :'vested_shares' => :'Float',
        :'vested_shares_next_year' => :'Float',
        :'vested_shares_by_date' => :'Hash<String, Float>',
        :'vest_end_date' => :'Date',
        :'cancel_date' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'stock')
        self.stock = attributes[:'stock']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'vestDate')
        self.vest_date = attributes[:'vestDate']
      end

      if attributes.has_key?(:'expireDate')
        self.expire_date = attributes[:'expireDate']
      end

      if attributes.has_key?(:'shares')
        self.shares = attributes[:'shares']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'vest')
        self.vest = attributes[:'vest']
      end

      if attributes.has_key?(:'originalPrice')
        self.original_price = attributes[:'originalPrice']
      end

      if attributes.has_key?(:'currentPrice')
        self.current_price = attributes[:'currentPrice']
      end

      if attributes.has_key?(:'vestedShares')
        self.vested_shares = attributes[:'vestedShares']
      end

      if attributes.has_key?(:'vestedSharesNextYear')
        self.vested_shares_next_year = attributes[:'vestedSharesNextYear']
      end

      if attributes.has_key?(:'vestedSharesByDate')
        if (value = attributes[:'vestedSharesByDate']).is_a?(Hash)
          self.vested_shares_by_date = value
        end
      end

      if attributes.has_key?(:'vestEndDate')
        self.vest_end_date = attributes[:'vestEndDate']
      end

      if attributes.has_key?(:'cancelDate')
        self.cancel_date = attributes[:'cancelDate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @stock.nil?
        invalid_properties.push('invalid value for "stock", stock cannot be nil.')
      end

      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @shares.nil?
        invalid_properties.push('invalid value for "shares", shares cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @vest.nil?
        invalid_properties.push('invalid value for "vest", vest cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @stock.nil?
      return false if @date.nil?
      return false if @shares.nil?
      return false if @price.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['NSO', 'ISO', 'RSU'])
      return false unless type_validator.valid?(@type)
      return false if @vest.nil?
      vest_validator = EnumAttributeValidator.new('String', ['M_10M_MINUS_1M', 'M_11M_MINUS_1M', 'M_13M_MINUS_1M', 'M_14M_MINUS_1M', 'M_15M_MINUS_1M', 'M_16M_MINUS_1M', 'M_17M_MINUS_1M', 'M_18M_MINUS_1M', 'M_19M_MINUS_1M', 'M_1Y_MINUS_1M', 'M_20M_MINUS_1M', 'M_21M_MINUS_1M', 'M_22M_MINUS_1M', 'M_23M_MINUS_1M', 'M_2M_MINUS_1M', 'M_2Y_MINUS_1M', 'M_30M_MINUS_1M', 'M_31M_MINUS_1M', 'M_32M_MINUS_1M', 'M_33M_MINUS_1M', 'M_34M_MINUS_1M', 'M_35M_MINUS_1M', 'M_3M_MINUS_1M', 'M_3Y_MINUS_1M', 'M_4M_MINUS_1M', 'M_54M_MINUS_1M', 'M_5M_MINUS_1M', 'M_6M_MINUS_1M', 'M_7M_MINUS_1M', 'M_8M_MINUS_1M', 'M_9M_MINUS_1M', 'M_0Y_0Y', 'M_12M_0M', 'M_14M_1M', 'M_18M_0Y', 'M_19M_1M', 'M_1Y_1M', 'M_22M_0M', 'M_28M_0M', 'M_29M_1M', 'M_2Y_0Y', 'M_2Y_1M', 'M_2Y_1Y', 'M_33M_0M', 'M_39M_0M', 'M_3M_0Y', 'M_3M_3M', 'M_3Y_0Y', 'M_3Y_1M', 'M_3Y_1Y', 'M_40M_0M', 'M_42M_0Y', 'M_43M_0M', 'M_44M_0M', 'M_47M_0M', 'M_4Y_0Y', 'M_4Y_1M', 'M_4Y_1Y', 'M_51M_0M', 'M_52M_0M', 'M_54M_0M', 'M_56M_0M', 'M_58M_0M', 'M_5M_0Y', 'M_5M_5M', 'M_5Y_0Y', 'M_5Y_1Y', 'M_6M_0Y', 'M_6M_1M', 'M_6M_6M', 'M_6Y_1Y', 'Y_1Y_0Y', 'Y_1Y_1Y', 'Y_3Y_0Y', 'Y_4Y_0Y', 'Q_1Y_0Y', 'Q_2Y_0Y', 'Q_2Y_1Y', 'Q_3M_0Y', 'Q_3Y_1Y', 'Q_4Y_0Y', 'Q_4Y_1Y', 'Q_4Y_6M', 'Q_4Y_40_30_15_15', 'Q_4Y_0_20_30_50', 'Q_4Y_10_20_30_40_1Y', 'Q_4Y_15_20_30_35_1Y', 'Q_42M_18_6', 'Y_4Y_0_0_50_50', 'Y_4Y_0_20_40_40', 'Y_4Y_10_20_20_50', 'Y_4Y_10_20_30_40', 'Y_4Y_15_20_30_35', 'Y_7Y_0_0_40_0_30_0_30', 'VESTED'])
      return false unless vest_validator.valid?(@vest)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['NSO', 'ISO', 'RSU'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vest Object to be assigned
    def vest=(vest)
      validator = EnumAttributeValidator.new('String', ['M_10M_MINUS_1M', 'M_11M_MINUS_1M', 'M_13M_MINUS_1M', 'M_14M_MINUS_1M', 'M_15M_MINUS_1M', 'M_16M_MINUS_1M', 'M_17M_MINUS_1M', 'M_18M_MINUS_1M', 'M_19M_MINUS_1M', 'M_1Y_MINUS_1M', 'M_20M_MINUS_1M', 'M_21M_MINUS_1M', 'M_22M_MINUS_1M', 'M_23M_MINUS_1M', 'M_2M_MINUS_1M', 'M_2Y_MINUS_1M', 'M_30M_MINUS_1M', 'M_31M_MINUS_1M', 'M_32M_MINUS_1M', 'M_33M_MINUS_1M', 'M_34M_MINUS_1M', 'M_35M_MINUS_1M', 'M_3M_MINUS_1M', 'M_3Y_MINUS_1M', 'M_4M_MINUS_1M', 'M_54M_MINUS_1M', 'M_5M_MINUS_1M', 'M_6M_MINUS_1M', 'M_7M_MINUS_1M', 'M_8M_MINUS_1M', 'M_9M_MINUS_1M', 'M_0Y_0Y', 'M_12M_0M', 'M_14M_1M', 'M_18M_0Y', 'M_19M_1M', 'M_1Y_1M', 'M_22M_0M', 'M_28M_0M', 'M_29M_1M', 'M_2Y_0Y', 'M_2Y_1M', 'M_2Y_1Y', 'M_33M_0M', 'M_39M_0M', 'M_3M_0Y', 'M_3M_3M', 'M_3Y_0Y', 'M_3Y_1M', 'M_3Y_1Y', 'M_40M_0M', 'M_42M_0Y', 'M_43M_0M', 'M_44M_0M', 'M_47M_0M', 'M_4Y_0Y', 'M_4Y_1M', 'M_4Y_1Y', 'M_51M_0M', 'M_52M_0M', 'M_54M_0M', 'M_56M_0M', 'M_58M_0M', 'M_5M_0Y', 'M_5M_5M', 'M_5Y_0Y', 'M_5Y_1Y', 'M_6M_0Y', 'M_6M_1M', 'M_6M_6M', 'M_6Y_1Y', 'Y_1Y_0Y', 'Y_1Y_1Y', 'Y_3Y_0Y', 'Y_4Y_0Y', 'Q_1Y_0Y', 'Q_2Y_0Y', 'Q_2Y_1Y', 'Q_3M_0Y', 'Q_3Y_1Y', 'Q_4Y_0Y', 'Q_4Y_1Y', 'Q_4Y_6M', 'Q_4Y_40_30_15_15', 'Q_4Y_0_20_30_50', 'Q_4Y_10_20_30_40_1Y', 'Q_4Y_15_20_30_35_1Y', 'Q_42M_18_6', 'Y_4Y_0_0_50_50', 'Y_4Y_0_20_40_40', 'Y_4Y_10_20_20_50', 'Y_4Y_10_20_30_40', 'Y_4Y_15_20_30_35', 'Y_7Y_0_0_40_0_30_0_30', 'VESTED'])
      unless validator.valid?(vest)
        fail ArgumentError, 'invalid value for "vest", must be one of #{validator.allowable_values}.'
      end
      @vest = vest
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          stock == o.stock &&
          date == o.date &&
          vest_date == o.vest_date &&
          expire_date == o.expire_date &&
          shares == o.shares &&
          price == o.price &&
          type == o.type &&
          vest == o.vest &&
          original_price == o.original_price &&
          current_price == o.current_price &&
          vested_shares == o.vested_shares &&
          vested_shares_next_year == o.vested_shares_next_year &&
          vested_shares_by_date == o.vested_shares_by_date &&
          vest_end_date == o.vest_end_date &&
          cancel_date == o.cancel_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, stock, date, vest_date, expire_date, shares, price, type, vest, original_price, current_price, vested_shares, vested_shares_next_year, vested_shares_by_date, vest_end_date, cancel_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
