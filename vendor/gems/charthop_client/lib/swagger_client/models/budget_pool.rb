=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class BudgetPool
    # the type of budget pool
    attr_accessor :type

    # label of budget pool
    attr_accessor :label

    # basis type
    attr_accessor :basis_type

    # budget amount when basis type is FIXED
    attr_accessor :fixed_amount

    # percentage of original when basis type is PERCENTAGE
    attr_accessor :percent_increase

    # custom expression to determine budget basis amount when basis type is CUSTOM
    attr_accessor :custom_basis_expr

    # optional custom expression to determine custom amount for cost
    attr_accessor :custom_cost_expr

    # optional custom expression to determine final calculated amount
    attr_accessor :custom_calc_expr

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'label' => :'label',
        :'basis_type' => :'basisType',
        :'fixed_amount' => :'fixedAmount',
        :'percent_increase' => :'percentIncrease',
        :'custom_basis_expr' => :'customBasisExpr',
        :'custom_cost_expr' => :'customCostExpr',
        :'custom_calc_expr' => :'customCalcExpr'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'label' => :'String',
        :'basis_type' => :'String',
        :'fixed_amount' => :'Object',
        :'percent_increase' => :'Float',
        :'custom_basis_expr' => :'String',
        :'custom_cost_expr' => :'String',
        :'custom_calc_expr' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'basisType')
        self.basis_type = attributes[:'basisType']
      end

      if attributes.has_key?(:'fixedAmount')
        self.fixed_amount = attributes[:'fixedAmount']
      end

      if attributes.has_key?(:'percentIncrease')
        self.percent_increase = attributes[:'percentIncrease']
      end

      if attributes.has_key?(:'customBasisExpr')
        self.custom_basis_expr = attributes[:'customBasisExpr']
      end

      if attributes.has_key?(:'customCostExpr')
        self.custom_cost_expr = attributes[:'customCostExpr']
      end

      if attributes.has_key?(:'customCalcExpr')
        self.custom_calc_expr = attributes[:'customCalcExpr']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @label.nil?
        invalid_properties.push('invalid value for "label", label cannot be nil.')
      end

      if @basis_type.nil?
        invalid_properties.push('invalid value for "basis_type", basis_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      return false if @label.nil?
      return false if @basis_type.nil?
      basis_type_validator = EnumAttributeValidator.new('String', ['FIXED', 'PERCENTAGE', 'CUSTOM', 'HIDDEN'])
      return false unless basis_type_validator.valid?(@basis_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] basis_type Object to be assigned
    def basis_type=(basis_type)
      validator = EnumAttributeValidator.new('String', ['FIXED', 'PERCENTAGE', 'CUSTOM', 'HIDDEN'])
      unless validator.valid?(basis_type)
        fail ArgumentError, 'invalid value for "basis_type", must be one of #{validator.allowable_values}.'
      end
      @basis_type = basis_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          label == o.label &&
          basis_type == o.basis_type &&
          fixed_amount == o.fixed_amount &&
          percent_increase == o.percent_increase &&
          custom_basis_expr == o.custom_basis_expr &&
          custom_cost_expr == o.custom_cost_expr &&
          custom_calc_expr == o.custom_calc_expr
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, label, basis_type, fixed_amount, percent_increase, custom_basis_expr, custom_cost_expr, custom_calc_expr].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
