=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class PartialMessage
    # globally unique id
    attr_accessor :id

    # parent organization id
    attr_accessor :org_id

    # type of message
    attr_accessor :type

    # type of notification (SUCCESS, ERR, ANNOUNCEMENT etc.)
    attr_accessor :notification_type

    # user who receives the message
    attr_accessor :user_id

    # message content
    attr_accessor :content

    # message title
    attr_accessor :title

    # link to message content (if applicable)
    attr_accessor :message_url

    # key of message if applicable (e.g. product-tour, import-complete-{id})
    attr_accessor :key

    # read timestamp
    attr_accessor :read_at

    # seen timestamp
    attr_accessor :seen_at

    # created by user id
    attr_accessor :create_id

    # created timestamp
    attr_accessor :create_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'org_id' => :'orgId',
        :'type' => :'type',
        :'notification_type' => :'notificationType',
        :'user_id' => :'userId',
        :'content' => :'content',
        :'title' => :'title',
        :'message_url' => :'messageUrl',
        :'key' => :'key',
        :'read_at' => :'readAt',
        :'seen_at' => :'seenAt',
        :'create_id' => :'createId',
        :'create_at' => :'createAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'org_id' => :'String',
        :'type' => :'String',
        :'notification_type' => :'String',
        :'user_id' => :'String',
        :'content' => :'String',
        :'title' => :'String',
        :'message_url' => :'String',
        :'key' => :'String',
        :'read_at' => :'String',
        :'seen_at' => :'String',
        :'create_id' => :'String',
        :'create_at' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'orgId')
        self.org_id = attributes[:'orgId']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'notificationType')
        self.notification_type = attributes[:'notificationType']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'messageUrl')
        self.message_url = attributes[:'messageUrl']
      end

      if attributes.has_key?(:'key')
        self.key = attributes[:'key']
      end

      if attributes.has_key?(:'readAt')
        self.read_at = attributes[:'readAt']
      end

      if attributes.has_key?(:'seenAt')
        self.seen_at = attributes[:'seenAt']
      end

      if attributes.has_key?(:'createId')
        self.create_id = attributes[:'createId']
      end

      if attributes.has_key?(:'createAt')
        self.create_at = attributes[:'createAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ['CHAT', 'EMAIL', 'WEB'])
      return false unless type_validator.valid?(@type)
      notification_type_validator = EnumAttributeValidator.new('String', ['SUCCESS', 'WARN', 'ERROR', 'COMMENT', 'TASK_COMPLETED', 'TASK_ASSIGNED', 'REMINDER', 'ANNOUNCEMENT'])
      return false unless notification_type_validator.valid?(@notification_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['CHAT', 'EMAIL', 'WEB'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] notification_type Object to be assigned
    def notification_type=(notification_type)
      validator = EnumAttributeValidator.new('String', ['SUCCESS', 'WARN', 'ERROR', 'COMMENT', 'TASK_COMPLETED', 'TASK_ASSIGNED', 'REMINDER', 'ANNOUNCEMENT'])
      unless validator.valid?(notification_type)
        fail ArgumentError, 'invalid value for "notification_type", must be one of #{validator.allowable_values}.'
      end
      @notification_type = notification_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          org_id == o.org_id &&
          type == o.type &&
          notification_type == o.notification_type &&
          user_id == o.user_id &&
          content == o.content &&
          title == o.title &&
          message_url == o.message_url &&
          key == o.key &&
          read_at == o.read_at &&
          seen_at == o.seen_at &&
          create_id == o.create_id &&
          create_at == o.create_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, org_id, type, notification_type, user_id, content, title, message_url, key, read_at, seen_at, create_id, create_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
