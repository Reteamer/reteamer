=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class UpdateGoal
    # human-readable label of goal
    attr_accessor :label

    # unique slug of goal
    attr_accessor :slug

    # type of goal
    attr_accessor :type

    # goal fields (description)
    attr_accessor :fields

    # goal results (defined outcome metrics)
    attr_accessor :results

    # parent goal id
    attr_accessor :parent_goal_id

    # single job who owns this goal outcome
    attr_accessor :owner_job_id

    # list of job ids who share responsibility for this goal outcome
    attr_accessor :shared_job_ids

    # list of group ids who share responsibility for this goal outcome
    attr_accessor :group_ids

    # users who have been granted access to this goal
    attr_accessor :share_access

    # view sensitivity of this goal
    attr_accessor :sensitive

    # color of goal
    attr_accessor :color

    # Date this goal begins. In the context of REVIEW goals, the date the review cycle begins.
    attr_accessor :start_date

    # Date this goal ends, or is completed. In the context of REVIEW goals, the date the review cycle ends.
    attr_accessor :end_date

    # status of this Goal - DRAFT, ACTIVE, DONE
    attr_accessor :status

    # timestamp when the status of this Goal was set to done
    attr_accessor :done_at

    # number of todo's associated with this goal
    attr_accessor :todo_count

    # number of todo's associated with this goal that are done
    attr_accessor :todo_done_count

    # number of people included in this goal
    attr_accessor :people_included_count

    # Query for which people/jobs can be included in the review.
    attr_accessor :query

    # For COMP_REVIEW goals, the columns shown on attached scenarios by default. Listed by field name.
    attr_accessor :columns

    # For the specified field name, use this expression to lock the fields
    attr_accessor :locked_field_map

    # Budget pools associated with this goal used as defaults. Can be overridden by individual scenarios.
    attr_accessor :budget_pools

    # Goal specific options
    attr_accessor :goal_options

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'label' => :'label',
        :'slug' => :'slug',
        :'type' => :'type',
        :'fields' => :'fields',
        :'results' => :'results',
        :'parent_goal_id' => :'parentGoalId',
        :'owner_job_id' => :'ownerJobId',
        :'shared_job_ids' => :'sharedJobIds',
        :'group_ids' => :'groupIds',
        :'share_access' => :'shareAccess',
        :'sensitive' => :'sensitive',
        :'color' => :'color',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'status' => :'status',
        :'done_at' => :'doneAt',
        :'todo_count' => :'todoCount',
        :'todo_done_count' => :'todoDoneCount',
        :'people_included_count' => :'peopleIncludedCount',
        :'query' => :'query',
        :'columns' => :'columns',
        :'locked_field_map' => :'lockedFieldMap',
        :'budget_pools' => :'budgetPools',
        :'goal_options' => :'goalOptions'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'label' => :'String',
        :'slug' => :'String',
        :'type' => :'String',
        :'fields' => :'Object',
        :'results' => :'Array<GoalResult>',
        :'parent_goal_id' => :'String',
        :'owner_job_id' => :'String',
        :'shared_job_ids' => :'Array<String>',
        :'group_ids' => :'Array<String>',
        :'share_access' => :'Array<ShareAccess>',
        :'sensitive' => :'String',
        :'color' => :'String',
        :'start_date' => :'Date',
        :'end_date' => :'Date',
        :'status' => :'String',
        :'done_at' => :'String',
        :'todo_count' => :'Integer',
        :'todo_done_count' => :'Integer',
        :'people_included_count' => :'Integer',
        :'query' => :'String',
        :'columns' => :'Array<String>',
        :'locked_field_map' => :'Hash<String, String>',
        :'budget_pools' => :'Hash<String, BudgetPool>',
        :'goal_options' => :'GoalOptions'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.has_key?(:'results')
        if (value = attributes[:'results']).is_a?(Array)
          self.results = value
        end
      end

      if attributes.has_key?(:'parentGoalId')
        self.parent_goal_id = attributes[:'parentGoalId']
      end

      if attributes.has_key?(:'ownerJobId')
        self.owner_job_id = attributes[:'ownerJobId']
      end

      if attributes.has_key?(:'sharedJobIds')
        if (value = attributes[:'sharedJobIds']).is_a?(Array)
          self.shared_job_ids = value
        end
      end

      if attributes.has_key?(:'groupIds')
        if (value = attributes[:'groupIds']).is_a?(Array)
          self.group_ids = value
        end
      end

      if attributes.has_key?(:'shareAccess')
        if (value = attributes[:'shareAccess']).is_a?(Array)
          self.share_access = value
        end
      end

      if attributes.has_key?(:'sensitive')
        self.sensitive = attributes[:'sensitive']
      end

      if attributes.has_key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'doneAt')
        self.done_at = attributes[:'doneAt']
      end

      if attributes.has_key?(:'todoCount')
        self.todo_count = attributes[:'todoCount']
      end

      if attributes.has_key?(:'todoDoneCount')
        self.todo_done_count = attributes[:'todoDoneCount']
      end

      if attributes.has_key?(:'peopleIncludedCount')
        self.people_included_count = attributes[:'peopleIncludedCount']
      end

      if attributes.has_key?(:'query')
        self.query = attributes[:'query']
      end

      if attributes.has_key?(:'columns')
        if (value = attributes[:'columns']).is_a?(Array)
          self.columns = value
        end
      end

      if attributes.has_key?(:'lockedFieldMap')
        if (value = attributes[:'lockedFieldMap']).is_a?(Hash)
          self.locked_field_map = value
        end
      end

      if attributes.has_key?(:'budgetPools')
        if (value = attributes[:'budgetPools']).is_a?(Hash)
          self.budget_pools = value
        end
      end

      if attributes.has_key?(:'goalOptions')
        self.goal_options = attributes[:'goalOptions']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@color.nil? && @color !~ Regexp.new(/^#[a-f0-9]{6}$/)
        invalid_properties.push('invalid value for "color", must conform to the pattern /^#[a-f0-9]{6}$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ['BUDGET', 'REVIEW', 'COMP_REVIEW'])
      return false unless type_validator.valid?(@type)
      sensitive_validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      return false unless sensitive_validator.valid?(@sensitive)
      return false if !@color.nil? && @color !~ Regexp.new(/^#[a-f0-9]{6}$/)
      status_validator = EnumAttributeValidator.new('String', ['DRAFT', 'ACTIVE', 'DONE'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['BUDGET', 'REVIEW', 'COMP_REVIEW'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sensitive Object to be assigned
    def sensitive=(sensitive)
      validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      unless validator.valid?(sensitive)
        fail ArgumentError, 'invalid value for "sensitive", must be one of #{validator.allowable_values}.'
      end
      @sensitive = sensitive
    end

    # Custom attribute writer method with validation
    # @param [Object] color Value to be assigned
    def color=(color)
      if !color.nil? && color !~ Regexp.new(/^#[a-f0-9]{6}$/)
        fail ArgumentError, 'invalid value for "color", must conform to the pattern /^#[a-f0-9]{6}$/.'
      end

      @color = color
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['DRAFT', 'ACTIVE', 'DONE'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          label == o.label &&
          slug == o.slug &&
          type == o.type &&
          fields == o.fields &&
          results == o.results &&
          parent_goal_id == o.parent_goal_id &&
          owner_job_id == o.owner_job_id &&
          shared_job_ids == o.shared_job_ids &&
          group_ids == o.group_ids &&
          share_access == o.share_access &&
          sensitive == o.sensitive &&
          color == o.color &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          status == o.status &&
          done_at == o.done_at &&
          todo_count == o.todo_count &&
          todo_done_count == o.todo_done_count &&
          people_included_count == o.people_included_count &&
          query == o.query &&
          columns == o.columns &&
          locked_field_map == o.locked_field_map &&
          budget_pools == o.budget_pools &&
          goal_options == o.goal_options
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [label, slug, type, fields, results, parent_goal_id, owner_job_id, shared_job_ids, group_ids, share_access, sensitive, color, start_date, end_date, status, done_at, todo_count, todo_done_count, people_included_count, query, columns, locked_field_map, budget_pools, goal_options].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
