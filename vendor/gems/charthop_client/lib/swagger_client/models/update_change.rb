=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class UpdateChange
    # date of change
    attr_accessor :date

    # for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change
    attr_accessor :announce_date

    # whether the change is active or not
    attr_accessor :status

    # for DEPART changes, the type of departure
    attr_accessor :depart_type

    # for DEPART changes, whether the departure is regrettable
    attr_accessor :depart_regret

    # the reason of the change
    attr_accessor :reason

    # if it's a promotion or a demotion
    attr_accessor :promotion_type

    # for CREATE changes, the initial job data; for other changes, the title and groups at the time of change
    attr_accessor :job

    # for UPDATE changes, the data being updated
    attr_accessor :update

    # note on the change
    attr_accessor :note

    # approval/rejection note
    attr_accessor :approval_note

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'date' => :'date',
        :'announce_date' => :'announceDate',
        :'status' => :'status',
        :'depart_type' => :'departType',
        :'depart_regret' => :'departRegret',
        :'reason' => :'reason',
        :'promotion_type' => :'promotionType',
        :'job' => :'job',
        :'update' => :'update',
        :'note' => :'note',
        :'approval_note' => :'approvalNote'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'date' => :'Date',
        :'announce_date' => :'Date',
        :'status' => :'String',
        :'depart_type' => :'String',
        :'depart_regret' => :'String',
        :'reason' => :'String',
        :'promotion_type' => :'String',
        :'job' => :'PartialJob',
        :'update' => :'JobUpdate',
        :'note' => :'String',
        :'approval_note' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'announceDate')
        self.announce_date = attributes[:'announceDate']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'departType')
        self.depart_type = attributes[:'departType']
      end

      if attributes.has_key?(:'departRegret')
        self.depart_regret = attributes[:'departRegret']
      end

      if attributes.has_key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.has_key?(:'promotionType')
        self.promotion_type = attributes[:'promotionType']
      end

      if attributes.has_key?(:'job')
        self.job = attributes[:'job']
      end

      if attributes.has_key?(:'update')
        self.update = attributes[:'update']
      end

      if attributes.has_key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.has_key?(:'approvalNote')
        self.approval_note = attributes[:'approvalNote']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'STRUCK', 'CONFLICT', 'INACTIVE', 'PROPOSED'])
      return false unless status_validator.valid?(@status)
      depart_type_validator = EnumAttributeValidator.new('String', ['VOLUNTARY', 'INVOLUNTARY'])
      return false unless depart_type_validator.valid?(@depart_type)
      depart_regret_validator = EnumAttributeValidator.new('String', ['REGRET', 'NONREGRET'])
      return false unless depart_regret_validator.valid?(@depart_regret)
      promotion_type_validator = EnumAttributeValidator.new('String', ['PROMOTION', 'DEMOTION', 'NONE'])
      return false unless promotion_type_validator.valid?(@promotion_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'STRUCK', 'CONFLICT', 'INACTIVE', 'PROPOSED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] depart_type Object to be assigned
    def depart_type=(depart_type)
      validator = EnumAttributeValidator.new('String', ['VOLUNTARY', 'INVOLUNTARY'])
      unless validator.valid?(depart_type)
        fail ArgumentError, 'invalid value for "depart_type", must be one of #{validator.allowable_values}.'
      end
      @depart_type = depart_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] depart_regret Object to be assigned
    def depart_regret=(depart_regret)
      validator = EnumAttributeValidator.new('String', ['REGRET', 'NONREGRET'])
      unless validator.valid?(depart_regret)
        fail ArgumentError, 'invalid value for "depart_regret", must be one of #{validator.allowable_values}.'
      end
      @depart_regret = depart_regret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promotion_type Object to be assigned
    def promotion_type=(promotion_type)
      validator = EnumAttributeValidator.new('String', ['PROMOTION', 'DEMOTION', 'NONE'])
      unless validator.valid?(promotion_type)
        fail ArgumentError, 'invalid value for "promotion_type", must be one of #{validator.allowable_values}.'
      end
      @promotion_type = promotion_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          date == o.date &&
          announce_date == o.announce_date &&
          status == o.status &&
          depart_type == o.depart_type &&
          depart_regret == o.depart_regret &&
          reason == o.reason &&
          promotion_type == o.promotion_type &&
          job == o.job &&
          update == o.update &&
          note == o.note &&
          approval_note == o.approval_note
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [date, announce_date, status, depart_type, depart_regret, reason, promotion_type, job, update, note, approval_note].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
