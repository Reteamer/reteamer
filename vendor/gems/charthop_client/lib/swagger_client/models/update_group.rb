=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class UpdateGroup
    # unique name of group
    attr_accessor :name

    # unique slug of group
    attr_accessor :slug

    # external code identifier of the group
    attr_accessor :code

    # aliases for group
    attr_accessor :aliases

    # a list of group leaders, or null if the leader of the group should be automatically derived from the org chart
    attr_accessor :lead_job_ids

    # group fields (currently only description)
    attr_accessor :fields

    # address of the group, for LOCATION type only
    attr_accessor :address

    # level of the group, for BAND type only
    attr_accessor :level

    # Job function category of the group, for DEPARTMENT type only
    attr_accessor :func

    # Type of the location, for LOCATION type only
    attr_accessor :location_type

    # parent group id
    attr_accessor :parent_group_id

    # timezone of the group, for LOCATION type only
    attr_accessor :timezone

    # compensation range minimums
    attr_accessor :comp_min

    # compensation range maximums
    attr_accessor :comp_max

    # path to profile image
    attr_accessor :image_path

    # color of group
    attr_accessor :color

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'slug' => :'slug',
        :'code' => :'code',
        :'aliases' => :'aliases',
        :'lead_job_ids' => :'leadJobIds',
        :'fields' => :'fields',
        :'address' => :'address',
        :'level' => :'level',
        :'func' => :'func',
        :'location_type' => :'locationType',
        :'parent_group_id' => :'parentGroupId',
        :'timezone' => :'timezone',
        :'comp_min' => :'compMin',
        :'comp_max' => :'compMax',
        :'image_path' => :'imagePath',
        :'color' => :'color'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'slug' => :'String',
        :'code' => :'String',
        :'aliases' => :'Array<String>',
        :'lead_job_ids' => :'Array<String>',
        :'fields' => :'Object',
        :'address' => :'Address',
        :'level' => :'Integer',
        :'func' => :'String',
        :'location_type' => :'String',
        :'parent_group_id' => :'String',
        :'timezone' => :'String',
        :'comp_min' => :'Comp',
        :'comp_max' => :'Comp',
        :'image_path' => :'String',
        :'color' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'aliases')
        if (value = attributes[:'aliases']).is_a?(Array)
          self.aliases = value
        end
      end

      if attributes.has_key?(:'leadJobIds')
        if (value = attributes[:'leadJobIds']).is_a?(Array)
          self.lead_job_ids = value
        end
      end

      if attributes.has_key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'level')
        self.level = attributes[:'level']
      end

      if attributes.has_key?(:'func')
        self.func = attributes[:'func']
      end

      if attributes.has_key?(:'locationType')
        self.location_type = attributes[:'locationType']
      end

      if attributes.has_key?(:'parentGroupId')
        self.parent_group_id = attributes[:'parentGroupId']
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.has_key?(:'compMin')
        self.comp_min = attributes[:'compMin']
      end

      if attributes.has_key?(:'compMax')
        self.comp_max = attributes[:'compMax']
      end

      if attributes.has_key?(:'imagePath')
        self.image_path = attributes[:'imagePath']
      end

      if attributes.has_key?(:'color')
        self.color = attributes[:'color']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]*$/)
        invalid_properties.push('invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]*$/.')
      end

      if !@color.nil? && @color !~ Regexp.new(/^#[a-f0-9]{6}$/)
        invalid_properties.push('invalid value for "color", must conform to the pattern /^#[a-f0-9]{6}$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      func_validator = EnumAttributeValidator.new('String', ['BD', 'CS', 'DESIGN', 'ENGINEERING', 'EXECUTIVE', 'FINANCE', 'GENERAL', 'IT', 'LEGAL', 'MARKETING', 'OPERATIONS', 'PEOPLE', 'PRODUCT', 'RECRUITING', 'SALES', 'SECURITY', 'SUPPORT'])
      return false unless func_validator.valid?(@func)
      location_type_validator = EnumAttributeValidator.new('String', ['OFFICE', 'REMOTE'])
      return false unless location_type_validator.valid?(@location_type)
      return false if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]*$/)
      return false if !@color.nil? && @color !~ Regexp.new(/^#[a-f0-9]{6}$/)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] func Object to be assigned
    def func=(func)
      validator = EnumAttributeValidator.new('String', ['BD', 'CS', 'DESIGN', 'ENGINEERING', 'EXECUTIVE', 'FINANCE', 'GENERAL', 'IT', 'LEGAL', 'MARKETING', 'OPERATIONS', 'PEOPLE', 'PRODUCT', 'RECRUITING', 'SALES', 'SECURITY', 'SUPPORT'])
      unless validator.valid?(func)
        fail ArgumentError, 'invalid value for "func", must be one of #{validator.allowable_values}.'
      end
      @func = func
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location_type Object to be assigned
    def location_type=(location_type)
      validator = EnumAttributeValidator.new('String', ['OFFICE', 'REMOTE'])
      unless validator.valid?(location_type)
        fail ArgumentError, 'invalid value for "location_type", must be one of #{validator.allowable_values}.'
      end
      @location_type = location_type
    end

    # Custom attribute writer method with validation
    # @param [Object] image_path Value to be assigned
    def image_path=(image_path)
      if !image_path.nil? && image_path !~ Regexp.new(/^[a-z0-9.-_\/]*$/)
        fail ArgumentError, 'invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]*$/.'
      end

      @image_path = image_path
    end

    # Custom attribute writer method with validation
    # @param [Object] color Value to be assigned
    def color=(color)
      if !color.nil? && color !~ Regexp.new(/^#[a-f0-9]{6}$/)
        fail ArgumentError, 'invalid value for "color", must conform to the pattern /^#[a-f0-9]{6}$/.'
      end

      @color = color
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          slug == o.slug &&
          code == o.code &&
          aliases == o.aliases &&
          lead_job_ids == o.lead_job_ids &&
          fields == o.fields &&
          address == o.address &&
          level == o.level &&
          func == o.func &&
          location_type == o.location_type &&
          parent_group_id == o.parent_group_id &&
          timezone == o.timezone &&
          comp_min == o.comp_min &&
          comp_max == o.comp_max &&
          image_path == o.image_path &&
          color == o.color
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, slug, code, aliases, lead_job_ids, fields, address, level, func, location_type, parent_group_id, timezone, comp_min, comp_max, image_path, color].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
