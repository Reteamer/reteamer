=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class User
    # globally unique id
    attr_accessor :id

    # if the user is an app user, the id of the app
    attr_accessor :app_id

    # full name of user
    attr_accessor :name

    # email address of user
    attr_accessor :email

    # password of user (encrypted)
    attr_accessor :password

    # list of member orgs with permission levels
    attr_accessor :orgs

    # path to full-sized profile image in storage
    attr_accessor :image_path

    # current status of user
    attr_accessor :status

    # type of user
    attr_accessor :type

    # for apps, options (specific options are specific to the particular app); for users, user-set preferences
    attr_accessor :options

    # write-only secrets; the content of these secrets are not retrievable via the external-facing API
    attr_accessor :secrets

    # last activity timestamp
    attr_accessor :active_at

    # last login timestamp
    attr_accessor :login_at

    # number of consecutive failed logins
    attr_accessor :login_fail_count

    # job title, if available
    attr_accessor :title

    # last IP address used
    attr_accessor :remote_ip

    # created by user id
    attr_accessor :create_id

    # created timestamp
    attr_accessor :create_at

    # last updated by user id
    attr_accessor :update_id

    # last updated timestamp
    attr_accessor :update_at

    # email verified timestamp, if the email has been verified
    attr_accessor :verify_at

    # list of registered 2FA registered credentials
    attr_accessor :mfas

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'app_id' => :'appId',
        :'name' => :'name',
        :'email' => :'email',
        :'password' => :'password',
        :'orgs' => :'orgs',
        :'image_path' => :'imagePath',
        :'status' => :'status',
        :'type' => :'type',
        :'options' => :'options',
        :'secrets' => :'secrets',
        :'active_at' => :'activeAt',
        :'login_at' => :'loginAt',
        :'login_fail_count' => :'loginFailCount',
        :'title' => :'title',
        :'remote_ip' => :'remoteIp',
        :'create_id' => :'createId',
        :'create_at' => :'createAt',
        :'update_id' => :'updateId',
        :'update_at' => :'updateAt',
        :'verify_at' => :'verifyAt',
        :'mfas' => :'mfas'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'app_id' => :'String',
        :'name' => :'Name',
        :'email' => :'String',
        :'password' => :'String',
        :'orgs' => :'Array<OrgAccess>',
        :'image_path' => :'String',
        :'status' => :'String',
        :'type' => :'String',
        :'options' => :'Object',
        :'secrets' => :'Object',
        :'active_at' => :'String',
        :'login_at' => :'String',
        :'login_fail_count' => :'Integer',
        :'title' => :'String',
        :'remote_ip' => :'String',
        :'create_id' => :'String',
        :'create_at' => :'String',
        :'update_id' => :'String',
        :'update_at' => :'String',
        :'verify_at' => :'String',
        :'mfas' => :'Array<WebRegisteredCredential>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'appId')
        self.app_id = attributes[:'appId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'orgs')
        if (value = attributes[:'orgs']).is_a?(Array)
          self.orgs = value
        end
      end

      if attributes.has_key?(:'imagePath')
        self.image_path = attributes[:'imagePath']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'options')
        self.options = attributes[:'options']
      end

      if attributes.has_key?(:'secrets')
        self.secrets = attributes[:'secrets']
      end

      if attributes.has_key?(:'activeAt')
        self.active_at = attributes[:'activeAt']
      end

      if attributes.has_key?(:'loginAt')
        self.login_at = attributes[:'loginAt']
      end

      if attributes.has_key?(:'loginFailCount')
        self.login_fail_count = attributes[:'loginFailCount']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'remoteIp')
        self.remote_ip = attributes[:'remoteIp']
      end

      if attributes.has_key?(:'createId')
        self.create_id = attributes[:'createId']
      end

      if attributes.has_key?(:'createAt')
        self.create_at = attributes[:'createAt']
      end

      if attributes.has_key?(:'updateId')
        self.update_id = attributes[:'updateId']
      end

      if attributes.has_key?(:'updateAt')
        self.update_at = attributes[:'updateAt']
      end

      if attributes.has_key?(:'verifyAt')
        self.verify_at = attributes[:'verifyAt']
      end

      if attributes.has_key?(:'mfas')
        if (value = attributes[:'mfas']).is_a?(Array)
          self.mfas = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if !@email.nil? && @email !~ Regexp.new(/.+@.+\\..+/)
        invalid_properties.push('invalid value for "email", must conform to the pattern /.+@.+\\..+/.')
      end

      if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        invalid_properties.push('invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if !@email.nil? && @email !~ Regexp.new(/.+@.+\\..+/)
      return false if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
      status_validator = EnumAttributeValidator.new('String', ['SUPERUSER', 'NORMAL', 'INACTIVE', 'UNINSTALLED'])
      return false unless status_validator.valid?(@status)
      type_validator = EnumAttributeValidator.new('String', ['USER', 'APP'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email !~ Regexp.new(/.+@.+\\..+/)
        fail ArgumentError, 'invalid value for "email", must conform to the pattern /.+@.+\\..+/.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] image_path Value to be assigned
    def image_path=(image_path)
      if !image_path.nil? && image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        fail ArgumentError, 'invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.'
      end

      @image_path = image_path
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['SUPERUSER', 'NORMAL', 'INACTIVE', 'UNINSTALLED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['USER', 'APP'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          app_id == o.app_id &&
          name == o.name &&
          email == o.email &&
          password == o.password &&
          orgs == o.orgs &&
          image_path == o.image_path &&
          status == o.status &&
          type == o.type &&
          options == o.options &&
          secrets == o.secrets &&
          active_at == o.active_at &&
          login_at == o.login_at &&
          login_fail_count == o.login_fail_count &&
          title == o.title &&
          remote_ip == o.remote_ip &&
          create_id == o.create_id &&
          create_at == o.create_at &&
          update_id == o.update_id &&
          update_at == o.update_at &&
          verify_at == o.verify_at &&
          mfas == o.mfas
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, app_id, name, email, password, orgs, image_path, status, type, options, secrets, active_at, login_at, login_fail_count, title, remote_ip, create_id, create_at, update_id, update_at, verify_at, mfas].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
