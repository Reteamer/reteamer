=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class UpdatePerson
    # full name of person
    attr_accessor :name

    # contacts (emails, phones, external ids)
    attr_accessor :contacts

    # home address
    attr_accessor :address

    # current work address, if working remotely somewhere other than home address or work location
    attr_accessor :remote_work_address

    # birthdate
    attr_accessor :birth_date

    # start date of most recent hire
    attr_accessor :start_date

    # end date of most recent hire
    attr_accessor :end_date

    # path to full-sized profile image in storage
    attr_accessor :image_path

    # path to pronunciation of the person's name
    attr_accessor :name_audio_path

    # self-reported gender
    attr_accessor :gender

    # self-reported ethnicity
    attr_accessor :ethnicity

    # fields containing custom data
    attr_accessor :fields

    # personal sensitivity preferences around specific fields
    attr_accessor :sensitive_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'contacts' => :'contacts',
        :'address' => :'address',
        :'remote_work_address' => :'remoteWorkAddress',
        :'birth_date' => :'birthDate',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'image_path' => :'imagePath',
        :'name_audio_path' => :'nameAudioPath',
        :'gender' => :'gender',
        :'ethnicity' => :'ethnicity',
        :'fields' => :'fields',
        :'sensitive_fields' => :'sensitiveFields'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'Name',
        :'contacts' => :'Array<Contact>',
        :'address' => :'Address',
        :'remote_work_address' => :'Address',
        :'birth_date' => :'String',
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'image_path' => :'String',
        :'name_audio_path' => :'String',
        :'gender' => :'String',
        :'ethnicity' => :'String',
        :'fields' => :'Hash<String, Object>',
        :'sensitive_fields' => :'Object'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'contacts')
        if (value = attributes[:'contacts']).is_a?(Array)
          self.contacts = value
        end
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'remoteWorkAddress')
        self.remote_work_address = attributes[:'remoteWorkAddress']
      end

      if attributes.has_key?(:'birthDate')
        self.birth_date = attributes[:'birthDate']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'imagePath')
        self.image_path = attributes[:'imagePath']
      end

      if attributes.has_key?(:'nameAudioPath')
        self.name_audio_path = attributes[:'nameAudioPath']
      end

      if attributes.has_key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.has_key?(:'ethnicity')
        self.ethnicity = attributes[:'ethnicity']
      end

      if attributes.has_key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Hash)
          self.fields = value
        end
      end

      if attributes.has_key?(:'sensitiveFields')
        self.sensitive_fields = attributes[:'sensitiveFields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      gender_validator = EnumAttributeValidator.new('String', ['MALE', 'FEMALE', 'NONBINARY', 'PREFER_NOT'])
      return false unless gender_validator.valid?(@gender)
      ethnicity_validator = EnumAttributeValidator.new('String', ['HISPANIC', 'WHITE', 'BLACK', 'PACIFIC', 'ASIAN', 'NATIVE', 'TWO', 'PREFER_NOT'])
      return false unless ethnicity_validator.valid?(@ethnicity)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ['MALE', 'FEMALE', 'NONBINARY', 'PREFER_NOT'])
      unless validator.valid?(gender)
        fail ArgumentError, 'invalid value for "gender", must be one of #{validator.allowable_values}.'
      end
      @gender = gender
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ethnicity Object to be assigned
    def ethnicity=(ethnicity)
      validator = EnumAttributeValidator.new('String', ['HISPANIC', 'WHITE', 'BLACK', 'PACIFIC', 'ASIAN', 'NATIVE', 'TWO', 'PREFER_NOT'])
      unless validator.valid?(ethnicity)
        fail ArgumentError, 'invalid value for "ethnicity", must be one of #{validator.allowable_values}.'
      end
      @ethnicity = ethnicity
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          contacts == o.contacts &&
          address == o.address &&
          remote_work_address == o.remote_work_address &&
          birth_date == o.birth_date &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          image_path == o.image_path &&
          name_audio_path == o.name_audio_path &&
          gender == o.gender &&
          ethnicity == o.ethnicity &&
          fields == o.fields &&
          sensitive_fields == o.sensitive_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, contacts, address, remote_work_address, birth_date, start_date, end_date, image_path, name_audio_path, gender, ethnicity, fields, sensitive_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
