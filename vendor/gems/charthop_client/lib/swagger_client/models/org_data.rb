=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class OrgData
    attr_accessor :groups

    attr_accessor :scenarios

    attr_accessor :users

    attr_accessor :fields

    attr_accessor :forms

    attr_accessor :exchange_rate

    attr_accessor :stock

    attr_accessor :sensitive_user_count

    attr_accessor :job

    attr_accessor :customer

    attr_accessor :customer_details

    attr_accessor :feature_access

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'groups' => :'groups',
        :'scenarios' => :'scenarios',
        :'users' => :'users',
        :'fields' => :'fields',
        :'forms' => :'forms',
        :'exchange_rate' => :'exchangeRate',
        :'stock' => :'stock',
        :'sensitive_user_count' => :'sensitiveUserCount',
        :'job' => :'job',
        :'customer' => :'customer',
        :'customer_details' => :'customerDetails',
        :'feature_access' => :'featureAccess'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'groups' => :'Array<Hash<String, Object>>',
        :'scenarios' => :'Array<Scenario>',
        :'users' => :'Array<User>',
        :'fields' => :'Array<Field>',
        :'forms' => :'Array<Form>',
        :'exchange_rate' => :'ExchangeRate',
        :'stock' => :'OrgStockData',
        :'sensitive_user_count' => :'Hash<String, Integer>',
        :'job' => :'Job',
        :'customer' => :'Customer',
        :'customer_details' => :'CustomerDetails',
        :'feature_access' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.has_key?(:'scenarios')
        if (value = attributes[:'scenarios']).is_a?(Array)
          self.scenarios = value
        end
      end

      if attributes.has_key?(:'users')
        if (value = attributes[:'users']).is_a?(Array)
          self.users = value
        end
      end

      if attributes.has_key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Array)
          self.fields = value
        end
      end

      if attributes.has_key?(:'forms')
        if (value = attributes[:'forms']).is_a?(Array)
          self.forms = value
        end
      end

      if attributes.has_key?(:'exchangeRate')
        self.exchange_rate = attributes[:'exchangeRate']
      end

      if attributes.has_key?(:'stock')
        self.stock = attributes[:'stock']
      end

      if attributes.has_key?(:'sensitiveUserCount')
        if (value = attributes[:'sensitiveUserCount']).is_a?(Hash)
          self.sensitive_user_count = value
        end
      end

      if attributes.has_key?(:'job')
        self.job = attributes[:'job']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'customerDetails')
        self.customer_details = attributes[:'customerDetails']
      end

      if attributes.has_key?(:'featureAccess')
        if (value = attributes[:'featureAccess']).is_a?(Array)
          self.feature_access = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @groups.nil?
        invalid_properties.push('invalid value for "groups", groups cannot be nil.')
      end

      if @scenarios.nil?
        invalid_properties.push('invalid value for "scenarios", scenarios cannot be nil.')
      end

      if @users.nil?
        invalid_properties.push('invalid value for "users", users cannot be nil.')
      end

      if @fields.nil?
        invalid_properties.push('invalid value for "fields", fields cannot be nil.')
      end

      if @forms.nil?
        invalid_properties.push('invalid value for "forms", forms cannot be nil.')
      end

      if @sensitive_user_count.nil?
        invalid_properties.push('invalid value for "sensitive_user_count", sensitive_user_count cannot be nil.')
      end

      if @feature_access.nil?
        invalid_properties.push('invalid value for "feature_access", feature_access cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @groups.nil?
      return false if @scenarios.nil?
      return false if @users.nil?
      return false if @fields.nil?
      return false if @forms.nil?
      return false if @sensitive_user_count.nil?
      return false if @feature_access.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          groups == o.groups &&
          scenarios == o.scenarios &&
          users == o.users &&
          fields == o.fields &&
          forms == o.forms &&
          exchange_rate == o.exchange_rate &&
          stock == o.stock &&
          sensitive_user_count == o.sensitive_user_count &&
          job == o.job &&
          customer == o.customer &&
          customer_details == o.customer_details &&
          feature_access == o.feature_access
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [groups, scenarios, users, fields, forms, exchange_rate, stock, sensitive_user_count, job, customer, customer_details, feature_access].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
