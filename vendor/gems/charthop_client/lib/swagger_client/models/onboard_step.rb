=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class OnboardStep
    # unique id
    attr_accessor :id

    # unique string that briefly describes the onboard step
    attr_accessor :name

    # customer facing identifier
    attr_accessor :label

    # customer facing description
    attr_accessor :description

    # url for charthop docs that describe how to accomplish this step
    attr_accessor :docs_url

    # url for charthop page that where this step can be completed
    attr_accessor :action_url

    # text that shows up on the 'action button' of the card for this step
    attr_accessor :action_text

    # file name of the picture for the step (does not include path)
    attr_accessor :picture_file_name

    # numerical position for which the step appears in relationship to other onboard steps
    attr_accessor :sort

    # event type (in the format of <COLLECTION NAME>.<CHANGE TYPE>) that triggers the completion of this onboard step
    attr_accessor :event_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'label' => :'label',
        :'description' => :'description',
        :'docs_url' => :'docsUrl',
        :'action_url' => :'actionUrl',
        :'action_text' => :'actionText',
        :'picture_file_name' => :'pictureFileName',
        :'sort' => :'sort',
        :'event_type' => :'eventType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'label' => :'String',
        :'description' => :'String',
        :'docs_url' => :'String',
        :'action_url' => :'String',
        :'action_text' => :'String',
        :'picture_file_name' => :'String',
        :'sort' => :'Integer',
        :'event_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'docsUrl')
        self.docs_url = attributes[:'docsUrl']
      end

      if attributes.has_key?(:'actionUrl')
        self.action_url = attributes[:'actionUrl']
      end

      if attributes.has_key?(:'actionText')
        self.action_text = attributes[:'actionText']
      end

      if attributes.has_key?(:'pictureFileName')
        self.picture_file_name = attributes[:'pictureFileName']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.has_key?(:'eventType')
        self.event_type = attributes[:'eventType']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @label.nil?
        invalid_properties.push('invalid value for "label", label cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @docs_url.nil?
        invalid_properties.push('invalid value for "docs_url", docs_url cannot be nil.')
      end

      if @action_url.nil?
        invalid_properties.push('invalid value for "action_url", action_url cannot be nil.')
      end

      if @action_text.nil?
        invalid_properties.push('invalid value for "action_text", action_text cannot be nil.')
      end

      if @picture_file_name.nil?
        invalid_properties.push('invalid value for "picture_file_name", picture_file_name cannot be nil.')
      end

      if @sort.nil?
        invalid_properties.push('invalid value for "sort", sort cannot be nil.')
      end

      if @event_type.nil?
        invalid_properties.push('invalid value for "event_type", event_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @label.nil?
      return false if @description.nil?
      return false if @docs_url.nil?
      return false if @action_url.nil?
      return false if @action_text.nil?
      return false if @picture_file_name.nil?
      return false if @sort.nil?
      return false if @event_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          label == o.label &&
          description == o.description &&
          docs_url == o.docs_url &&
          action_url == o.action_url &&
          action_text == o.action_text &&
          picture_file_name == o.picture_file_name &&
          sort == o.sort &&
          event_type == o.event_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, name, label, description, docs_url, action_url, action_text, picture_file_name, sort, event_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
