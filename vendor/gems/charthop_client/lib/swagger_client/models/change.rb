=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class Change
    # unique id
    attr_accessor :id

    # job id
    attr_accessor :job_id

    # parent organization id
    attr_accessor :org_id

    # scenario that this change belongs to
    attr_accessor :scenario_id

    # scenario that this change was merged in from, if the change originally came from a scenario
    attr_accessor :merge_scenario_id

    # change that this change emanates from
    attr_accessor :parent_change_id

    # type of change
    attr_accessor :type

    # date of change
    attr_accessor :date

    # sort order of change
    attr_accessor :sort

    # for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change
    attr_accessor :announce_date

    # whether the change is active or not
    attr_accessor :status

    # the id of the person involved, or empty if no person attached to job
    attr_accessor :person_id

    # for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job
    attr_accessor :other_job_id

    # for MOVE changes, the id of the other person involved in the move
    attr_accessor :other_person_id

    # for DEPART changes, the type of departure
    attr_accessor :depart_type

    # for DEPART changes, whether the departure was regrettable
    attr_accessor :depart_regret

    # if it's a promotion or a demotion
    attr_accessor :promotion_type

    # the reason for the change
    attr_accessor :reason

    # for RELATE changes, the type of the relationship
    attr_accessor :relate_type

    # list of ids referenced in text field body, for indexing purposes only
    attr_accessor :refs

    # for CREATE changes, the initial job data; for other changes, the title and groups at the time of change
    attr_accessor :job

    # if otherJobId present, contains title and person.startDate of the other job at the time of change
    attr_accessor :other_job

    # if this change was data submitted by a form, the id of that form
    attr_accessor :form_id

    # if this change is associated with a goal, the id of that goal
    attr_accessor :goal_id

    # for UPDATE changes, the data being updated
    attr_accessor :update

    # for UPCOMING changes, the change ahead
    attr_accessor :upcoming

    # for changes that have been struck due to a merge conflict, the description of the conflict
    attr_accessor :conflict

    # note on the change
    attr_accessor :note

    # created by user id
    attr_accessor :create_id

    # merged by user id, if this change was merged
    attr_accessor :merge_id

    # created timestamp
    attr_accessor :create_at

    # updated timestamp
    attr_accessor :update_at

    # updated by user id
    attr_accessor :update_id

    # timestamp of status change
    attr_accessor :status_at

    # timestamp of approval
    attr_accessor :approval_at

    # approved by user id
    attr_accessor :approval_id

    # approval/rejection note
    attr_accessor :approval_note

    # if approval is required, who is allowed to approve
    attr_accessor :approval

    # view sensitivity for the author author of this form - the level of view access required to view the createId and updateId fields
    attr_accessor :author_sensitive

    # flag indicating whether authorized user can modify this change (will vary depending on user)
    attr_accessor :can_edit

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'job_id' => :'jobId',
        :'org_id' => :'orgId',
        :'scenario_id' => :'scenarioId',
        :'merge_scenario_id' => :'mergeScenarioId',
        :'parent_change_id' => :'parentChangeId',
        :'type' => :'type',
        :'date' => :'date',
        :'sort' => :'sort',
        :'announce_date' => :'announceDate',
        :'status' => :'status',
        :'person_id' => :'personId',
        :'other_job_id' => :'otherJobId',
        :'other_person_id' => :'otherPersonId',
        :'depart_type' => :'departType',
        :'depart_regret' => :'departRegret',
        :'promotion_type' => :'promotionType',
        :'reason' => :'reason',
        :'relate_type' => :'relateType',
        :'refs' => :'refs',
        :'job' => :'job',
        :'other_job' => :'otherJob',
        :'form_id' => :'formId',
        :'goal_id' => :'goalId',
        :'update' => :'update',
        :'upcoming' => :'upcoming',
        :'conflict' => :'conflict',
        :'note' => :'note',
        :'create_id' => :'createId',
        :'merge_id' => :'mergeId',
        :'create_at' => :'createAt',
        :'update_at' => :'updateAt',
        :'update_id' => :'updateId',
        :'status_at' => :'statusAt',
        :'approval_at' => :'approvalAt',
        :'approval_id' => :'approvalId',
        :'approval_note' => :'approvalNote',
        :'approval' => :'approval',
        :'author_sensitive' => :'authorSensitive',
        :'can_edit' => :'canEdit'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'job_id' => :'String',
        :'org_id' => :'String',
        :'scenario_id' => :'String',
        :'merge_scenario_id' => :'String',
        :'parent_change_id' => :'String',
        :'type' => :'String',
        :'date' => :'Date',
        :'sort' => :'Integer',
        :'announce_date' => :'Date',
        :'status' => :'String',
        :'person_id' => :'String',
        :'other_job_id' => :'String',
        :'other_person_id' => :'String',
        :'depart_type' => :'String',
        :'depart_regret' => :'String',
        :'promotion_type' => :'String',
        :'reason' => :'String',
        :'relate_type' => :'String',
        :'refs' => :'Array<Object>',
        :'job' => :'PartialJob',
        :'other_job' => :'PartialJob',
        :'form_id' => :'String',
        :'goal_id' => :'String',
        :'update' => :'JobUpdate',
        :'upcoming' => :'UpcomingChange',
        :'conflict' => :'String',
        :'note' => :'String',
        :'create_id' => :'String',
        :'merge_id' => :'String',
        :'create_at' => :'String',
        :'update_at' => :'String',
        :'update_id' => :'String',
        :'status_at' => :'String',
        :'approval_at' => :'String',
        :'approval_id' => :'String',
        :'approval_note' => :'String',
        :'approval' => :'String',
        :'author_sensitive' => :'String',
        :'can_edit' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'jobId')
        self.job_id = attributes[:'jobId']
      end

      if attributes.has_key?(:'orgId')
        self.org_id = attributes[:'orgId']
      end

      if attributes.has_key?(:'scenarioId')
        self.scenario_id = attributes[:'scenarioId']
      end

      if attributes.has_key?(:'mergeScenarioId')
        self.merge_scenario_id = attributes[:'mergeScenarioId']
      end

      if attributes.has_key?(:'parentChangeId')
        self.parent_change_id = attributes[:'parentChangeId']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'sort')
        self.sort = attributes[:'sort']
      end

      if attributes.has_key?(:'announceDate')
        self.announce_date = attributes[:'announceDate']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'personId')
        self.person_id = attributes[:'personId']
      end

      if attributes.has_key?(:'otherJobId')
        self.other_job_id = attributes[:'otherJobId']
      end

      if attributes.has_key?(:'otherPersonId')
        self.other_person_id = attributes[:'otherPersonId']
      end

      if attributes.has_key?(:'departType')
        self.depart_type = attributes[:'departType']
      end

      if attributes.has_key?(:'departRegret')
        self.depart_regret = attributes[:'departRegret']
      end

      if attributes.has_key?(:'promotionType')
        self.promotion_type = attributes[:'promotionType']
      end

      if attributes.has_key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.has_key?(:'relateType')
        self.relate_type = attributes[:'relateType']
      end

      if attributes.has_key?(:'refs')
        if (value = attributes[:'refs']).is_a?(Array)
          self.refs = value
        end
      end

      if attributes.has_key?(:'job')
        self.job = attributes[:'job']
      end

      if attributes.has_key?(:'otherJob')
        self.other_job = attributes[:'otherJob']
      end

      if attributes.has_key?(:'formId')
        self.form_id = attributes[:'formId']
      end

      if attributes.has_key?(:'goalId')
        self.goal_id = attributes[:'goalId']
      end

      if attributes.has_key?(:'update')
        self.update = attributes[:'update']
      end

      if attributes.has_key?(:'upcoming')
        self.upcoming = attributes[:'upcoming']
      end

      if attributes.has_key?(:'conflict')
        self.conflict = attributes[:'conflict']
      end

      if attributes.has_key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.has_key?(:'createId')
        self.create_id = attributes[:'createId']
      end

      if attributes.has_key?(:'mergeId')
        self.merge_id = attributes[:'mergeId']
      end

      if attributes.has_key?(:'createAt')
        self.create_at = attributes[:'createAt']
      end

      if attributes.has_key?(:'updateAt')
        self.update_at = attributes[:'updateAt']
      end

      if attributes.has_key?(:'updateId')
        self.update_id = attributes[:'updateId']
      end

      if attributes.has_key?(:'statusAt')
        self.status_at = attributes[:'statusAt']
      end

      if attributes.has_key?(:'approvalAt')
        self.approval_at = attributes[:'approvalAt']
      end

      if attributes.has_key?(:'approvalId')
        self.approval_id = attributes[:'approvalId']
      end

      if attributes.has_key?(:'approvalNote')
        self.approval_note = attributes[:'approvalNote']
      end

      if attributes.has_key?(:'approval')
        self.approval = attributes[:'approval']
      end

      if attributes.has_key?(:'authorSensitive')
        self.author_sensitive = attributes[:'authorSensitive']
      end

      if attributes.has_key?(:'canEdit')
        self.can_edit = attributes[:'canEdit']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @job_id.nil?
        invalid_properties.push('invalid value for "job_id", job_id cannot be nil.')
      end

      if @org_id.nil?
        invalid_properties.push('invalid value for "org_id", org_id cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @job_id.nil?
      return false if @org_id.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['HIRE', 'DEPART', 'MOVE', 'UPCOMING', 'CREATE', 'UPDATE', 'DATA', 'DELETE', 'RELATE', 'BACKFILL'])
      return false unless type_validator.valid?(@type)
      return false if @date.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'STRUCK', 'CONFLICT', 'INACTIVE', 'PROPOSED'])
      return false unless status_validator.valid?(@status)
      depart_type_validator = EnumAttributeValidator.new('String', ['VOLUNTARY', 'INVOLUNTARY'])
      return false unless depart_type_validator.valid?(@depart_type)
      depart_regret_validator = EnumAttributeValidator.new('String', ['REGRET', 'NONREGRET'])
      return false unless depart_regret_validator.valid?(@depart_regret)
      promotion_type_validator = EnumAttributeValidator.new('String', ['PROMOTION', 'DEMOTION', 'NONE'])
      return false unless promotion_type_validator.valid?(@promotion_type)
      relate_type_validator = EnumAttributeValidator.new('String', ['MANAGER', 'DIRECT', 'INDIRECT_MANAGER', 'INDIRECT', 'NONE'])
      return false unless relate_type_validator.valid?(@relate_type)
      approval_validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      return false unless approval_validator.valid?(@approval)
      author_sensitive_validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      return false unless author_sensitive_validator.valid?(@author_sensitive)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['HIRE', 'DEPART', 'MOVE', 'UPCOMING', 'CREATE', 'UPDATE', 'DATA', 'DELETE', 'RELATE', 'BACKFILL'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'STRUCK', 'CONFLICT', 'INACTIVE', 'PROPOSED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] depart_type Object to be assigned
    def depart_type=(depart_type)
      validator = EnumAttributeValidator.new('String', ['VOLUNTARY', 'INVOLUNTARY'])
      unless validator.valid?(depart_type)
        fail ArgumentError, 'invalid value for "depart_type", must be one of #{validator.allowable_values}.'
      end
      @depart_type = depart_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] depart_regret Object to be assigned
    def depart_regret=(depart_regret)
      validator = EnumAttributeValidator.new('String', ['REGRET', 'NONREGRET'])
      unless validator.valid?(depart_regret)
        fail ArgumentError, 'invalid value for "depart_regret", must be one of #{validator.allowable_values}.'
      end
      @depart_regret = depart_regret
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] promotion_type Object to be assigned
    def promotion_type=(promotion_type)
      validator = EnumAttributeValidator.new('String', ['PROMOTION', 'DEMOTION', 'NONE'])
      unless validator.valid?(promotion_type)
        fail ArgumentError, 'invalid value for "promotion_type", must be one of #{validator.allowable_values}.'
      end
      @promotion_type = promotion_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] relate_type Object to be assigned
    def relate_type=(relate_type)
      validator = EnumAttributeValidator.new('String', ['MANAGER', 'DIRECT', 'INDIRECT_MANAGER', 'INDIRECT', 'NONE'])
      unless validator.valid?(relate_type)
        fail ArgumentError, 'invalid value for "relate_type", must be one of #{validator.allowable_values}.'
      end
      @relate_type = relate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] approval Object to be assigned
    def approval=(approval)
      validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      unless validator.valid?(approval)
        fail ArgumentError, 'invalid value for "approval", must be one of #{validator.allowable_values}.'
      end
      @approval = approval
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] author_sensitive Object to be assigned
    def author_sensitive=(author_sensitive)
      validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      unless validator.valid?(author_sensitive)
        fail ArgumentError, 'invalid value for "author_sensitive", must be one of #{validator.allowable_values}.'
      end
      @author_sensitive = author_sensitive
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          job_id == o.job_id &&
          org_id == o.org_id &&
          scenario_id == o.scenario_id &&
          merge_scenario_id == o.merge_scenario_id &&
          parent_change_id == o.parent_change_id &&
          type == o.type &&
          date == o.date &&
          sort == o.sort &&
          announce_date == o.announce_date &&
          status == o.status &&
          person_id == o.person_id &&
          other_job_id == o.other_job_id &&
          other_person_id == o.other_person_id &&
          depart_type == o.depart_type &&
          depart_regret == o.depart_regret &&
          promotion_type == o.promotion_type &&
          reason == o.reason &&
          relate_type == o.relate_type &&
          refs == o.refs &&
          job == o.job &&
          other_job == o.other_job &&
          form_id == o.form_id &&
          goal_id == o.goal_id &&
          update == o.update &&
          upcoming == o.upcoming &&
          conflict == o.conflict &&
          note == o.note &&
          create_id == o.create_id &&
          merge_id == o.merge_id &&
          create_at == o.create_at &&
          update_at == o.update_at &&
          update_id == o.update_id &&
          status_at == o.status_at &&
          approval_at == o.approval_at &&
          approval_id == o.approval_id &&
          approval_note == o.approval_note &&
          approval == o.approval &&
          author_sensitive == o.author_sensitive &&
          can_edit == o.can_edit
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, job_id, org_id, scenario_id, merge_scenario_id, parent_change_id, type, date, sort, announce_date, status, person_id, other_job_id, other_person_id, depart_type, depart_regret, promotion_type, reason, relate_type, refs, job, other_job, form_id, goal_id, update, upcoming, conflict, note, create_id, merge_id, create_at, update_at, update_id, status_at, approval_at, approval_id, approval_note, approval, author_sensitive, can_edit].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
