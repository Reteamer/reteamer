=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class CreateApp
    # organization id
    attr_accessor :org_id

    # short unique name
    attr_accessor :name

    # list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for this app
    attr_accessor :redirect_uris

    # allowlist of IPs or IP ranges that are allowed to make API calls on behalf of this app
    attr_accessor :allowed_ips

    # list of configuration fields
    attr_accessor :config_fields

    # human-readable name of app
    attr_accessor :title

    # short summary of app
    attr_accessor :summary

    # full description of app, in Markdown
    attr_accessor :description

    # setup instructions, in Markdown
    attr_accessor :setup_instructions

    # execution order of the cron (lower numbers execute earlier)
    attr_accessor :cron_order

    # cron schedule
    attr_accessor :cron_schedule

    # path to avatar profile image, should be approximately square dimensions and show logo
    attr_accessor :image_path

    # path to larger profile logo image containing brand wordmark, does not need to be square dimensions
    attr_accessor :wordmark_image_path

    # current status of app
    attr_accessor :status

    # minimum access level requested by app
    attr_accessor :min_access

    # URL that should be notified on events
    attr_accessor :event_notify_url

    # custom payload to send in lieu of regular payload
    attr_accessor :payload

    # set of events to notify on
    attr_accessor :events

    # APP, BUNDLE, or INTERNAL
    attr_accessor :type

    # for apps of type BUNDLE, the contents included in the bundle
    attr_accessor :bundle

    # access scopes that the app is requesting
    attr_accessor :scopes

    # tags/categories the app belongs to
    attr_accessor :tags

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'org_id' => :'orgId',
        :'name' => :'name',
        :'redirect_uris' => :'redirectUris',
        :'allowed_ips' => :'allowedIps',
        :'config_fields' => :'configFields',
        :'title' => :'title',
        :'summary' => :'summary',
        :'description' => :'description',
        :'setup_instructions' => :'setupInstructions',
        :'cron_order' => :'cronOrder',
        :'cron_schedule' => :'cronSchedule',
        :'image_path' => :'imagePath',
        :'wordmark_image_path' => :'wordmarkImagePath',
        :'status' => :'status',
        :'min_access' => :'minAccess',
        :'event_notify_url' => :'eventNotifyUrl',
        :'payload' => :'payload',
        :'events' => :'events',
        :'type' => :'type',
        :'bundle' => :'bundle',
        :'scopes' => :'scopes',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'org_id' => :'String',
        :'name' => :'String',
        :'redirect_uris' => :'Array<String>',
        :'allowed_ips' => :'Array<String>',
        :'config_fields' => :'Array<AppConfigField>',
        :'title' => :'String',
        :'summary' => :'String',
        :'description' => :'String',
        :'setup_instructions' => :'String',
        :'cron_order' => :'Integer',
        :'cron_schedule' => :'String',
        :'image_path' => :'String',
        :'wordmark_image_path' => :'String',
        :'status' => :'String',
        :'min_access' => :'String',
        :'event_notify_url' => :'String',
        :'payload' => :'Hash<String, String>',
        :'events' => :'Array<String>',
        :'type' => :'String',
        :'bundle' => :'Bundle',
        :'scopes' => :'Array<String>',
        :'tags' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'orgId')
        self.org_id = attributes[:'orgId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'redirectUris')
        if (value = attributes[:'redirectUris']).is_a?(Array)
          self.redirect_uris = value
        end
      end

      if attributes.has_key?(:'allowedIps')
        if (value = attributes[:'allowedIps']).is_a?(Array)
          self.allowed_ips = value
        end
      end

      if attributes.has_key?(:'configFields')
        if (value = attributes[:'configFields']).is_a?(Array)
          self.config_fields = value
        end
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'setupInstructions')
        self.setup_instructions = attributes[:'setupInstructions']
      end

      if attributes.has_key?(:'cronOrder')
        self.cron_order = attributes[:'cronOrder']
      end

      if attributes.has_key?(:'cronSchedule')
        self.cron_schedule = attributes[:'cronSchedule']
      end

      if attributes.has_key?(:'imagePath')
        self.image_path = attributes[:'imagePath']
      end

      if attributes.has_key?(:'wordmarkImagePath')
        self.wordmark_image_path = attributes[:'wordmarkImagePath']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'minAccess')
        self.min_access = attributes[:'minAccess']
      end

      if attributes.has_key?(:'eventNotifyUrl')
        self.event_notify_url = attributes[:'eventNotifyUrl']
      end

      if attributes.has_key?(:'payload')
        if (value = attributes[:'payload']).is_a?(Hash)
          self.payload = value
        end
      end

      if attributes.has_key?(:'events')
        if (value = attributes[:'events']).is_a?(Array)
          self.events = value
        end
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'bundle')
        self.bundle = attributes[:'bundle']
      end

      if attributes.has_key?(:'scopes')
        if (value = attributes[:'scopes']).is_a?(Array)
          self.scopes = value
        end
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @org_id.nil?
        invalid_properties.push('invalid value for "org_id", org_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name !~ Regexp.new(/^[a-z0-9-]+$/)
        invalid_properties.push('invalid value for "name", must conform to the pattern /^[a-z0-9-]+$/.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @summary.nil?
        invalid_properties.push('invalid value for "summary", summary cannot be nil.')
      end

      if @cron_order.nil?
        invalid_properties.push('invalid value for "cron_order", cron_order cannot be nil.')
      end

      if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        invalid_properties.push('invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.')
      end

      if !@wordmark_image_path.nil? && @wordmark_image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        invalid_properties.push('invalid value for "wordmark_image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.')
      end

      if @min_access.nil?
        invalid_properties.push('invalid value for "min_access", min_access cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @org_id.nil?
      return false if @name.nil?
      return false if @name !~ Regexp.new(/^[a-z0-9-]+$/)
      return false if @title.nil?
      return false if @summary.nil?
      return false if @cron_order.nil?
      cron_schedule_validator = EnumAttributeValidator.new('String', ['DAILY', 'WEEKLY'])
      return false unless cron_schedule_validator.valid?(@cron_schedule)
      return false if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
      return false if !@wordmark_image_path.nil? && @wordmark_image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
      status_validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ACTIVE', 'INACTIVE', 'DEVELOPMENT'])
      return false unless status_validator.valid?(@status)
      return false if @min_access.nil?
      min_access_validator = EnumAttributeValidator.new('String', ['NONE', 'VIEW', 'LIMITED', 'MEMBER_LIMITED_COMP', 'MEMBER', 'TECH_OWNER', 'TIMEOFF', 'CONTACT', 'COMP_CASH', 'COMP_EQUITY', 'COMP_ALL', 'RECRUIT_SENSITIVE', 'RECRUIT_PRIMARY', 'PEOPLE_PARTNER', 'SENSITIVE_LIMITED_COMP', 'SENSITIVE', 'PRIMARY', 'OWNER'])
      return false unless min_access_validator.valid?(@min_access)
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['APP', 'BUNDLE', 'INTERNAL'])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name !~ Regexp.new(/^[a-z0-9-]+$/)
        fail ArgumentError, 'invalid value for "name", must conform to the pattern /^[a-z0-9-]+$/.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cron_schedule Object to be assigned
    def cron_schedule=(cron_schedule)
      validator = EnumAttributeValidator.new('String', ['DAILY', 'WEEKLY'])
      unless validator.valid?(cron_schedule)
        fail ArgumentError, 'invalid value for "cron_schedule", must be one of #{validator.allowable_values}.'
      end
      @cron_schedule = cron_schedule
    end

    # Custom attribute writer method with validation
    # @param [Object] image_path Value to be assigned
    def image_path=(image_path)
      if !image_path.nil? && image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        fail ArgumentError, 'invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.'
      end

      @image_path = image_path
    end

    # Custom attribute writer method with validation
    # @param [Object] wordmark_image_path Value to be assigned
    def wordmark_image_path=(wordmark_image_path)
      if !wordmark_image_path.nil? && wordmark_image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        fail ArgumentError, 'invalid value for "wordmark_image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.'
      end

      @wordmark_image_path = wordmark_image_path
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ACTIVE', 'INACTIVE', 'DEVELOPMENT'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] min_access Object to be assigned
    def min_access=(min_access)
      validator = EnumAttributeValidator.new('String', ['NONE', 'VIEW', 'LIMITED', 'MEMBER_LIMITED_COMP', 'MEMBER', 'TECH_OWNER', 'TIMEOFF', 'CONTACT', 'COMP_CASH', 'COMP_EQUITY', 'COMP_ALL', 'RECRUIT_SENSITIVE', 'RECRUIT_PRIMARY', 'PEOPLE_PARTNER', 'SENSITIVE_LIMITED_COMP', 'SENSITIVE', 'PRIMARY', 'OWNER'])
      unless validator.valid?(min_access)
        fail ArgumentError, 'invalid value for "min_access", must be one of #{validator.allowable_values}.'
      end
      @min_access = min_access
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['APP', 'BUNDLE', 'INTERNAL'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          org_id == o.org_id &&
          name == o.name &&
          redirect_uris == o.redirect_uris &&
          allowed_ips == o.allowed_ips &&
          config_fields == o.config_fields &&
          title == o.title &&
          summary == o.summary &&
          description == o.description &&
          setup_instructions == o.setup_instructions &&
          cron_order == o.cron_order &&
          cron_schedule == o.cron_schedule &&
          image_path == o.image_path &&
          wordmark_image_path == o.wordmark_image_path &&
          status == o.status &&
          min_access == o.min_access &&
          event_notify_url == o.event_notify_url &&
          payload == o.payload &&
          events == o.events &&
          type == o.type &&
          bundle == o.bundle &&
          scopes == o.scopes &&
          tags == o.tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [org_id, name, redirect_uris, allowed_ips, config_fields, title, summary, description, setup_instructions, cron_order, cron_schedule, image_path, wordmark_image_path, status, min_access, event_notify_url, payload, events, type, bundle, scopes, tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
