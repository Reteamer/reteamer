=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class Field
    # globally unique id
    attr_accessor :id

    # parent organization id (empty if global)
    attr_accessor :org_id

    # short field name
    attr_accessor :name

    # human-readable full name of field
    attr_accessor :label

    # description of field
    attr_accessor :description

    # human-readable question associated with field
    attr_accessor :question

    # disallow any updates to this Field (except for field.question string)
    attr_accessor :readonly

    # disallow any updates to this Field (except for field.question string)
    attr_accessor :in_use

    # calculated expression
    attr_accessor :expr

    # type of field
    attr_accessor :type

    # possible values (enum type only)
    attr_accessor :values

    # default value if field is not set
    attr_accessor :default_value

    # validation options
    attr_accessor :options

    # entity type of field
    attr_accessor :entity_type

    # sensitivity level of data
    attr_accessor :sensitive

    # hide expression-derived values from non-sensitive users
    attr_accessor :hide_expr

    # number of days after which the data becomes invalid
    attr_accessor :expire_days

    # the categories the field belongs to
    attr_accessor :category_ids

    # the status of the field
    attr_accessor :status

    # created by user id
    attr_accessor :create_id

    # created timestamp
    attr_accessor :create_at

    # last updated by user id
    attr_accessor :update_id

    # last updated timestamp
    attr_accessor :update_at

    # deleted by user id
    attr_accessor :delete_id

    # deleted timestamp
    attr_accessor :delete_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'org_id' => :'orgId',
        :'name' => :'name',
        :'label' => :'label',
        :'description' => :'description',
        :'question' => :'question',
        :'readonly' => :'readonly',
        :'in_use' => :'inUse',
        :'expr' => :'expr',
        :'type' => :'type',
        :'values' => :'values',
        :'default_value' => :'defaultValue',
        :'options' => :'options',
        :'entity_type' => :'entityType',
        :'sensitive' => :'sensitive',
        :'hide_expr' => :'hideExpr',
        :'expire_days' => :'expireDays',
        :'category_ids' => :'categoryIds',
        :'status' => :'status',
        :'create_id' => :'createId',
        :'create_at' => :'createAt',
        :'update_id' => :'updateId',
        :'update_at' => :'updateAt',
        :'delete_id' => :'deleteId',
        :'delete_at' => :'deleteAt'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'org_id' => :'String',
        :'name' => :'String',
        :'label' => :'String',
        :'description' => :'String',
        :'question' => :'String',
        :'readonly' => :'BOOLEAN',
        :'in_use' => :'BOOLEAN',
        :'expr' => :'String',
        :'type' => :'String',
        :'values' => :'Array<EnumValue>',
        :'default_value' => :'Object',
        :'options' => :'Object',
        :'entity_type' => :'String',
        :'sensitive' => :'String',
        :'hide_expr' => :'BOOLEAN',
        :'expire_days' => :'Integer',
        :'category_ids' => :'Array<String>',
        :'status' => :'String',
        :'create_id' => :'String',
        :'create_at' => :'String',
        :'update_id' => :'String',
        :'update_at' => :'String',
        :'delete_id' => :'String',
        :'delete_at' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'orgId')
        self.org_id = attributes[:'orgId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'question')
        self.question = attributes[:'question']
      end

      if attributes.has_key?(:'readonly')
        self.readonly = attributes[:'readonly']
      end

      if attributes.has_key?(:'inUse')
        self.in_use = attributes[:'inUse']
      end

      if attributes.has_key?(:'expr')
        self.expr = attributes[:'expr']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'values')
        if (value = attributes[:'values']).is_a?(Array)
          self.values = value
        end
      end

      if attributes.has_key?(:'defaultValue')
        self.default_value = attributes[:'defaultValue']
      end

      if attributes.has_key?(:'options')
        self.options = attributes[:'options']
      end

      if attributes.has_key?(:'entityType')
        self.entity_type = attributes[:'entityType']
      end

      if attributes.has_key?(:'sensitive')
        self.sensitive = attributes[:'sensitive']
      end

      if attributes.has_key?(:'hideExpr')
        self.hide_expr = attributes[:'hideExpr']
      end

      if attributes.has_key?(:'expireDays')
        self.expire_days = attributes[:'expireDays']
      end

      if attributes.has_key?(:'categoryIds')
        if (value = attributes[:'categoryIds']).is_a?(Array)
          self.category_ids = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'createId')
        self.create_id = attributes[:'createId']
      end

      if attributes.has_key?(:'createAt')
        self.create_at = attributes[:'createAt']
      end

      if attributes.has_key?(:'updateId')
        self.update_id = attributes[:'updateId']
      end

      if attributes.has_key?(:'updateAt')
        self.update_at = attributes[:'updateAt']
      end

      if attributes.has_key?(:'deleteId')
        self.delete_id = attributes[:'deleteId']
      end

      if attributes.has_key?(:'deleteAt')
        self.delete_at = attributes[:'deleteAt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name !~ Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]+$/)
        invalid_properties.push('invalid value for "name", must conform to the pattern /^[a-zA-Z][a-zA-Z0-9_]+$/.')
      end

      if @label.nil?
        invalid_properties.push('invalid value for "label", label cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @sensitive.nil?
        invalid_properties.push('invalid value for "sensitive", sensitive cannot be nil.')
      end

      if !@expire_days.nil? && @expire_days < 1
        invalid_properties.push('invalid value for "expire_days", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @name.nil?
      return false if @name !~ Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]+$/)
      return false if @label.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['STRING', 'INTEGER', 'BOOLEAN', 'DECIMAL', 'PERCENT', 'COMP', 'MONEY', 'NAME', 'DATE', 'DATETIME', 'URL', 'EMAIL', 'PHONE', 'TEXT', 'USER', 'STOCKGRANT', 'ADDRESS', 'ENUM', 'ENUM_SCALE', 'ENUM_MULTI', 'IMAGE', 'FILE', 'JOB', 'JOBS', 'PERSON', 'PERSONS', 'GROUP', 'GROUPS', 'CONTACTS', 'OBJECT', 'LIST', 'CURRENCY', 'ELAPSED_DAYS', 'ELAPSED_MONTHS', 'ELAPSED_YEARS', 'EXPR', 'ENUM_EXPR', 'TIMEOFF'])
      return false unless type_validator.valid?(@type)
      entity_type_validator = EnumAttributeValidator.new('String', ['JOB', 'JOB_OPEN', 'JOB_FILLED', 'PERSON'])
      return false unless entity_type_validator.valid?(@entity_type)
      return false if @sensitive.nil?
      sensitive_validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      return false unless sensitive_validator.valid?(@sensitive)
      return false if !@expire_days.nil? && @expire_days < 1
      status_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'HIDDEN'])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name !~ Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]+$/)
        fail ArgumentError, 'invalid value for "name", must conform to the pattern /^[a-zA-Z][a-zA-Z0-9_]+$/.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['STRING', 'INTEGER', 'BOOLEAN', 'DECIMAL', 'PERCENT', 'COMP', 'MONEY', 'NAME', 'DATE', 'DATETIME', 'URL', 'EMAIL', 'PHONE', 'TEXT', 'USER', 'STOCKGRANT', 'ADDRESS', 'ENUM', 'ENUM_SCALE', 'ENUM_MULTI', 'IMAGE', 'FILE', 'JOB', 'JOBS', 'PERSON', 'PERSONS', 'GROUP', 'GROUPS', 'CONTACTS', 'OBJECT', 'LIST', 'CURRENCY', 'ELAPSED_DAYS', 'ELAPSED_MONTHS', 'ELAPSED_YEARS', 'EXPR', 'ENUM_EXPR', 'TIMEOFF'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity_type Object to be assigned
    def entity_type=(entity_type)
      validator = EnumAttributeValidator.new('String', ['JOB', 'JOB_OPEN', 'JOB_FILLED', 'PERSON'])
      unless validator.valid?(entity_type)
        fail ArgumentError, 'invalid value for "entity_type", must be one of #{validator.allowable_values}.'
      end
      @entity_type = entity_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sensitive Object to be assigned
    def sensitive=(sensitive)
      validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      unless validator.valid?(sensitive)
        fail ArgumentError, 'invalid value for "sensitive", must be one of #{validator.allowable_values}.'
      end
      @sensitive = sensitive
    end

    # Custom attribute writer method with validation
    # @param [Object] expire_days Value to be assigned
    def expire_days=(expire_days)
      if !expire_days.nil? && expire_days < 1
        fail ArgumentError, 'invalid value for "expire_days", must be greater than or equal to 1.'
      end

      @expire_days = expire_days
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'HIDDEN'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          org_id == o.org_id &&
          name == o.name &&
          label == o.label &&
          description == o.description &&
          question == o.question &&
          readonly == o.readonly &&
          in_use == o.in_use &&
          expr == o.expr &&
          type == o.type &&
          values == o.values &&
          default_value == o.default_value &&
          options == o.options &&
          entity_type == o.entity_type &&
          sensitive == o.sensitive &&
          hide_expr == o.hide_expr &&
          expire_days == o.expire_days &&
          category_ids == o.category_ids &&
          status == o.status &&
          create_id == o.create_id &&
          create_at == o.create_at &&
          update_id == o.update_id &&
          update_at == o.update_at &&
          delete_id == o.delete_id &&
          delete_at == o.delete_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, org_id, name, label, description, question, readonly, in_use, expr, type, values, default_value, options, entity_type, sensitive, hide_expr, expire_days, category_ids, status, create_id, create_at, update_id, update_at, delete_id, delete_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
