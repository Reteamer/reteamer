=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class CreateOrg
    # customer for billing processing
    attr_accessor :customer_id

    # name of organization
    attr_accessor :name

    # unique slug of organization
    attr_accessor :slug

    # type of organization
    attr_accessor :type

    # industry
    attr_accessor :industry

    # approximate number of employees
    attr_accessor :est_employees

    # approximate amount of revenue
    attr_accessor :est_revenue

    # year of founding
    attr_accessor :founded_year

    # street address
    attr_accessor :address

    # company phone number in E.164 format
    attr_accessor :phone

    # primary contact email
    attr_accessor :email

    # website URL
    attr_accessor :url

    # domains used by this org
    attr_accessor :domains

    # current status of organization
    attr_accessor :status

    # path to full-sized profile image in storage
    attr_accessor :image_path

    # types of currencies in use, with the first currency the primary currency
    attr_accessor :currencies

    # stock symbol
    attr_accessor :stock

    # timezone in use
    attr_accessor :timezone

    # approximate time of day for daily app syncs to run (defaults to 9am Eastern time)
    attr_accessor :app_time

    # infrastructure zone
    attr_accessor :zone

    # number of months into the calendar year that the fiscal year starts (1 = February, 2 = March)
    attr_accessor :fiscal_start

    # start date of history
    attr_accessor :start_date

    # map of sensitive field defaults
    attr_accessor :sensitive_fields

    # org-public options
    attr_accessor :options

    # internal (ChartHop controlled) options
    attr_accessor :internal_options

    # list of onboard steps that this Org has completed (or skipped)
    attr_accessor :onboard_steps

    # current onboarding status of an organization, allowing clearing of org
    attr_accessor :onboarding

    # completion status of initial import for orgs signed up via self serve
    attr_accessor :self_serve_importing

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer_id' => :'customerId',
        :'name' => :'name',
        :'slug' => :'slug',
        :'type' => :'type',
        :'industry' => :'industry',
        :'est_employees' => :'estEmployees',
        :'est_revenue' => :'estRevenue',
        :'founded_year' => :'foundedYear',
        :'address' => :'address',
        :'phone' => :'phone',
        :'email' => :'email',
        :'url' => :'url',
        :'domains' => :'domains',
        :'status' => :'status',
        :'image_path' => :'imagePath',
        :'currencies' => :'currencies',
        :'stock' => :'stock',
        :'timezone' => :'timezone',
        :'app_time' => :'appTime',
        :'zone' => :'zone',
        :'fiscal_start' => :'fiscalStart',
        :'start_date' => :'startDate',
        :'sensitive_fields' => :'sensitiveFields',
        :'options' => :'options',
        :'internal_options' => :'internalOptions',
        :'onboard_steps' => :'onboardSteps',
        :'onboarding' => :'onboarding',
        :'self_serve_importing' => :'selfServeImporting'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'customer_id' => :'String',
        :'name' => :'String',
        :'slug' => :'String',
        :'type' => :'String',
        :'industry' => :'String',
        :'est_employees' => :'Integer',
        :'est_revenue' => :'Integer',
        :'founded_year' => :'Integer',
        :'address' => :'Address',
        :'phone' => :'String',
        :'email' => :'String',
        :'url' => :'String',
        :'domains' => :'Array<OrgDomain>',
        :'status' => :'String',
        :'image_path' => :'String',
        :'currencies' => :'Array<String>',
        :'stock' => :'String',
        :'timezone' => :'String',
        :'app_time' => :'String',
        :'zone' => :'Integer',
        :'fiscal_start' => :'Integer',
        :'start_date' => :'String',
        :'sensitive_fields' => :'Object',
        :'options' => :'Object',
        :'internal_options' => :'Object',
        :'onboard_steps' => :'Array<OnboardStepResult>',
        :'onboarding' => :'BOOLEAN',
        :'self_serve_importing' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'customerId')
        self.customer_id = attributes[:'customerId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'industry')
        self.industry = attributes[:'industry']
      end

      if attributes.has_key?(:'estEmployees')
        self.est_employees = attributes[:'estEmployees']
      end

      if attributes.has_key?(:'estRevenue')
        self.est_revenue = attributes[:'estRevenue']
      end

      if attributes.has_key?(:'foundedYear')
        self.founded_year = attributes[:'foundedYear']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'domains')
        if (value = attributes[:'domains']).is_a?(Array)
          self.domains = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'imagePath')
        self.image_path = attributes[:'imagePath']
      end

      if attributes.has_key?(:'currencies')
        if (value = attributes[:'currencies']).is_a?(Array)
          self.currencies = value
        end
      end

      if attributes.has_key?(:'stock')
        self.stock = attributes[:'stock']
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.has_key?(:'appTime')
        self.app_time = attributes[:'appTime']
      end

      if attributes.has_key?(:'zone')
        self.zone = attributes[:'zone']
      end

      if attributes.has_key?(:'fiscalStart')
        self.fiscal_start = attributes[:'fiscalStart']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'sensitiveFields')
        self.sensitive_fields = attributes[:'sensitiveFields']
      end

      if attributes.has_key?(:'options')
        self.options = attributes[:'options']
      end

      if attributes.has_key?(:'internalOptions')
        self.internal_options = attributes[:'internalOptions']
      end

      if attributes.has_key?(:'onboardSteps')
        if (value = attributes[:'onboardSteps']).is_a?(Array)
          self.onboard_steps = value
        end
      end

      if attributes.has_key?(:'onboarding')
        self.onboarding = attributes[:'onboarding']
      end

      if attributes.has_key?(:'selfServeImporting')
        self.self_serve_importing = attributes[:'selfServeImporting']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @est_employees.nil?
        invalid_properties.push('invalid value for "est_employees", est_employees cannot be nil.')
      end

      if !@phone.nil? && @phone !~ Regexp.new(/^\\+?[1-9]\\d{1,14}$/)
        invalid_properties.push('invalid value for "phone", must conform to the pattern /^\\+?[1-9]\\d{1,14}$/.')
      end

      if !@email.nil? && @email !~ Regexp.new(/.+@.+\\..+/)
        invalid_properties.push('invalid value for "email", must conform to the pattern /.+@.+\\..+/.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        invalid_properties.push('invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.')
      end

      if @currencies.nil?
        invalid_properties.push('invalid value for "currencies", currencies cannot be nil.')
      end

      if @timezone.nil?
        invalid_properties.push('invalid value for "timezone", timezone cannot be nil.')
      end

      if @onboarding.nil?
        invalid_properties.push('invalid value for "onboarding", onboarding cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['PRIVATE', 'PUBLIC', 'EDU', 'GOV', 'NONPROFIT', 'DEMO', 'TEST'])
      return false unless type_validator.valid?(@type)
      return false if @est_employees.nil?
      return false if !@phone.nil? && @phone !~ Regexp.new(/^\\+?[1-9]\\d{1,14}$/)
      return false if !@email.nil? && @email !~ Regexp.new(/.+@.+\\..+/)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'INACTIVE', 'DISABLED'])
      return false unless status_validator.valid?(@status)
      return false if !@image_path.nil? && @image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
      return false if @currencies.nil?
      return false if @timezone.nil?
      return false if @onboarding.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['PRIVATE', 'PUBLIC', 'EDU', 'GOV', 'NONPROFIT', 'DEMO', 'TEST'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone !~ Regexp.new(/^\\+?[1-9]\\d{1,14}$/)
        fail ArgumentError, 'invalid value for "phone", must conform to the pattern /^\\+?[1-9]\\d{1,14}$/.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email !~ Regexp.new(/.+@.+\\..+/)
        fail ArgumentError, 'invalid value for "email", must conform to the pattern /.+@.+\\..+/.'
      end

      @email = email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'INACTIVE', 'DISABLED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] image_path Value to be assigned
    def image_path=(image_path)
      if !image_path.nil? && image_path !~ Regexp.new(/^[a-z0-9.-_\/]+$/)
        fail ArgumentError, 'invalid value for "image_path", must conform to the pattern /^[a-z0-9.-_\/]+$/.'
      end

      @image_path = image_path
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer_id == o.customer_id &&
          name == o.name &&
          slug == o.slug &&
          type == o.type &&
          industry == o.industry &&
          est_employees == o.est_employees &&
          est_revenue == o.est_revenue &&
          founded_year == o.founded_year &&
          address == o.address &&
          phone == o.phone &&
          email == o.email &&
          url == o.url &&
          domains == o.domains &&
          status == o.status &&
          image_path == o.image_path &&
          currencies == o.currencies &&
          stock == o.stock &&
          timezone == o.timezone &&
          app_time == o.app_time &&
          zone == o.zone &&
          fiscal_start == o.fiscal_start &&
          start_date == o.start_date &&
          sensitive_fields == o.sensitive_fields &&
          options == o.options &&
          internal_options == o.internal_options &&
          onboard_steps == o.onboard_steps &&
          onboarding == o.onboarding &&
          self_serve_importing == o.self_serve_importing
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [customer_id, name, slug, type, industry, est_employees, est_revenue, founded_year, address, phone, email, url, domains, status, image_path, currencies, stock, timezone, app_time, zone, fiscal_start, start_date, sensitive_fields, options, internal_options, onboard_steps, onboarding, self_serve_importing].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
