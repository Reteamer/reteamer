=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class Address
    # street address, line 1
    attr_accessor :street1

    # street address, line 2
    attr_accessor :street2

    # street address, line 3
    attr_accessor :street3

    # city
    attr_accessor :city

    # state
    attr_accessor :state

    # country (two-digit ISO code)
    attr_accessor :country

    # postal code
    attr_accessor :postal

    # geopoint location
    attr_accessor :geo

    # approximate geopoint location (suitable for a map placement, but not exact location)
    attr_accessor :approx_geo

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'street1' => :'street1',
        :'street2' => :'street2',
        :'street3' => :'street3',
        :'city' => :'city',
        :'state' => :'state',
        :'country' => :'country',
        :'postal' => :'postal',
        :'geo' => :'geo',
        :'approx_geo' => :'approxGeo'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'street1' => :'String',
        :'street2' => :'String',
        :'street3' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'country' => :'String',
        :'postal' => :'String',
        :'geo' => :'Geopoint',
        :'approx_geo' => :'Geopoint'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'street1')
        self.street1 = attributes[:'street1']
      end

      if attributes.has_key?(:'street2')
        self.street2 = attributes[:'street2']
      end

      if attributes.has_key?(:'street3')
        self.street3 = attributes[:'street3']
      end

      if attributes.has_key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'postal')
        self.postal = attributes[:'postal']
      end

      if attributes.has_key?(:'geo')
        self.geo = attributes[:'geo']
      end

      if attributes.has_key?(:'approxGeo')
        self.approx_geo = attributes[:'approxGeo']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @country.nil?
        invalid_properties.push('invalid value for "country", country cannot be nil.')
      end

      if @country !~ Regexp.new(/^[A-Z]{2}$/)
        invalid_properties.push('invalid value for "country", must conform to the pattern /^[A-Z]{2}$/.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @country.nil?
      return false if @country !~ Regexp.new(/^[A-Z]{2}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if country.nil?
        fail ArgumentError, 'country cannot be nil'
      end

      if country !~ Regexp.new(/^[A-Z]{2}$/)
        fail ArgumentError, 'invalid value for "country", must conform to the pattern /^[A-Z]{2}$/.'
      end

      @country = country
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          street1 == o.street1 &&
          street2 == o.street2 &&
          street3 == o.street3 &&
          city == o.city &&
          state == o.state &&
          country == o.country &&
          postal == o.postal &&
          geo == o.geo &&
          approx_geo == o.approx_geo
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [street1, street2, street3, city, state, country, postal, geo, approx_geo].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
