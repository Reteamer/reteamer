=begin
#ChartHop API

#REST API for ChartHop

OpenAPI spec version: V1.0.0
Contact: support@charthop.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.25

=end

require 'date'

module SwaggerClient
  class JobUpdate
    # relationships to add
    attr_accessor :add_relationships

    # relationships to remove
    attr_accessor :remove_relationships

    # groups to add
    attr_accessor :add_group_ids

    # groups to remove
    attr_accessor :remove_group_ids

    # groups to set
    attr_accessor :set_group_ids

    # stock grant to add
    attr_accessor :grant

    # time off to add
    attr_accessor :time_off

    # new title
    attr_accessor :title

    # new compensation level
    attr_accessor :comp

    # new placement
    attr_accessor :placement

    # new employment status
    attr_accessor :employment

    # new view sensitivity
    attr_accessor :sensitive

    # new expected start date
    attr_accessor :start_date

    # set who this job is backfilling
    attr_accessor :backfill_person_id

    # custom fields values to set
    attr_accessor :fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'add_relationships' => :'addRelationships',
        :'remove_relationships' => :'removeRelationships',
        :'add_group_ids' => :'addGroupIds',
        :'remove_group_ids' => :'removeGroupIds',
        :'set_group_ids' => :'setGroupIds',
        :'grant' => :'grant',
        :'time_off' => :'timeOff',
        :'title' => :'title',
        :'comp' => :'comp',
        :'placement' => :'placement',
        :'employment' => :'employment',
        :'sensitive' => :'sensitive',
        :'start_date' => :'startDate',
        :'backfill_person_id' => :'backfillPersonId',
        :'fields' => :'fields'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'add_relationships' => :'Array<JobRelationship>',
        :'remove_relationships' => :'Array<JobRelationship>',
        :'add_group_ids' => :'Array<String>',
        :'remove_group_ids' => :'Array<String>',
        :'set_group_ids' => :'Hash<String, String>',
        :'grant' => :'StockGrant',
        :'time_off' => :'TimeOff',
        :'title' => :'String',
        :'comp' => :'Comp',
        :'placement' => :'String',
        :'employment' => :'String',
        :'sensitive' => :'String',
        :'start_date' => :'Date',
        :'backfill_person_id' => :'Object',
        :'fields' => :'Hash<String, Object>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'addRelationships')
        if (value = attributes[:'addRelationships']).is_a?(Array)
          self.add_relationships = value
        end
      end

      if attributes.has_key?(:'removeRelationships')
        if (value = attributes[:'removeRelationships']).is_a?(Array)
          self.remove_relationships = value
        end
      end

      if attributes.has_key?(:'addGroupIds')
        if (value = attributes[:'addGroupIds']).is_a?(Array)
          self.add_group_ids = value
        end
      end

      if attributes.has_key?(:'removeGroupIds')
        if (value = attributes[:'removeGroupIds']).is_a?(Array)
          self.remove_group_ids = value
        end
      end

      if attributes.has_key?(:'setGroupIds')
        if (value = attributes[:'setGroupIds']).is_a?(Hash)
          self.set_group_ids = value
        end
      end

      if attributes.has_key?(:'grant')
        self.grant = attributes[:'grant']
      end

      if attributes.has_key?(:'timeOff')
        self.time_off = attributes[:'timeOff']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'comp')
        self.comp = attributes[:'comp']
      end

      if attributes.has_key?(:'placement')
        self.placement = attributes[:'placement']
      end

      if attributes.has_key?(:'employment')
        self.employment = attributes[:'employment']
      end

      if attributes.has_key?(:'sensitive')
        self.sensitive = attributes[:'sensitive']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'backfillPersonId')
        self.backfill_person_id = attributes[:'backfillPersonId']
      end

      if attributes.has_key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Hash)
          self.fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      placement_validator = EnumAttributeValidator.new('String', ['NORMAL', 'ASSISTANT'])
      return false unless placement_validator.valid?(@placement)
      employment_validator = EnumAttributeValidator.new('String', ['FULL', 'PART', 'TEMP', 'CONTRACT', 'INTERN', 'EXPAT'])
      return false unless employment_validator.valid?(@employment)
      sensitive_validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      return false unless sensitive_validator.valid?(@sensitive)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] placement Object to be assigned
    def placement=(placement)
      validator = EnumAttributeValidator.new('String', ['NORMAL', 'ASSISTANT'])
      unless validator.valid?(placement)
        fail ArgumentError, 'invalid value for "placement", must be one of #{validator.allowable_values}.'
      end
      @placement = placement
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment Object to be assigned
    def employment=(employment)
      validator = EnumAttributeValidator.new('String', ['FULL', 'PART', 'TEMP', 'CONTRACT', 'INTERN', 'EXPAT'])
      unless validator.valid?(employment)
        fail ArgumentError, 'invalid value for "employment", must be one of #{validator.allowable_values}.'
      end
      @employment = employment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sensitive Object to be assigned
    def sensitive=(sensitive)
      validator = EnumAttributeValidator.new('String', ['GLOBAL', 'ORG', 'ORG_OTHER', 'PERSONAL_DEMOG', 'PERSONAL_BIRTH', 'PERSONAL_CONTACT', 'PERSONAL_PRIVATE', 'SENSITIVE_BIRTH', 'SENSITIVE_CONTACT', 'TIMEOFF', 'COMP_CASH', 'COMP_EQUITY', 'SENSITIVE', 'PERSONAL', 'MANAGER', 'GRAND_MANAGER', 'DIRECT', 'PEERS', 'HIGH', 'PRIVATE'])
      unless validator.valid?(sensitive)
        fail ArgumentError, 'invalid value for "sensitive", must be one of #{validator.allowable_values}.'
      end
      @sensitive = sensitive
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          add_relationships == o.add_relationships &&
          remove_relationships == o.remove_relationships &&
          add_group_ids == o.add_group_ids &&
          remove_group_ids == o.remove_group_ids &&
          set_group_ids == o.set_group_ids &&
          grant == o.grant &&
          time_off == o.time_off &&
          title == o.title &&
          comp == o.comp &&
          placement == o.placement &&
          employment == o.employment &&
          sensitive == o.sensitive &&
          start_date == o.start_date &&
          backfill_person_id == o.backfill_person_id &&
          fields == o.fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [add_relationships, remove_relationships, add_group_ids, remove_group_ids, set_group_ids, grant, time_off, title, comp, placement, employment, sensitive, start_date, backfill_person_id, fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
